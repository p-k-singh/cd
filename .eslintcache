[{"C:\\Users\\Administrator\\Desktop\\cd\\src\\index.js":"1","C:\\Users\\Administrator\\Desktop\\cd\\src\\config.js":"2","C:\\Users\\Administrator\\Desktop\\cd\\src\\reportWebVitals.js":"3","C:\\Users\\Administrator\\Desktop\\cd\\src\\App.js":"4","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\reducers\\orderReducer.js":"5","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\reducers\\loginReducer.js":"6","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Auth\\SignUp\\signupform.js":"7","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Home.js":"8","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderStatus\\orderSuccess.js":"9","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\Checkout.js":"10","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderStatus\\orderFailure.js":"11","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Help\\Help.js":"12","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\MyOrders\\MyOrders.js":"13","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderDetail.js":"14","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Profile\\MyProfile.js":"15","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\AddUser.js":"16","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Navigation.js":"17","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Inventory\\Inventory.js":"18","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\userManager.js":"19","C:\\Users\\Administrator\\Desktop\\cd\\src\\libs\\contextLibs.js":"20","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\EditUser.js":"21","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UI\\Spinner.js":"22","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\ModifyRoleAccess.js":"23","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\ShowUser.js":"24","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Preference\\PreferencePage.js":"25","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\actions\\actionTypes.js":"26","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\ForwardedCheckout.js":"27","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\actions\\index.js":"28","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Auth\\ResetPassword\\ResetPassword.js":"29","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Auth\\Welcome\\welcomePage.js":"30","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Auth\\Login\\loginform.js":"31","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\actions\\order.js":"32","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\OrderSummary.js":"33","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\LocationDetails.js":"34","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\actions\\login.js":"35","C:\\Users\\Administrator\\Desktop\\cd\\src\\Constants\\constants.js":"36","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\ProductDetails.js":"37","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderDetails\\CompleteDetails.js":"38","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Inventory\\AddProductForm.js":"39","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Inventory\\ShowProducts.js":"40","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Inventory\\EditForm.js":"41","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderDetails\\OrderDetails.js":"42","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\AccountDetails\\AccountIndex.js":"43","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\CompanyKYCForm.js":"44","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\CompanyDetails\\IndexCompanyDetails.js":"45","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\CompanyDetails\\FormCompanyDetails.js":"46","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\TaxDetails\\TaxIndex.js":"47","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\TaxDetails\\TaxForm.js":"48","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\AccountDetails\\AccountForm.js":"49","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\KYCPage.js":"50","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\CompanyKycPanel.js":"51","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Payments\\PaymentIndex.js":"52","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\PriceCalculator\\PriceCalculator.js":"53","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Payments\\Upload\\Upload.js":"54","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Payments\\Progress\\Progress.js":"55","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Payments\\Dropzone\\Dropzone.js":"56","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OpenPriceCalculator.js":"57","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Payments\\ShowDetails.js":"58","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Track\\Track.js":"59","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Preference\\AddAddressForm.js":"60","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Preference\\ShowAddresses.js":"61","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Preference\\EditForm.js":"62","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\PaymentPromise.js":"63","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Track\\TaskManager.js":"64"},{"size":2146,"mtime":1613476194217,"results":"65","hashOfConfig":"66"},{"size":418,"mtime":1613476194217,"results":"67","hashOfConfig":"66"},{"size":375,"mtime":1613476194219,"results":"68","hashOfConfig":"66"},{"size":7994,"mtime":1615430746437,"results":"69","hashOfConfig":"66"},{"size":3672,"mtime":1614843910859,"results":"70","hashOfConfig":"66"},{"size":1317,"mtime":1613476194223,"results":"71","hashOfConfig":"66"},{"size":14110,"mtime":1615180337205,"results":"72","hashOfConfig":"66"},{"size":16857,"mtime":1615778894424,"results":"73","hashOfConfig":"66"},{"size":516,"mtime":1614076641178,"results":"74","hashOfConfig":"66"},{"size":18055,"mtime":1615781089969,"results":"75","hashOfConfig":"66"},{"size":208,"mtime":1613476194203,"results":"76","hashOfConfig":"66"},{"size":2445,"mtime":1615288117803,"results":"77","hashOfConfig":"66"},{"size":11615,"mtime":1615779339164,"results":"78","hashOfConfig":"66"},{"size":3570,"mtime":1615030468737,"results":"79","hashOfConfig":"66"},{"size":8194,"mtime":1615183162644,"results":"80","hashOfConfig":"66"},{"size":7840,"mtime":1614347871443,"results":"81","hashOfConfig":"66"},{"size":10256,"mtime":1615782377863,"results":"82","hashOfConfig":"66"},{"size":2120,"mtime":1614253736409,"results":"83","hashOfConfig":"66"},{"size":3879,"mtime":1613476194216,"results":"84","hashOfConfig":"66"},{"size":174,"mtime":1613476194218,"results":"85","hashOfConfig":"66"},{"size":7835,"mtime":1613476194214,"results":"86","hashOfConfig":"66"},{"size":348,"mtime":1613476194212,"results":"87","hashOfConfig":"66"},{"size":5907,"mtime":1613476194215,"results":"88","hashOfConfig":"66"},{"size":6394,"mtime":1613476194215,"results":"89","hashOfConfig":"66"},{"size":2119,"mtime":1614261985506,"results":"90","hashOfConfig":"66"},{"size":1640,"mtime":1614840373066,"results":"91","hashOfConfig":"66"},{"size":11377,"mtime":1615630819355,"results":"92","hashOfConfig":"66"},{"size":640,"mtime":1614840487647,"results":"93","hashOfConfig":"66"},{"size":4489,"mtime":1613476194177,"results":"94","hashOfConfig":"66"},{"size":1578,"mtime":1614424435910,"results":"95","hashOfConfig":"66"},{"size":8323,"mtime":1615430117968,"results":"96","hashOfConfig":"66"},{"size":3384,"mtime":1614840332906,"results":"97","hashOfConfig":"66"},{"size":15901,"mtime":1615776180557,"results":"98","hashOfConfig":"66"},{"size":17526,"mtime":1615781465158,"results":"99","hashOfConfig":"66"},{"size":982,"mtime":1613476194222,"results":"100","hashOfConfig":"66"},{"size":8122,"mtime":1615798433133,"results":"101","hashOfConfig":"66"},{"size":38141,"mtime":1615630117061,"results":"102","hashOfConfig":"66"},{"size":8328,"mtime":1613476194201,"results":"103","hashOfConfig":"66"},{"size":18539,"mtime":1615793288238,"results":"104","hashOfConfig":"66"},{"size":9212,"mtime":1615794804070,"results":"105","hashOfConfig":"66"},{"size":13657,"mtime":1615795012589,"results":"106","hashOfConfig":"66"},{"size":10378,"mtime":1615779262236,"results":"107","hashOfConfig":"66"},{"size":2464,"mtime":1613476194191,"results":"108","hashOfConfig":"66"},{"size":13385,"mtime":1614850118805,"results":"109","hashOfConfig":"66"},{"size":2536,"mtime":1615178908943,"results":"110","hashOfConfig":"66"},{"size":9690,"mtime":1614873765532,"results":"111","hashOfConfig":"66"},{"size":2580,"mtime":1615178872209,"results":"112","hashOfConfig":"66"},{"size":8858,"mtime":1614873830903,"results":"113","hashOfConfig":"66"},{"size":5421,"mtime":1614875334479,"results":"114","hashOfConfig":"66"},{"size":7278,"mtime":1613476194196,"results":"115","hashOfConfig":"66"},{"size":7844,"mtime":1613476194196,"results":"116","hashOfConfig":"66"},{"size":25336,"mtime":1615096944560,"results":"117","hashOfConfig":"66"},{"size":42254,"mtime":1615630682053,"results":"118","hashOfConfig":"66"},{"size":7424,"mtime":1613920499709,"results":"119","hashOfConfig":"66"},{"size":414,"mtime":1613476194207,"results":"120","hashOfConfig":"66"},{"size":2212,"mtime":1613920499677,"results":"121","hashOfConfig":"66"},{"size":19387,"mtime":1614424435923,"results":"122","hashOfConfig":"66"},{"size":19692,"mtime":1615097351428,"results":"123","hashOfConfig":"66"},{"size":22073,"mtime":1615782184820,"results":"124","hashOfConfig":"66"},{"size":5778,"mtime":1614312007161,"results":"125","hashOfConfig":"66"},{"size":10719,"mtime":1614766216656,"results":"126","hashOfConfig":"66"},{"size":11979,"mtime":1614254007576,"results":"127","hashOfConfig":"66"},{"size":4513,"mtime":1614841525681,"results":"128","hashOfConfig":"66"},{"size":18803,"mtime":1615782362558,"results":"129","hashOfConfig":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},"1ogkf18",{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"132"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"132"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"132"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"132"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"132"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"132"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"132"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"132"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"132"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"132"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"132"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"132"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"132"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"132"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"225","messages":"226","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"227","messages":"228","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"229","messages":"230","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"132"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"132"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"132"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"132"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"132"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"132"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"132"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"132"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"132"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"132"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"132"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"132"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"132"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"132"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"277","messages":"278","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"132"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"132"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"132"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"132"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":41,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Administrator\\Desktop\\cd\\src\\index.js",[],["291","292"],"C:\\Users\\Administrator\\Desktop\\cd\\src\\config.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\reportWebVitals.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\App.js",["293"],"import { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport Navigation from \"./components/Navigation\";\r\nimport Home from \"./components/Home\";\r\nimport Form from \"./components/Forms/Checkout\";\r\nimport RedirForm from \"./components/Forms/ForwardedCheckout\";\r\nimport MyProfile from \"./components/Profile/MyProfile\";\r\nimport Track from \"./components/Track/Track\";\r\nimport PriceCalculator from \"./components/PriceCalculator/PriceCalculator\";\r\nimport OpenPriceCalculator from \"./components/OpenPriceCalculator\";\r\nimport Success from \"./components/OrderStatus/orderSuccess\";\r\nimport Failure from \"./components/OrderStatus/orderFailure\";\r\nimport MyOrders from \"./components/MyOrders/MyOrders\";\r\nimport OrderDetail from \"./components/OrderDetail\";\r\nimport Inventory from \"./components/Inventory/Inventory\";\r\nimport Help from \"./components/Help/Help\";\r\nimport SignUp from \"./components/Auth/SignUp/signupform.js\";\r\nimport Login from \"./components/Auth/Login/loginform\";\r\nimport { connect } from \"react-redux\";\r\nimport Welcome from \"./components/Auth/Welcome/welcomePage\";\r\nimport ResetPassword from \"./components/Auth/ResetPassword/ResetPassword\";\r\nimport PaymentIndex from \"./components/Payments/PaymentIndex\";\r\n\r\nimport UserManager from \"./components/UserManager/userManager\";\r\nimport ShowUser from \"./components/UserManager/ShowUser\";\r\nimport AddUser from \"./components/UserManager/AddUser\";\r\nimport EditUser from \"./components/UserManager/EditUser\";\r\nimport ModifyRoleAccesses from \"./components/UserManager/ModifyRoleAccess\";\r\n\r\nimport KYC from \"./components/KYC/KYCPage\";\r\nimport KYCPanel from \"./components/KYC/CompanyKycPanel\";\r\n//import BasicInfoIndex from './components/KYC/BasicInfoKyc/BasicInfoIndex'\r\n\r\nimport Preference from \"./components/Preference/PreferencePage\";\r\nimport { Auth, API } from \"aws-amplify\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Spinner from \"./components/UI/Spinner\";\r\nimport * as actions from \"./store/actions/index\";\r\nimport { AppContext } from \"./libs/contextLibs\";\r\nimport TaskManager from \"./components/Track/TaskManager\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: theme.spacing(0, 0),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(4),\r\n  },\r\n}));\r\n\r\nfunction App(props) {\r\n  const classes = useStyles();\r\n  const [isAuthenticated, userHasAuthenticated] = useState(false);\r\n  const [isAuthenticating, setIsAuthenticating] = useState(true);\r\n\r\n  //const [data, setData] = useState([]);\r\n  // const callAPIGateway = async () => {\r\n  //   try{\r\n  //   const customerEmail = \"prashantkumarsingh9423@gmail.com\"\r\n  //   const result = await API.get(\"GoFlexeOrderPlacement\", `/customerorder/customer/${customerEmail}`)\r\n  //   console.log(result);\r\n  //   console.log(\"Set data ato : \", result)\r\n  //   const credentials = await Auth.currentCredentials();\r\n  //   console.log(Auth.essentialCredentials(credentials))}\r\n  //   catch(e){\r\n  //     console.log(\"PKSING\"+e)\r\n  //   }\r\n  // }\r\n\r\n  useEffect(() => {\r\n    Auth.currentUserInfo()\r\n      .then((res) => console.log(res))\r\n      .catch((err) => console.log(err));\r\n    onLoad();\r\n  }, []);\r\n\r\n  async function onLoad() {\r\n    try {\r\n      await Auth.currentSession();\r\n      userHasAuthenticated(true);\r\n      const user = await Auth.currentUserInfo();\r\n      console.log(user);\r\n    } catch (e) {\r\n      if (e !== \"No current user\") {\r\n        alert(e);\r\n      }\r\n    }\r\n\r\n    setIsAuthenticating(false);\r\n  }\r\n  if (isAuthenticating) {\r\n    return <Spinner />;\r\n  }\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <div className={classes.root}>\r\n        <Welcome />\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          <AppContext.Provider\r\n            value={{ isAuthenticated, userHasAuthenticated }}\r\n          >\r\n            <Switch>\r\n              <Route\r\n                exact\r\n                path=\"/OpenPriceCal\"\r\n                component={OpenPriceCalculator}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/price-calculator\"\r\n                component={PriceCalculator}\r\n              />\r\n\r\n              <Route exact path=\"/signup\" component={SignUp} />\r\n              <Route exact path=\"/login\" component={Login} />\r\n              <Route exact path=\"/resetPassword\" component={ResetPassword} />\r\n              <Redirect to=\"/signup\" />\r\n            </Switch>\r\n          </AppContext.Provider>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppContext.Provider value={{ isAuthenticated, userHasAuthenticated }}>\r\n        <Navigation />\r\n      </AppContext.Provider>\r\n\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        <AppContext.Provider value={{ isAuthenticated, userHasAuthenticated }}>\r\n          <Switch>\r\n            {/* Home page (DashBoard Content) */}\r\n            <Route exact path=\"/\" component={Home} />\r\n            {/* Order Form */}\r\n            <Route exact path=\"/orders\" component={Form} />\r\n\r\n            <Route exact path=\"/ordersRedir\" component={RedirForm} />\r\n            <Route exact path=\"/myorders\" component={MyOrders} />\r\n            <Route exact path=\"/orderSuccess\" component={Success} />\r\n\r\n            <Route\r\n              path=\"/orderSuccess/:id\"\r\n              render={(props) => {\r\n                return <Success {...props} />;\r\n              }}\r\n            />\r\n            <Route exact path=\"/orderFailure\" component={Failure} />\r\n            <Route exact path=\"/profile\" component={MyProfile} />\r\n            <Route exact path=\"/inventory-manager\" component={Inventory} />\r\n            <Route exact path=\"/help\" component={Help} />\r\n            <Route exact path=\"/userManager\" component={UserManager} />\r\n            <Route exact path=\"/adduser\" component={AddUser} />\r\n            <Route\r\n              exact\r\n              path=\"/modifyRoleAccesses\"\r\n              component={ModifyRoleAccesses}\r\n            />\r\n            <Route exact path=\"/kyc\" component={KYC} />\r\n            <Route exact path=\"/kycPanel\" component={KYCPanel} />\r\n            <Route exact path=\"/preference\" component={Preference} />\r\n            <Route exact path=\"/payment\" component={PaymentIndex} />\r\n            <Route path=\"/TaskManager\" component={TaskManager} />\r\n            <Route\r\n              path=\"/order/:id\"\r\n              render={(props) => {\r\n                return <OrderDetail {...props} />;\r\n              }}\r\n            />\r\n            <Route\r\n              path=\"/tracking/:id\"\r\n              render={(props) => {\r\n                return <Track {...props} />;\r\n              }}\r\n            />\r\n            <Route\r\n              path=\"/user/:id\"\r\n              render={(props) => {\r\n                return <ShowUser {...props} />;\r\n              }}\r\n            />\r\n            <Route\r\n              path=\"/editUser/:id\"\r\n              render={(props) => {\r\n                return <EditUser {...props} />;\r\n              }}\r\n            />\r\n            {/* Price Calculator */}\r\n            <Route exact path=\"/price-calculator\" component={PriceCalculator} />\r\n            <Route exact path=\"/OpenPriceCal\" component={OpenPriceCalculator} />\r\n            <Route exact path=\"/resetPassword\" component={ResetPassword} />\r\n            <Redirect to=\"/\" />\r\n          </Switch>\r\n        </AppContext.Provider>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    hasLogged: state.login.hasLogged,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setLogged: (Val) => dispatch(actions.setLoggedState(Val)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\reducers\\orderReducer.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\reducers\\loginReducer.js",["294"],"import * as actionTypes from '../actions/actionTypes';\r\nconst initialState={\r\n    name:'',\r\n    phone:'',\r\n    email:'',\r\n    address:'',\r\n    companyName:'',\r\n    hasLogged:false,\r\n}\r\n\r\nconst reducer=(state=initialState,action)=>{\r\n    switch(action.type)\r\n    {\r\n        case actionTypes.RESET_LOGGED_STATE:\r\n            return{\r\n                initialState\r\n            }\r\n        case actionTypes.SET_LOGGED_NAME:\r\n            return {\r\n                ...state,\r\n                name:action.name\r\n            }\r\n        case actionTypes.SET_LOGGED_EMAIL:\r\n            return{\r\n                ...state,\r\n                email:action.email\r\n            }\r\n        case actionTypes.SET_LOGGED_PHONE:\r\n            return{\r\n                ...state,\r\n                phone:action.phone\r\n            }\r\n        case actionTypes.SET_LOGGED_ADDRESS:\r\n            return{\r\n                ...state,\r\n                address:action.address\r\n            }\r\n        case actionTypes.SET_LOGGED_COMPANY_NAME:\r\n            return{\r\n                 ...state,\r\n                companyName:action.compName\r\n            }\r\n        case actionTypes.SET_LOGGED_STATE:\r\n            return{\r\n                ...state,\r\n                hasLogged:action.Value\r\n            }\r\n    }\r\n\r\n    return state;\r\n};\r\n\r\nexport default reducer;","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Auth\\SignUp\\signupform.js",["295","296"],"import React, { useState } from \"react\";\r\nimport { Input, FormControl } from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"./signupform.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Auth } from \"aws-amplify\";\r\nimport { useAppContext } from \"../../../libs/contextLibs\";\r\nimport Spinner from \"../../UI/Spinner\";\r\nconst SignUp = (props) => {\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [isDisable, setIsDisable] = useState(false);\r\n  const { userHasAuthenticated } = useAppContext();\r\n\r\n  const onFirstNameChangeController = (event) => {\r\n    setFirstName(event.target.value);\r\n  };\r\n  const onLastNameChangeController = (event) => {\r\n    setLastName(event.target.value);\r\n  };\r\n  const onEmailChangeController = (event) => {\r\n    setEmail(event.target.value);\r\n  };\r\n  const onPhoneChangeController = (event) => {\r\n    setPhone(event.target.value);\r\n  };\r\n  const onPasswordChangeController = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n  const onConfirmPasswordChangeController = (event) => {\r\n    setConfirmPassword(event.target.value);\r\n  };\r\n\r\n  async function onSubmitController() {\r\n    setIsDisable(true);\r\n    if (password !== confirmPassword) {\r\n      alert(\"Password and Confirm password not same!\");\r\n      return;\r\n    }\r\n    // alert(firstName+','+lastName+','+email+','+phone+','+password);\r\n    var username = email;\r\n    if (email === \"\") username = \"+91\" + phone;\r\n    //alert(username)\r\n    try {\r\n      await Auth.signUp({\r\n        username,\r\n        password,\r\n        attributes: {\r\n          name: `${firstName} ${lastName}`,\r\n        },\r\n      }).catch(\"error occured\");\r\n\r\n      try {\r\n        await Auth.signIn(username, password);\r\n        //alert(\"Logged in\");\r\n        userHasAuthenticated(true);\r\n        // props.setLogged(true)\r\n      } catch (e) {\r\n        alert(e.message);\r\n      }\r\n    } catch (error) {\r\n      if (error.code === \"UsernameExistsException\") {\r\n        alert(\"Username already exists\");\r\n      } else {\r\n        alert(\"Password must be of 8 characters\");\r\n      }\r\n    }\r\n    setIsDisable(false);\r\n  }\r\n\r\n  const facebookSignup = () => {\r\n    setIsDisable(true);\r\n    try {\r\n      Auth.federatedSignIn({ provider: \"Facebook\" });\r\n      // userHasAuthenticated(true)\r\n    } catch (e) {\r\n      alert(e);\r\n    }\r\n    setIsDisable(false);\r\n  };\r\n  if (isDisable === true) {\r\n    return (\r\n      <React.Fragment>\r\n        <header className=\"header\">\r\n          <nav className=\"navbar navbar-expand-lg navbar-light py-3\">\r\n            <div className=\"container\">\r\n              {/* <a href=\"#\" className=\"navbar-brand\">\r\n                    <img src=\"https://res.cloudinary.com/mhmd/image/upload/v1571398888/Group_1514_tjekh3_zkts1c.svg\" alt=\"logo\" width=\"150\" />\r\n                </a> */}\r\n              <a href=\"#\" className=\"navbar-brand\">\r\n                GoFlexe\r\n              </a>\r\n            </div>\r\n          </nav>\r\n        </header>\r\n\r\n        <div className=\"container\">\r\n          <div className=\"row mt-4 align-items-center\">\r\n            <div className=\"col-md-5 pr-lg-5 mb-5 mb-md-0\">\r\n              <img\r\n                src=\"https://res.cloudinary.com/mhmd/image/upload/v1569543678/form_d9sh6m.svg\"\r\n                alt=\"\"\r\n                className=\"img-fluid mb-3 d-none d-md-block\"\r\n              />\r\n              <h1>Authenticating...</h1>\r\n            </div>\r\n\r\n            <div className=\"col-md-7 col-lg-6 ml-auto\">\r\n              <Spinner />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <header className=\"header\">\r\n        <nav className=\"navbar navbar-expand-lg navbar-light py-3\">\r\n          <div className=\"container\">\r\n            {/* <a href=\"#\" className=\"navbar-brand\">\r\n                <img src=\"https://res.cloudinary.com/mhmd/image/upload/v1571398888/Group_1514_tjekh3_zkts1c.svg\" alt=\"logo\" width=\"150\" />\r\n            </a> */}\r\n          </div>\r\n        </nav>\r\n      </header>\r\n\r\n      <div className=\"container\">\r\n        <div className=\"row mt-4 align-items-center\">\r\n          <div className=\"col-md-5 pr-lg-5 mb-5 mb-md-0\">\r\n            <center style={{ marginBottom: 20, paddingRight: 30 }}>\r\n              <a href=\"https://partner.goflexe.com/#/signup\">\r\n                <Button\r\n                  style={{\r\n                    backgroundColor: \"orange\",\r\n                  }}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                >\r\n                  Serivce Provider Signup\r\n                </Button>\r\n              </a>\r\n            </center>\r\n            <img\r\n              src=\"https://res.cloudinary.com/mhmd/image/upload/v1569543678/form_d9sh6m.svg\"\r\n              alt=\"\"\r\n              className=\"img-fluid mb-3 d-none d-md-block\"\r\n            />\r\n            <h1>Create an Account</h1>\r\n          </div>\r\n\r\n          <div className=\"col-md-7 col-lg-6 ml-auto\">\r\n            <FormControl>\r\n              <div className=\"row\">\r\n                <div className=\"input-group col-lg-6 mb-4\">\r\n                  {/* <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text bg-white px-4 border-md border-right-0\">\r\n                                <i className=\"fa fa-user text-muted\"></i>\r\n                            </span>\r\n                        </div> */}\r\n                  <Input\r\n                    value={firstName}\r\n                    onChange={(event) => onFirstNameChangeController(event)}\r\n                    disableUnderline=\"true\"\r\n                    id=\"firstName\"\r\n                    type=\"text\"\r\n                    name=\"firstname\"\r\n                    placeholder=\"First Name\"\r\n                    className=\"form-control bg-white  border-md\"\r\n                  />\r\n                  {/* <input id=\"firstName\" type=\"text\" name=\"firstname\" placeholder=\"First Name\" className=\"form-control bg-white border-left-0 border-md\" /> */}\r\n                </div>\r\n\r\n                <div className=\"input-group col-lg-6 mb-4\">\r\n                  {/* <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text bg-white px-4 border-md border-right-0\">\r\n                                <i className=\"fa fa-user text-muted\"></i>\r\n                            </span>\r\n                        </div> */}\r\n                  <Input\r\n                    value={lastName}\r\n                    onChange={(event) => onLastNameChangeController(event)}\r\n                    disableUnderline=\"true\"\r\n                    id=\"lastName\"\r\n                    type=\"text\"\r\n                    name=\"lastname\"\r\n                    placeholder=\"Last Name\"\r\n                    className=\"form-control bg-white  border-md\"\r\n                  />\r\n                  {/* <input id=\"lastName\" type=\"text\" name=\"lastname\" placeholder=\"Last Name\" className=\"form-control bg-white border-left-0 border-md\" /> */}\r\n                </div>\r\n\r\n                <div className=\"input-group col-lg-6 mb-4\">\r\n                  <Input\r\n                    value={email}\r\n                    onChange={(event) => onEmailChangeController(event)}\r\n                    disableUnderline=\"true\"\r\n                    id=\"email\"\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"Email Address\"\r\n                    className=\"form-control bg-white  border-md\"\r\n                  />\r\n                  {/* <input id=\"email\" type=\"email\" name=\"email\" placeholder=\"Email Address\" className=\"form-control bg-white border-left-0 border-md\" /> */}\r\n                </div>\r\n\r\n                <div className=\"col-lg-1 \" style={{ marginTop: \"10px\" }}>\r\n                  OR\r\n                </div>\r\n\r\n                <div className=\"input-group col-lg-5 mb-4\">\r\n                  {/* <select id=\"countryCode\" name=\"countryCode\" style={{maxWidth: '80px'}} className=\"custom-select form-control bg-white  border-md h-100 font-weight-bold text-muted\">\r\n                            <option value=\"\">+91</option>\r\n                            \r\n                        </select> */}\r\n                  <Input\r\n                    value={phone}\r\n                    onChange={(event) => onPhoneChangeController(event)}\r\n                    disableUnderline=\"true\"\r\n                    id=\"phoneNumber\"\r\n                    type=\"tel\"\r\n                    name=\"phone\"\r\n                    placeholder=\"Phone Number\"\r\n                    className=\"form-control bg-white border-md pl-3\"\r\n                  />\r\n                  {/* <input id=\"phoneNumber\" type=\"tel\" name=\"phone\" placeholder=\"Phone Number\" className=\"form-control bg-white border-md border-left-0 pl-3\" /> */}\r\n                </div>\r\n\r\n                {/* <div className=\"input-group col-lg-12 mb-4\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text bg-white px-4 border-md border-right-0\">\r\n                                <i className=\"fa fa-black-tie text-muted\"></i>\r\n                            </span>\r\n                        </div>\r\n                       \r\n                    </div> */}\r\n\r\n                <div className=\"input-group col-lg-12 mb-4\">\r\n                  <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text bg-white px-4 border-md border-right-0\">\r\n                      <i className=\"fa fa-lock text-muted\"></i>\r\n                    </span>\r\n                  </div>\r\n                  <Input\r\n                    value={password}\r\n                    onChange={(event) => onPasswordChangeController(event)}\r\n                    disableUnderline=\"true\"\r\n                    id=\"password\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    className=\"form-control bg-white border-left-0 border-md\"\r\n                  />\r\n                  {/* <input id=\"password\" type=\"password\" name=\"password\" placeholder=\"Password\" className=\"form-control bg-white border-left-0 border-md\" /> */}\r\n                </div>\r\n\r\n                <div className=\"input-group col-lg-12 mb-4\">\r\n                  <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text bg-white px-4 border-md border-right-0\">\r\n                      <i className=\"fa fa-lock text-muted\"></i>\r\n                    </span>\r\n                  </div>\r\n                  <Input\r\n                    value={confirmPassword}\r\n                    onChange={(event) =>\r\n                      onConfirmPasswordChangeController(event)\r\n                    }\r\n                    disableUnderline=\"true\"\r\n                    id=\"passwordConfirmation\"\r\n                    type=\"password\"\r\n                    name=\"passwordConfirmation\"\r\n                    placeholder=\"Confirm Password\"\r\n                    className=\"form-control bg-white border-left-0 border-md\"\r\n                  />\r\n                  {/* <input id=\"passwordConfirmation\" type=\"password\" name=\"passwordConfirmation\" placeholder=\"Confirm Password\" className=\"form-control bg-white border-left-0 border-md\" /> */}\r\n                </div>\r\n\r\n                <div className=\"form-group col-lg-12 mx-auto mb-0\">\r\n                  <Button\r\n                    disabled={isDisable}\r\n                    onClick={onSubmitController}\r\n                    fullWidth=\"true\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                  >\r\n                    Create your account\r\n                  </Button>\r\n                  {/* <a href=\"#\" className=\"btn btn-primary btn-block py-2\">\r\n                            <span className=\"font-weight-bold\">Create your account</span>\r\n                        </a> */}\r\n                </div>\r\n\r\n                <div className=\"form-group col-lg-12 mx-auto d-flex align-items-center my-4\">\r\n                  <div className=\"border-bottom w-100 ml-5\"></div>\r\n                  <span className=\"px-2 small text-muted font-weight-bold text-muted\">\r\n                    OR\r\n                  </span>\r\n                  <div className=\"border-bottom w-100 mr-5\"></div>\r\n                </div>\r\n\r\n                <div className=\"form-group col-lg-12 mx-auto\">\r\n                  <Button\r\n                    onClick={facebookSignup}\r\n                    className=\"btn btn-primary btn-block py-2 btn-facebook\"\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                  >\r\n                    Continue with Facebook\r\n                  </Button>\r\n                  {/* <a href=\"#\" className=\"btn btn-primary btn-block py-2 btn-facebook\">\r\n                            <i className=\"fa fa-facebook-f mr-2\"></i>\r\n                            <span className=\"font-weight-bold\">Continue with Facebook</span>\r\n                        </a> */}\r\n                  <a\r\n                    href=\"#\"\r\n                    className=\"btn btn-primary btn-block py-2 btn-twitter\"\r\n                  >\r\n                    <i className=\"fa fa-twitter mr-2\"></i>\r\n                    <span className=\"font-weight-bold\">\r\n                      Continue with Twitter\r\n                    </span>\r\n                  </a>\r\n                </div>\r\n\r\n                <div className=\"text-center w-100\">\r\n                  <p className=\"text-muted font-weight-bold\">\r\n                    Already Registered?\r\n                    {/* <a href=\"#\" className=\"text-primary ml-2\">Login</a> */}\r\n                    <Link to=\"/login\"> Login</Link>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </FormControl>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Home.js",["297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312"],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderStatus\\orderSuccess.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\Checkout.js",["313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344"],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderStatus\\orderFailure.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Help\\Help.js",["345","346","347","348","349","350","351","352","353","354","355","356","357"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Button,\r\n  Select as MaterialSelect,\r\n  Switch,\r\n  Card,\r\n  Container,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n  title: {\r\n    fontSize: 20,\r\n    height: 50,\r\n    padding: 10,\r\n    paddingLeft: 55,\r\n    borderBottomStyle: \"solid\",\r\n    borderWidth: \"1px\",\r\n  },\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n  formControl: {\r\n    marginTop: \"1%\",\r\n    width: \"50%\",\r\n  },\r\n});\r\n\r\nconst help = (props) => {\r\n  return (\r\n    <div>\r\n      <div style={{ paddingBottom: 30 }}>\r\n        <h3\r\n          fullWidth\r\n          styles={{\r\n            fontSize: 20,\r\n            height: 50,\r\n            padding: 10,\r\n            paddingBottom: 50,\r\n            paddingLeft: 55,\r\n            borderBottomStyle: \"solid\",\r\n            borderWidth: \"1px\",\r\n          }}\r\n          gutterBottom\r\n        >\r\n          Help Videos\r\n        </h3>\r\n      </div>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} sm={5} style={{ paddingLeft: 30 }}>\r\n          <div>\r\n            <iframe\r\n              title=\"Website Walkthrough\"\r\n              width=\"400\"\r\n              height=\"200\"\r\n              src=\"https://www.youtube.com/embed/GoAzStiokY8\"\r\n              frameborder=\"0\"\r\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n              allowfullscreen\r\n            ></iframe>\r\n          </div>\r\n          <div>\r\n            <center>\r\n              <h5>Website Walkthrough</h5>\r\n            </center>\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={12} sm={1}></Grid>\r\n\r\n        <Grid item xs={12} sm={5}>\r\n          <iframe\r\n            title=\"One time KYC and Inventory Setup\"\r\n            width=\"400\"\r\n            height=\"200\"\r\n            src=\"https://www.youtube.com/embed/Ngk1ai2zWdc\"\r\n            frameborder=\"0\"\r\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n            allowfullscreen\r\n          ></iframe>\r\n          <div>\r\n            <center>\r\n              <h5>KYC and Inventory Setup</h5>\r\n            </center>\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default help;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\MyOrders\\MyOrders.js",["358","359","360","361"],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderDetail.js",["362"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport OrderDetails from \"./OrderDetails/OrderDetails\";\r\nimport CompleteDetails from \"./OrderDetails/CompleteDetails\";\r\nimport PaymentIndex from \"./Payments/PaymentIndex\";\r\nimport Track from \"./Track/Track\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nfunction Details(props, id) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n  console.log(props);\r\n  //console.log('addresss'+props.fromAddress);\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar style={{ background: \"#fff\", color: \"black\" }} position=\"static\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          aria-label=\"simple tabs example\"\r\n        >\r\n          <Tab label=\"Product Details\" {...a11yProps(0)} />\r\n          <Tab label=\"Payment details\" {...a11yProps(1)} />\r\n          <Tab label=\"Tracking Details\" {...a11yProps(2)} />\r\n          <Tab label=\"Complete Details\" {...a11yProps(3)} />\r\n          <Tab label=\"Audit\" {...a11yProps(4)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0}>\r\n        <OrderDetails value={props} />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <PaymentIndex orderId={id} />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n        <Track orderId={id} />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={3}>\r\n        <CompleteDetails orderId={id} />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={4}>\r\n        Audit\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Home = (props) => {\r\n  // const [id,setId] = useState(0);\r\n  const [allDetails, setAllDetails] = useState(null);\r\n  const [paramsId, setParamsId] = useState();\r\n  useEffect(() => {\r\n    const {\r\n      match: { params },\r\n    } = props;\r\n    console.log(params.id);\r\n    setParamsId(params.id);\r\n\r\n    // setId(params.id);\r\n    const url =\r\n      \"https://t2v0d33au7.execute-api.ap-south-1.amazonaws.com/Staging01/customerorder/\" +\r\n      params.id;\r\n    //console.log(url);\r\n    axios\r\n      .get(url)\r\n      .then((resp) => {\r\n        console.log(resp.data.Item);\r\n        setAllDetails(resp.data.Item);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  return <div>{Details(allDetails, paramsId)}</div>;\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Profile\\MyProfile.js",["363"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../store/actions/index'\r\nimport { useAppContext } from '../../libs/contextLibs'\r\nimport {\r\n    TextField,\r\n    Button\r\n  } from '@material-ui/core';\r\n  import { Auth } from 'aws-amplify';\r\n\r\n\r\n  \r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: '33.33%',\r\n    flexShrink: 0,\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  textfield:{\r\n      width:'60%',\r\n  }\r\n}));\r\n\r\n const ControlledAccordions= (props) => {\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = React.useState(false);\r\n  const { userHasAuthenticated } = useAppContext();\r\n  const [details,setDetails] = useState({\r\n      name:'',\r\n      email:'',\r\n      contactNo:'',\r\n      address:''\r\n  });\r\n  const [tempName,setTempName] = useState('');\r\n  const [tempEmail,setTempEmail] = useState('');\r\n  const [tempContactNo,setTempContactNo] = useState('');\r\n  const [tempAddress,setTempAddress] = useState('');\r\n  const [valChanged,setValChanged] = useState(false);\r\n  useEffect( ()=>{\r\n    Auth.currentUserInfo()\r\n     .then((user) => {\r\n       if(user===null || user===undefined)\r\n       return\r\n       console.log(user)\r\n       var tempEmail = user.attributes.email === undefined ? details.email : user.attributes.email\r\n       var tempPhone =  user.attributes.phone_number === undefined ? details.contactNo : user.attributes.phone_number\r\n       var tempName =  user.attributes.name === undefined ? details.name : user.attributes.name\r\n       setDetails({...details,email:tempEmail,contactNo:tempPhone,name:tempName})\r\n       \r\n      \r\n     })\r\n     .catch()\r\n },[])\r\n  async function signOut() {\r\n    try {\r\n        await Auth.signOut({ global: true });\r\n        userHasAuthenticated(false)\r\n        \r\n        \r\n    } catch (error) {\r\n        console.log('error signing out: ', error);\r\n    }\r\n}\r\n  \r\n  const handleChange = (panel) => (event, isExpanded) => {\r\n    setExpanded(isExpanded ? panel : false);\r\n  };\r\n  const onNameSubmitController=()=>{\r\n      if(tempName!==''){\r\n        setDetails({...details,name:tempName});\r\n        setValChanged(true);\r\n      }\r\n    setExpanded(false)\r\n  }\r\n  const onNameChangeController=(event)=>{\r\n    var nameOfCustomer=event.target.value;\r\n    setTempName(nameOfCustomer);\r\n  }\r\n  const onEmailSubmitController=()=>{\r\n    setDetails({...details,email:tempEmail});\r\n    setExpanded(false)\r\n    setValChanged(true);\r\n  }\r\n  const onEmailChangeController=(event)=>{\r\n    var emailOfCustomer=event.target.value;\r\n    setTempEmail(emailOfCustomer);\r\n  }\r\n  const onContactNoSubmitController=()=>{\r\n    setDetails({...details,contactNo:tempContactNo});\r\n    setExpanded(false)\r\n    setValChanged(true);\r\n  }\r\n  const onContactNoChangeController=(event)=>{\r\n    var contactNoOfCustomer=event.target.value;\r\n    setTempContactNo(contactNoOfCustomer);\r\n  }\r\n  const onAddressSubmitController=()=>{\r\n    setDetails({...details,address:tempAddress});\r\n    setExpanded(false)\r\n    setValChanged(true);\r\n  }\r\n  const onAddressChangeController=(event)=>{\r\n    var addressOfCustomer=event.target.value;\r\n    setTempAddress(addressOfCustomer);\r\n  }\r\n  \r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Accordion expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\r\n        <AccordionSummary\r\n          expandIcon={<EditIcon />}\r\n          aria-controls=\"panel1bh-content\"\r\n          id=\"panel1bh-header\"\r\n        >\r\n          <Typography className={classes.heading}>Name</Typography>\r\n          <Typography className={classes.secondaryHeading}>{details.name}</Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n        \r\n                    <TextField\r\n                    className={classes.textfield}\r\n                    xs={12} sm={6}\r\n                    value={props.name}\r\n                    autoComplete=\"given-name\"\r\n                    onChange={(event)=>onNameChangeController(event)}\r\n                    />\r\n                    <Button onClick={onNameSubmitController} color=\"secondary\">Change</Button>\r\n       \r\n        </AccordionDetails>\r\n      </Accordion>\r\n      <Accordion expanded={expanded === 'panel2'} onChange={handleChange('panel2')}>\r\n        <AccordionSummary\r\n          expandIcon={<EditIcon />}\r\n          aria-controls=\"panel2bh-content\"\r\n          id=\"panel2bh-header\"\r\n        >\r\n          <Typography className={classes.heading}>Email</Typography>\r\n          <Typography className={classes.secondaryHeading}>\r\n            {details.email}\r\n          </Typography>\r\n        </AccordionSummary>\r\n            <AccordionDetails>\r\n            <TextField\r\n            className={classes.textfield}\r\n            xs={12} sm={6}\r\n            value={props.name}\r\n            autoComplete=\"given-name\"\r\n            onChange={(event)=>onEmailChangeController(event)}\r\n            />\r\n            <Button onClick={onEmailSubmitController} color=\"secondary\">Change</Button>\r\n            </AccordionDetails>\r\n      </Accordion>\r\n      <Accordion expanded={expanded === 'panel3'} onChange={handleChange('panel3')}>\r\n        <AccordionSummary\r\n          expandIcon={<EditIcon />}\r\n          aria-controls=\"panel3bh-content\"\r\n          id=\"panel3bh-header\"\r\n        >\r\n          <Typography className={classes.heading}>Contact No</Typography>\r\n          <Typography className={classes.secondaryHeading}>\r\n            {details.contactNo}\r\n          </Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n            <TextField\r\n            className={classes.textfield}\r\n            xs={12} sm={6}\r\n            value={props.name}\r\n            autoComplete=\"given-name\"\r\n            onChange={(event)=>onContactNoChangeController(event)}\r\n            />\r\n            <Button onClick={onContactNoSubmitController} color=\"secondary\">Change</Button>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n      <Accordion expanded={expanded === 'panel4'} onChange={handleChange('panel4')}>\r\n        <AccordionSummary\r\n          expandIcon={<EditIcon />}\r\n          aria-controls=\"panel4bh-content\"\r\n          id=\"panel4bh-header\"\r\n        >\r\n          <Typography className={classes.heading}>Address</Typography>\r\n          <Typography className={classes.secondaryHeading}>\r\n            {details.address}\r\n          </Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n            <TextField\r\n            className={classes.textfield}\r\n            xs={12} sm={6}\r\n            value={props.name}\r\n            autoComplete=\"given-name\"\r\n            onChange={(event)=>onAddressChangeController(event)}\r\n            />\r\n            <Button onClick={onAddressSubmitController} color=\"secondary\">Change</Button>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n      {valChanged && \r\n        <Button\r\n         style={{float:'right',marginTop:'10px'}} color='secondary'\r\n         variant='contained'\r\n         >\r\n             Change my Details\r\n        </Button>\r\n      }\r\n      <Button\r\n      onClick={signOut}\r\n         style={{marginTop:'10px'}} color='default'\r\n         variant='contained'\r\n         >\r\n             Logout\r\n        </Button>\r\n        <Button\r\n         style={{marginTop:'10px',marginLeft:'10px',backgroundColor:'#FF8C00'}} \r\n         variant='contained'\r\n         >\r\n             Change Password\r\n        </Button>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps=state=>{\r\n  return{\r\n      hasLogged:state.login.hasLogged\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps=dispatch=>{\r\n  return {\r\n      setLogged:(Val)=>dispatch(actions.setLoggedState(Val)),\r\n  };\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ControlledAccordions);","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\AddUser.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Navigation.js",["364"],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Inventory\\Inventory.js",["365","366","367","368","369"],"import Typography from \"@material-ui/core/Typography\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { Button, Divider } from \"@material-ui/core\";\r\nimport AddProductForm from \"./AddProductForm\";\r\nimport ShowProducts from \"./ShowProducts\";\r\nimport \"../../Globalcss/globalcss.css\";\r\nconst useStyles = makeStyles({\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n  formControl: {\r\n    marginTop: \"1%\",\r\n  },\r\n  container: {\r\n    justifyContent: \"space-between\",\r\n    flexDirection: \"column\",\r\n    display: \"flex\",\r\n  },\r\n  btnHolder: {\r\n    justifyContent: \"flex-end\",\r\n    display: \"flex\",\r\n    marginRight: \"30px\",\r\n    marginBottom: \"30px\",\r\n  },\r\n});\r\n\r\nconst InventoryManager = (props) => {\r\n  const classes = useStyles();\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [editForm, setEditForm] = useState(false);\r\n  const toggleForm = () => {\r\n    setShowForm(!showForm);\r\n  };\r\n  const editButtonClicked = () => {\r\n    setEditForm(!editForm);\r\n    // alert(rows[checkedBoxes[0]].productId)\r\n  };\r\n  return (\r\n    <div>\r\n      <div style={{ overflow: \"hidden\" }}>\r\n        {!editForm && (\r\n          <Button\r\n            onClick={toggleForm}\r\n            className=\"row AllButtons\"\r\n            variant=\"contained\"\r\n            style={{ marginBottom: \"10px\", float: \"right\" }}\r\n          >\r\n            {showForm === true ? \"My Products\" : \"Add new Product\"}\r\n          </Button>\r\n        )}\r\n      </div>\r\n\r\n      {!showForm && !editForm && (\r\n        <Typography fullWidth className=\"TypographyTitle\" gutterBottom>\r\n          Your Added Products\r\n        </Typography>\r\n      )}\r\n      <div style={{ marginTop: \"30px\" }}></div>\r\n      {showForm && <AddProductForm toggleForm={toggleForm} />}\r\n\r\n      {!showForm && <ShowProducts editButtonClicked={editButtonClicked} />}\r\n      <div style={{ marginTop: \"60px\" }}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InventoryManager;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\userManager.js",["370","371"],"import React, { useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport {Link} from 'react-router-dom'\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport \"../../Globalcss/globalcss.css\"\r\nimport {\r\n    Button,\r\n    Divider\r\n  } from '@material-ui/core'\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        // minWidth: 275,\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n        height: 50,\r\n        padding: 10,\r\n        paddingLeft: 55,\r\n        color: 'white'\r\n    },\r\n    formHeadings: {\r\n        margin: 20,\r\n        marginBottom: 0\r\n    },\r\n    formControl: {\r\n        marginTop:'1%'\r\n    },\r\n    container :{\r\n        justifyContent: 'space-between',\r\n        flexDirection: 'column',\r\n        display: 'flex'\r\n    },\r\n    btnHolder: {\r\n        justifyContent: 'flex-end',\r\n        display: 'flex',\r\n        marginRight:'30px',\r\n        marginBottom:'30px'\r\n      }\r\n});\r\n\r\nconst UserManager = (props) => {\r\n    const [users,setUsers] = useState([\r\n        {\r\n            name:'person1',\r\n            email: 'person1@gmail',\r\n            phone: '99991',\r\n            designation:'Admin',\r\n            department:'dept1',\r\n            role:'role1',\r\n            accesses:['read','edit','write'],\r\n            addedDate:'21-12-20'\r\n        },\r\n        {\r\n            name:'person2',\r\n            email: 'person2@gmail',\r\n            phone: '99992',\r\n            designation:'Executive',\r\n            department:'dept2',\r\n            role:'role2',\r\n            accesses:['read','edit'],\r\n            addedDate:'22-12-20'\r\n        },\r\n        {\r\n            name:'person3',\r\n            email: 'person3@gmail',\r\n            phone: '99993',\r\n            designation:'Auditor',\r\n            department:'dept3',\r\n            role:'role3',\r\n            accesses:['read','edit','write'],\r\n            addedDate:'23-12-20'\r\n        },\r\n        {\r\n            name:'person4',\r\n            email: 'person4@gmail',\r\n            phone: '99994',\r\n            designation:'Manager',\r\n            department:'dept4',\r\n            role:'role4',\r\n            accesses:['read','edit','write'],\r\n            addedDate:'23-12-20'\r\n        },\r\n    ]);\r\n    \r\n    const eachUser = (user,idx) => {\r\n        return(\r\n            <div className=\"row\" style={{marginTop:'15px', fontSize:'19px'}}>\r\n                <div className=\"col col-xs-6 col-sm-3\">\r\n                    {user.name}\r\n                </div>\r\n                <div className=\"col col-xs-6 col-sm-3\">\r\n                    {user.email}\r\n                </div>\r\n                <div className=\"col col-xs-6 col-sm-2\">\r\n                    {user.role}\r\n                </div>\r\n                <div className=\"col col-xs-6 col-sm-2\">\r\n                <Link\r\n                    to={`editUser/${user.userId}`}\r\n                ><EditIcon />Edit</Link>\r\n                </div>\r\n                <div className=\"col col-xs-6 col-sm-2\">\r\n                <Link><DeleteIcon />Delete</Link>\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n     \r\n    return (\r\n        <div>\r\n            <Button \r\n             component={Link}\r\n             to='/addUser'\r\n            className=\"row AllButtons\"\r\n                variant='contained' style={{ marginBottom:'10px'}}\r\n            >Add New User</Button>\r\n            <Button \r\n             component={Link}\r\n             to='/modifyRoleAccesses'\r\n            className=\"row AllButtons\"\r\n                variant='contained' style={{ marginBottom:'10px',float:'right'}}\r\n            >Modify Role Accesses</Button>\r\n            <Divider />\r\n             <div style={{marginTop:'30px'}}></div>\r\n            {users.map((user,idx) => eachUser(user,idx))}\r\n            <div style={{marginTop:'60px'}}></div>\r\n        </div>\r\n       \r\n    )\r\n}\r\n\r\n\r\nexport default UserManager;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\libs\\contextLibs.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\EditUser.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UI\\Spinner.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\ModifyRoleAccess.js",["372"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport { Breadcrumbs,Card,CardContent, Divider,Button } from '@material-ui/core';\r\nimport {Link} from 'react-router-dom';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n       minWidth: 275,\r\n    },\r\n    // title: {\r\n    //   fontSize: 20,\r\n    //   height: 50,\r\n    //   padding: 10,\r\n    //   paddingLeft: 55,\r\n    //   color: 'white'\r\n    // },\r\n    formHeadings: {\r\n      margin: 20,\r\n      marginBottom: 0\r\n    }\r\n  });\r\n\r\nexport default function CheckboxLabels() {\r\n    const classes = useStyles()\r\n  const [state, setState] = React.useState({\r\n    \r\n  });\r\n\r\n  const handleChange = (event) => {\r\n      \r\n    setState({ ...state, [event.target.name]: event.target.checked });\r\n  };\r\n\r\n    const submitClicked = () => {\r\n        alert(JSON.stringify(state))\r\n    }\r\n  const roles = [\r\n      'Admin',\r\n      'Executive',\r\n      'Finance'\r\n  ]\r\n  const features = [\r\n      'Create Orders',\r\n      'Manage Users'\r\n  ]\r\n  const eachFeature = (role,feature) => {\r\n      var stateName = '';\r\n      if(role==='Admin'){\r\n          stateName+='admin'\r\n      }\r\n      else if(role==='Executive'){\r\n          stateName+='executive'\r\n      }\r\n      else{\r\n          stateName+='finance'\r\n      }\r\n      \r\n      if(feature=='Create Orders'){\r\n          stateName+='Create'\r\n      }\r\n      else{\r\n          stateName+='Manage'\r\n      }\r\n      console.log(stateName)\r\n      return(\r\n                 <div className=\"row\" >\r\n                        <div className=\"col col-xs-6 col-3\" ></div>\r\n                            <div className=\"col col-xs-6 col-3\" ><h4>{feature}</h4></div>\r\n                            <div className=\"col col-2\">\r\n                                 <FormControlLabel\r\n                                control={\r\n                                <Checkbox\r\n                                    checked={state[`${stateName}Read`]}\r\n                                    onChange={(event)=>handleChange(event)}\r\n                                    name={`${stateName}Read`}\r\n                                    color=\"primary\"\r\n                                />\r\n                                }\r\n                                label=\"Read\"\r\n                            />\r\n                            </div>\r\n                            <div className=\"col col-2\">\r\n                                 <FormControlLabel\r\n                                control={\r\n                                <Checkbox\r\n                                    checked={state[`${stateName}Edit`]}\r\n                                    onChange={(event) => handleChange(event)}\r\n                                    name={`${stateName}Edit`}\r\n                                    color=\"primary\"\r\n                                />\r\n                                }\r\n                                label=\"Edit\"\r\n                            />\r\n                            </div>\r\n                            <div className=\"col col-1\">\r\n                                 <FormControlLabel\r\n                                control={\r\n                                <Checkbox\r\n                                    checked={state[`${stateName}Delete`]}\r\n                                    onChange={(event) => handleChange(event)}\r\n                                    name={`${stateName}Delete`}\r\n                                    color=\"primary\"\r\n                                />\r\n                                }\r\n                                label=\"Delete\"\r\n                            />\r\n                            </div>\r\n                        </div>\r\n      )\r\n  }\r\n  const eachRole = (role) => {\r\n    return (\r\n        <>\r\n        <Divider />\r\n            <div className=\"row\">\r\n                <div className=\"col col-xs-6 col-3\" style={{marginLeft:'10px',marginBottom:'10px',marginTop:'10px'}}><h3><u>{role}</u></h3></div>\r\n            </div>\r\n            {features.map((feature) => eachFeature(role,feature))}\r\n            \r\n        </>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n    <Breadcrumbs style={{marginBottom:'10px'}} aria-label=\"breadcrumb\">\r\n        <Link color=\"inherit\" to='/userManager'>\r\n            User-Manager\r\n        </Link>\r\n            <Typography color=\"textPrimary\">Modify Role Accesses</Typography>\r\n    </Breadcrumbs>\r\n    <Card className={classes.root}>\r\n                    <CardContent style={{ padding: 0 }}>\r\n                        <Typography className=\"TypographyTitle\" gutterBottom >\r\n                            Modify Role Accesses\r\n                        </Typography>\r\n                        <div className=\"row\">\r\n                            <div className=\"col col-xs-6 col-sm-3\" style={{marginLeft:'10px'}} >\r\n                              <h2>Role</h2>\r\n                            </div>\r\n                            <div className=\"col col-xs-6 col-sm-3\">\r\n                              <h2>Feature</h2>\r\n                            </div>\r\n                            <div className=\"col \" style={{alignItems:'center',alignContent:'center',textAlign:'center'}}>\r\n                              <h2>Accesses</h2>\r\n                            </div>\r\n                        </div>\r\n                        <Divider />\r\n                        <Divider />\r\n                        <Divider />\r\n                         {roles.map((role)=>eachRole(role))}\r\n                        <div style={{overflow:'hidden'}}>\r\n                            <Button variant='contained' style={{float:'right',backgroundColor:'#f9a825',marginBottom:'20px',marginRight:'20px'}} onClick={submitClicked}>Submit</Button>\r\n                        </div>\r\n                    </CardContent>\r\n    </Card>\r\n</>\r\n  );\r\n}\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\ShowUser.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Preference\\PreferencePage.js",["373","374","375","376","377"],"import Typography from \"@material-ui/core/Typography\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { Button, Divider } from \"@material-ui/core\";\r\nimport AddAddressForm from \"./AddAddressForm\";\r\nimport ShowProducts from \"./ShowAddresses\";\r\nimport \"../../Globalcss/globalcss.css\";\r\nconst useStyles = makeStyles({\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n  formControl: {\r\n    marginTop: \"1%\",\r\n  },\r\n  container: {\r\n    justifyContent: \"space-between\",\r\n    flexDirection: \"column\",\r\n    display: \"flex\",\r\n  },\r\n  btnHolder: {\r\n    justifyContent: \"flex-end\",\r\n    display: \"flex\",\r\n    marginRight: \"30px\",\r\n    marginBottom: \"30px\",\r\n  },\r\n});\r\n\r\nconst PreferencePage = (props) => {\r\n  const classes = useStyles();\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [editForm, setEditForm] = useState(false);\r\n  const toggleForm = () => {\r\n    setShowForm(!showForm);\r\n  };\r\n  const editButtonClicked = () => {\r\n    setEditForm(!editForm);\r\n    // alert(rows[checkedBoxes[0]].productId)\r\n  };\r\n  return (\r\n    <div>\r\n      <div style={{ overflow: \"hidden\" }}>\r\n        {!editForm && (\r\n          <Button\r\n            onClick={toggleForm}\r\n            className=\"row AllButtons\"\r\n            variant=\"contained\"\r\n            style={{ marginBottom: \"10px\", float: \"right\" }}\r\n          >\r\n            {showForm === true ? \"My Addresses\" : \"Add new Address\"}\r\n          </Button>\r\n        )}\r\n      </div>\r\n\r\n      {!showForm && !editForm && (\r\n        <Typography fullWidth className=\"TypographyTitle\" gutterBottom>\r\n          Your Added Addresses\r\n        </Typography>\r\n      )}\r\n      <div style={{ marginTop: \"30px\" }}></div>\r\n      {showForm && <AddAddressForm toggleForm={toggleForm} />}\r\n\r\n      {!showForm && <ShowProducts editButtonClicked={editButtonClicked} />}\r\n      <div style={{ marginTop: \"60px\" }}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PreferencePage;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\actions\\actionTypes.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\ForwardedCheckout.js",["378","379","380","381","382"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { API, Auth } from \"aws-amplify\";\r\nimport { Card, Button } from \"@material-ui/core\";\r\nimport LocationDetails from \"./LocationDetails\";\r\nimport OrderSummary from \"./OrderSummary\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport Spinner from \"../UI/Spinner\";\r\n// /combinedView?orderId=\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // minWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    height: 50,\r\n    padding: 10,\r\n    paddingLeft: 55,\r\n    color: \"white\",\r\n  },\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 900,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  formControl: {\r\n    marginTop: \"1%\",\r\n  },\r\n}));\r\n\r\nfunction ForwardedCheckout(props) {\r\n  const classes = useStyles();\r\n  //Handle Page Change\r\n  const [activeStep, setactiveStep] = useState(0);\r\n  const [success, setSuccess] = useState(false);\r\n  const [failure, setFailure] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [estimatedPrice, setEstimatedPrice] = useState(0);\r\n  const [OrderId, setOrderId] = useState(0);\r\n\r\n  function getStepContent(step) {\r\n    switch (step) {\r\n      case 0:\r\n        return <LocationDetails />;\r\n      // case 1:\r\n      //      return <ProductDetails/>\r\n      // case 2:\r\n      //      return <CustomerDetails/>\r\n      case 1:\r\n        return <OrderSummary setEstimatedPrice={setEstimatedPrice} />;\r\n      default:\r\n        throw new Error(\"Unknown step\");\r\n    }\r\n  }\r\n  const pinValidator = (pin) => {\r\n    var greater = 999999,\r\n      smaller = 100000;\r\n    if (pin >= smaller && pin <= greater) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const dateValidator = (dates) => {\r\n    var today = new Date();\r\n    var dd = String(today.getDate()).padStart(2, \"0\");\r\n    dd = parseInt(dd, 10);\r\n    var mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\r\n    mm = parseInt(mm, 10);\r\n    var yyyy = today.getFullYear();\r\n    yyyy = parseInt(yyyy, 10);\r\n    //console.log(pickupDate)\r\n    var year = parseInt(dates.substring(0, 4), 10);\r\n    var month = parseInt(dates.substring(5, 7), 10);\r\n    var date = parseInt(dates.substring(8, 10), 10);\r\n    //console.log(year+''+month+''+date)\r\n    var invalid = 0;\r\n    if (year < yyyy || year > 9999) {\r\n      invalid = 1;\r\n    }\r\n    if (year === yyyy) {\r\n      if (month < mm) {\r\n        invalid = 1;\r\n      } else {\r\n        if (month === mm) {\r\n          if (date < dd) {\r\n            invalid = 1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (invalid === 1) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n  const emptyStringValidator = (string) => {\r\n    if (string === \"\" || string == null) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const handleNextClick = () => {\r\n    if (emptyStringValidator(props.pickupPin) === false) {\r\n      alert(\"Pickup Zip cannot be empty\");\r\n\r\n      return;\r\n    }\r\n    if (emptyStringValidator(props.destinationPin) === false) {\r\n      alert(\"Destination Zip cannot be empty\");\r\n\r\n      return;\r\n    }\r\n    if (emptyStringValidator(props.pickupAddress) === false) {\r\n      alert(\"Pickup Address cannot be empty\");\r\n\r\n      return;\r\n    }\r\n    if (emptyStringValidator(props.destinationAddress) === false) {\r\n      alert(\"Destination Address cannot be empty\");\r\n\r\n      return;\r\n    }\r\n\r\n    if (pinValidator(props.pickupPin) === false) {\r\n      alert(\"Please Enter Correct Pickup Pincode\");\r\n\r\n      return;\r\n    }\r\n    if (pinValidator(props.destinationPin) === false) {\r\n      alert(\"Please Enter Correct Destination Pincode\");\r\n\r\n      return;\r\n    }\r\n    if (dateValidator(props.pickupDate) === false) {\r\n      alert(\"Incorrect Pickup date\");\r\n\r\n      return;\r\n    }\r\n    if (dateValidator(props.deliveryDate) === false) {\r\n      alert(\"Incorrect Delivery date\");\r\n\r\n      return;\r\n    }\r\n    setactiveStep(activeStep + 1);\r\n  };\r\n  const handleBackClick = () => {\r\n    setactiveStep(activeStep - 1);\r\n  };\r\n\r\n  const handlePlaceOrderClick = async () => {\r\n    setLoading(true);\r\n    var currentUser = await Auth.currentUserInfo();\r\n    var owner = currentUser.username;\r\n    var data;\r\n\r\n    //console.log(props.chosenProducts)\r\n    //var newProductIds;\r\n    /**Place New products in Inventory */\r\n    var item = props.chosenProducts.slice();\r\n    for (var i = 0; i < item.length; i++) {\r\n      if (item[i].isNew === true) {\r\n\r\n         if(item[i].value.measurable == true){\r\n        data = {\r\n          owner: owner,\r\n          productName: item[i].value.productName,\r\n          productType:\r\n            item[i].value.productType.value || item[i].value.productType,\r\n          unit:\r\n            item[i].value.measurable == true\r\n              ? item[i].value.unit.value || item[i].value.unit\r\n              : \"\",\r\n          height: item[i].value.height,\r\n          width: item[i].value.width,\r\n          length: item[i].value.length,\r\n          weightPerUnit: item[i].value.weightPerUnit,\r\n          location: \"-\",\r\n          categories: item[i].value.categories,\r\n          measurable: item[i].value.measurable,\r\n          density: item[i].value.density,\r\n          pincode: \"-\",\r\n        };\r\n\r\n        const payload = {\r\n          body: data,\r\n        };\r\n        API.post(\"GoFlexeOrderPlacement\", `/inventory`, payload).catch(\r\n          (error) => {\r\n            console.log(error);\r\n          }\r\n        );}\r\n      } else {\r\n\r\n        if(item[i].value.measurable == true){\r\n        data = {\r\n          owner: owner,\r\n          productId: item[i].productId,\r\n          productName: item[i].value.productName,\r\n          productType:\r\n            item[i].value.productType.value || item[i].value.productType,\r\n          unit:\r\n            item[i].value.measurable == true\r\n              ? item[i].value.unit.value || item[i].value.unit\r\n              : \"\",\r\n          height: item[i].value.height,\r\n          width: item[i].value.width,\r\n          length: item[i].value.length,\r\n          weightPerUnit: item[i].value.weightPerUnit,\r\n          location: \"-\",\r\n          categories: item[i].value.categories,\r\n          measurable: item[i].value.measurable,\r\n          pincode: \"-\",\r\n        };\r\n        const payload = {\r\n          body: data,\r\n        };\r\n         API.put(\"GoFlexeOrderPlacement\", `/inventory`, payload).catch(\r\n          (error) => {\r\n            console.log(error);\r\n          }\r\n        );}\r\n      }\r\n    }\r\n    var items = [];\r\n    for (var i = 0; i < item.length; i++) {\r\n      var temp = {\r\n        productName: item[i].value.productName,\r\n        productType:\r\n          item[i].value.productType.value || item[i].value.productType,\r\n        unit: item[i].value.unit.value || item[i].value.unit,\r\n        height: item[i].value.height,\r\n        width: item[i].value.width,\r\n        length: item[i].value.length,\r\n        weightPerUnit: item[i].value.weightPerUnit,\r\n        measurable: item[i].value.measurable,\r\n        categories: item[i].value.categories,\r\n        density: item[i].value.density,\r\n        noOfUnits: item[i].noOfUnits,\r\n        totalWeight: item[i].totalWeight,\r\n      };\r\n      items.push(temp);\r\n    }\r\n\r\n    //var currentUser = await Auth.currentUserInfo()\r\n    // console.log('checking user details: '+JSON.stringify(currentUser))\r\n    //var currentUsername=currentUser.username\r\n\r\n    var today = new Date();\r\n    data = {\r\n      customerOrders: [\r\n        {\r\n          orderDate: today,\r\n          toAddress: props.destinationAddress,\r\n          fromAddress: props.pickupAddress,\r\n          toPin: props.destinationPin,\r\n          fromPin: props.pickupPin,\r\n          customerEmail: owner,\r\n          pickupDate: props.pickupDate,\r\n          deliveryDate: props.deliveryDate,\r\n          pickupSlot: props.pickupSlot,\r\n          additionalNote: props.additionalNote,\r\n          items: items,\r\n          estimatedPrice: estimatedPrice,\r\n          distanceRange: props.distanceRange.value,\r\n        },\r\n      ],\r\n    };\r\n    const payload = {\r\n      body: data,\r\n    };\r\n    API.post(\"GoFlexeOrderPlacement\", `/customerorder`, payload)\r\n      .then((response) => {\r\n        setOrderId(response[0].OrderId);\r\n        console.log(response);\r\n        setLoading(false);\r\n        setSuccess(true);\r\n        props.onresetState();\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.response);\r\n        setLoading(false);\r\n        setFailure(true);\r\n      });\r\n  };\r\n\r\n  let redirect = null;\r\n  if (success === true) {\r\n    redirect = <Redirect to={`/orderSuccess/${OrderId}`}></Redirect>;\r\n  } else if (failure === true) {\r\n    redirect = <Redirect to=\"/orderFailure\"></Redirect>;\r\n  }\r\n  let content = (\r\n    <Card className={classes.root}>\r\n      {redirect}\r\n      {getStepContent(activeStep)}\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"flex-end\",\r\n          margin: 20,\r\n        }}\r\n      >\r\n        {activeStep !== 0 && (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"default\"\r\n            onClick={handleBackClick}\r\n            style={{ marginRight: \"5px\" }}\r\n          >\r\n            Back\r\n          </Button>\r\n        )}\r\n\r\n        {/* Button for confirm page */}\r\n        {activeStep === 0 && (\r\n          <Button variant=\"contained\" color=\"primary\" onClick={handleNextClick}>\r\n            Order\r\n          </Button>\r\n        )}\r\n        {/* Button for placing order */}\r\n        {activeStep === 1 && (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handlePlaceOrderClick}\r\n          >\r\n            Confirm Order\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </Card>\r\n  );\r\n\r\n  if (loading === true) {\r\n    content = (\r\n      <div class=\"jumbotron text-center\">\r\n        <h1 class=\"display-4\">Thank You!</h1>\r\n        <p class=\"lead\">\r\n          <strong>For Placing Your Order</strong>{\" \"}\r\n        </p>\r\n        <Spinner />\r\n      </div>\r\n    );\r\n  }\r\n  return <div>{content}</div>;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    name: state.order.name,\r\n    pickupAddress: state.order.pickupAddress,\r\n    pickupPin: state.order.pickupPin,\r\n    destinationAddress: state.order.destinationAddress,\r\n    destinationPin: state.order.destinationPin,\r\n    height: state.order.height,\r\n    width: state.order.width,\r\n    length: state.order.length,\r\n    noOfUnits: state.order.noOfUnits,\r\n    weightPerUnit: state.order.weightPerUnit,\r\n    unit: state.order.unit,\r\n    phone: state.order.phone,\r\n    email: state.order.email,\r\n    companyName: state.order.companyName,\r\n    pickupDate: state.order.pickupDate,\r\n    deliveryDate: state.order.deliveryDate,\r\n    pickupSlot: state.order.pickupSlot,\r\n    additionalNote: state.order.additionalNote,\r\n    chosenProducts: state.order.chosenProducts,\r\n    distanceRange: state.order.distanceRange,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onresetState: () => dispatch(actions.resetState()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ForwardedCheckout);\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\actions\\index.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Auth\\ResetPassword\\ResetPassword.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Auth\\Welcome\\welcomePage.js",["383","384"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { Link } from 'react-router-dom';\r\nconst useStyles = makeStyles((theme) => ({\r\n  // root: {\r\n  //   flexGrow: 1,\r\n  // },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"absolute\">\r\n        <Toolbar>\r\n          {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton> */}\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            GoFlexe\r\n          </Typography>\r\n          <Button\r\n            component={Link}\r\n            to='/login'\r\n          style={{\r\n              backgroundColor: \"#21b6ae\",\r\n          }} variant='contained' color=\"primary\">Login</Button>\r\n          <Button\r\n            component={Link}\r\n            to='/signup'\r\n          style={{\r\n              backgroundColor: \"#ffd71b\",\r\n              marginLeft:'10px'\r\n          }} variant='contained' color=\"secondary\">Signup</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      \r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Auth\\Login\\loginform.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\actions\\order.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\OrderSummary.js",["385","386","387","388","389","390","391","392","393","394"],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\LocationDetails.js",["395","396","397","398","399"],"C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\actions\\login.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\Constants\\constants.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\ProductDetails.js",["400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418"],"// import React,{useState} from 'react'\r\n// import { makeStyles } from '@material-ui/core/styles';\r\n// import CardContent from '@material-ui/core/CardContent';\r\n// import Typography from '@material-ui/core/Typography';\r\n// import InputLabel from '@material-ui/core/InputLabel';\r\n// import Select from '@material-ui/core/Select';\r\n// import {connect} from 'react-redux';\r\n// import * as actions from '../../store/actions/index';\r\n// import constants from '../../Constants/constants'\r\n\r\n// import {\r\n//     TextField,\r\n//     Grid,\r\n//     InputAdornment,\r\n//     FormControl,\r\n//     FormControlLabel,\r\n//     Checkbox,\r\n//     Switch\r\n// } from '@material-ui/core';\r\n// const useStyles = makeStyles(theme => ({\r\n//     root: {\r\n//         // minWidth: 275,\r\n//     },\r\n//     title: {\r\n//         fontSize: 20,\r\n//         height: 50,\r\n//         padding: 10,\r\n//         paddingLeft: 55,\r\n//         borderBottomStyle:'solid',\r\n//         borderWidth:\"1px\",\r\n//         borderRadius:'5px'\r\n//     },\r\n//     // form: {\r\n//     //     paddingLeft: '10%',\r\n//     //     paddingRight: '10%',\r\n//     //     [theme.breakpoints.down('sm')]: {\r\n//     //         padding:'0%',\r\n//     //     },\r\n\r\n//     // },\r\n//     radioButton: {\r\n//         marginTop: '5%',\r\n//         [theme.breakpoints.down('sm')]: {\r\n//             margin: '10%',\r\n//         },\r\n//     },\r\n\r\n//     formHeadings: {\r\n//         margin: 20,\r\n//         marginBottom: 0\r\n//     },\r\n//     formControl: {\r\n//         margin: theme.spacing(0),\r\n//         minWidth: 120,\r\n//       },\r\n//     selectEmpty: {\r\n//         marginTop: theme.spacing(2),\r\n//     },\r\n// }));\r\n\r\n// const ProductDimensions = (props) => {\r\n//     const classes = useStyles();\r\n\r\n//     //State Variables for form fields\r\n//     /*const [numberOfUnits, setNumberOfUnits]=useState(0);\r\n//     const [weightPerUnit, setWeightPerUnit]=useState(0);\r\n//     const [unit, setUnit]=useState('');\r\n//     const [height, setHeight]=useState(0);\r\n//     const [width, setWidth]=useState(0);\r\n//     const [length, setLength]=useState(0);*/\r\n//    // const [switchToggler,setSwitchToggler] = useState(true)\r\n\r\n//     // const handleSwitchTogglerChange = (event) => {\r\n//     //     setSwitchToggler(!switchToggler)\r\n//     // }\r\n\r\n//     const onNumberOfUnitsChangeController=(event)=>{\r\n//         var noOfUnits=event.target.value;\r\n//         noOfUnits = noOfUnits<0?0:noOfUnits\r\n//         props.setNoOfUnitsDispatcher(noOfUnits);\r\n//     }\r\n\r\n//     const onWeightPerUnitChangeController=(event)=>{\r\n//         var perUnitWeight=event.target.value;\r\n//         perUnitWeight = perUnitWeight<0?0:perUnitWeight\r\n//         props.setWeightPerUnitDispatcher(perUnitWeight);\r\n//     }\r\n\r\n//     const onHeightChangeController=(event)=>{\r\n//         var heightOfProduct=event.target.value;\r\n//         heightOfProduct = heightOfProduct<0?0:heightOfProduct\r\n//         props.setHeightDispatcher(heightOfProduct);\r\n//     }\r\n\r\n//     const onWidthChangeController=(event)=>{\r\n//         var widthOfProduct=event.target.value;\r\n//         widthOfProduct = widthOfProduct<0?0:widthOfProduct\r\n//         props.setWidthDispatcher(widthOfProduct);\r\n//     }\r\n//     const onLengthChangeController=(event)=>{\r\n//         var lengthOfProduct=event.target.value;\r\n//         lengthOfProduct = lengthOfProduct<0?0:lengthOfProduct\r\n//         props.setLengthDispatcher(lengthOfProduct);\r\n//     }\r\n\r\n//     const unitChangeController=(event)=>{\r\n//         var unitOfProduct=event.target.value;\r\n//         props.setUnitDispatcher(unitOfProduct);\r\n//     }\r\n//     const onMeasureableChangeController=()=>{\r\n//        // alert(!props.measureable)\r\n//        props.setMeasureable(!props.measureable)\r\n//         // if(props.measureable==='true'){\r\n//         //     props.setMeasureable('false')\r\n//         // }\r\n//         // else{\r\n//         //     props.setMeasureable('true')\r\n//         //     //alert(props.measureable)\r\n//         // }\r\n//     }\r\n//     const onTotalWeightChangeController=(event)=>{\r\n//         var totalWeight = event.target.value\r\n//         props.setTotalWeight(totalWeight)\r\n//     }\r\n//     const onDensityChangeController=(event)=>{\r\n//         var density = event.target.value\r\n//         props.setDensity(density)\r\n//     }\r\n\r\n//     const vases = () => {\r\n//         return(\r\n//           <React.Fragment>\r\n//             <Typography className={classes.formHeadings} >Value Added Services</Typography>\r\n//               <Grid container spacing={3} style={{ padding: 50, paddingTop: 20 ,paddingBottom: 30 }}>\r\n//                 {constants.vas.map((vas)=>{\r\n//                   return(\r\n//                     <Grid item xs={12} sm={4}>\r\n//                     <FormControlLabel\r\n//                     control={\r\n//                       <Checkbox\r\n//                         //checked={state.checkedB}\r\n//                         //onChange={handleChange}\r\n//                         name={vas.name}\r\n//                         color=\"primary\"\r\n//                       />\r\n\r\n//                     }\r\n//                     label={vas.name}\r\n//                   />\r\n//                   </Grid>\r\n//                   )\r\n//                 })}\r\n\r\n//             </Grid>\r\n//           </React.Fragment>\r\n//         )\r\n//       }\r\n\r\n// const Measureable = <React.Fragment>\r\n//      <Typography className={classes.formHeadings}>Product Weight and Unit</Typography>\r\n//                 <Grid container spacing={3} style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}>\r\n//                     <Grid item xs={12} sm={6}>\r\n//                         <TextField\r\n//                             required\r\n//                             type=\"number\"\r\n//                             id=\"units\"\r\n//                             name=\"units\"\r\n//                             label=\"No of Units\"\r\n//                             fullWidth\r\n//                             value={props.noOfUnits}\r\n//                             autoComplete=\"units\"\r\n//                             onChange={(event)=>onNumberOfUnitsChangeController(event)}\r\n//                         />\r\n//                     </Grid>\r\n//                     <Grid item xs={12} sm={6}>\r\n//                         <TextField\r\n//                             type=\"number\"\r\n//                             id=\"weight\"\r\n//                             name=\"weight\"\r\n//                             label=\"Weight per unit\"\r\n//                             fullWidth\r\n//                             value={props.weightPerUnit}\r\n//                             autoComplete=\"Weight\"\r\n//                             onChange={(event)=>onWeightPerUnitChangeController(event)}\r\n//                             InputProps={{\r\n//                                 endAdornment: <InputAdornment position=\"end\">Kg</InputAdornment>,\r\n//                             }}\r\n\r\n//                         />\r\n//                     </Grid>\r\n\r\n//                 </Grid>\r\n//                 <Typography className={classes.formHeadings}>Dimensions per unit</Typography>\r\n//                 <Grid container spacing={3} style={{ padding: 30, paddingTop:10 }}>\r\n//                     <Grid item xs={12} sm={6}>\r\n//                             <FormControl className={classes.formControl}>\r\n//                                 <InputLabel htmlFor=\"age-native-simple\">Unit</InputLabel>\r\n//                                 <Select\r\n//                                     native\r\n//                                     //value=\"inches\"\r\n//                                     onChange={unitChangeController}\r\n//                                     inputProps={{\r\n//                                         name: 'age',\r\n//                                         id: 'age-native-simple',\r\n//                                     }}\r\n//                                 >\r\n//                                      {constants.dimensionOptions.map((d) => <option value={d.value}>{d.name}</option>)}\r\n//                                 </Select>\r\n//                             </FormControl>\r\n//                         </Grid>\r\n\r\n//                     <Grid item xs={12} sm={6}>\r\n//                         <TextField\r\n//                             required\r\n//                             type=\"number\"\r\n//                             id=\"height\"\r\n//                             name=\"height\"\r\n//                             label=\"Height\"\r\n//                             fullWidth\r\n//                             value={props.height}\r\n//                             autoComplete=\"Height\"\r\n//                             onChange={(event)=>onHeightChangeController(event)}\r\n//                         />\r\n//                     </Grid>\r\n//                     <Grid item xs={12} sm={6}>\r\n//                         <TextField\r\n//                             type=\"number\"\r\n//                             id=\"width\"\r\n//                             name=\"width\"\r\n//                             label=\"Width\"\r\n//                             fullWidth\r\n//                             value={props.width}\r\n//                             autoComplete=\"width\"\r\n//                             onChange={(event)=>onWidthChangeController(event)}\r\n//                         />\r\n//                     </Grid>\r\n//                     <Grid item xs={12} sm={6}>\r\n//                         <TextField\r\n//                             required\r\n//                             type=\"number\"\r\n//                             id=\"length\"\r\n//                             name=\"length\"\r\n//                             label=\"Length\"\r\n//                             value={props.length}\r\n//                             fullWidth\r\n//                             onChange={(event)=>onLengthChangeController(event)}\r\n//                             autoComplete=\"Length\"\r\n//                         />\r\n//                     </Grid>\r\n//                 </Grid>\r\n// </React.Fragment>\r\n\r\n// const notMeasureable = <React.Fragment>\r\n//     <Typography className={classes.formHeadings} >Product Details</Typography>\r\n//     {/*test*/}\r\n//     <Grid container spacing={3} style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}>\r\n//     <Grid item xs={12} sm={6}>\r\n//     <TextField\r\n//     required\r\n//     type=\"number\"\r\n//     id=\"totalWeight\"\r\n//     name=\"totalWeight\"\r\n//     label=\"Total Weight(in Tons)\"\r\n//     value={props.totalWeight}\r\n//     onChange={(event)=>onTotalWeightChangeController(event)}\r\n//     fullWidth\r\n\r\n//     />\r\n//     </Grid>\r\n//     <Grid item xs={12} sm={6}>\r\n//     <TextField\r\n//     type=\"number\"\r\n//     id=\"density\"\r\n//     name=\"density\"\r\n//     label=\"Weight per cubic meter\"\r\n//     fullWidth\r\n//     value={props.density}\r\n//     onChange={(event)=>onDensityChangeController(event)}\r\n//     InputProps={{\r\n//     endAdornment: <InputAdornment position=\"end\">Kg</InputAdornment>,\r\n//     }}\r\n//     />\r\n//     </Grid>\r\n// </Grid>\r\n// </React.Fragment>\r\n\r\n//     return (\r\n//         <CardContent style={{ padding: 0 }}>\r\n//             <Typography className={classes.title} gutterBottom >\r\n//                 Product Details\r\n//         </Typography>\r\n//             <form className={classes.form}>\r\n//             <FormControlLabel\r\n//                 style={{margin:20}}\r\n//                 control={\r\n//                 <Switch\r\n//                 checked={props.measureable}\r\n//                 onChange={()=>onMeasureableChangeController()}\r\n//                 name=\"checkedB\"\r\n//                 color=\"primary\"\r\n//                     />\r\n//                     }\r\n//                 label=\"(Measureable Dimensions)\"\r\n//             />\r\n\r\n//             {props.measureable===true?Measureable:notMeasureable}\r\n\r\n//                 {vases()}\r\n//             </form>\r\n//         </CardContent>\r\n//     )\r\n// }\r\n\r\n// const mapStateToProps=state=>{\r\n//     return{\r\n//         height:state.order.height,\r\n//         width:state.order.width,\r\n//         length:state.order.length,\r\n//         unit:state.order.unit,\r\n//         noOfUnits:state.order.noOfUnits,\r\n//         weightPerUnit:state.order.weightPerUnit,\r\n//         measureable:state.order.measureable,\r\n//         totalWeight:state.order.totalWeight,\r\n//         density:state.order.density\r\n//     }\r\n//   }\r\n\r\n//   const mapDispatchToProps=dispatch=>{\r\n//     return {\r\n//         setHeightDispatcher:(h)=>dispatch(actions.setHeight(h)),\r\n//         setWidthDispatcher:(w)=>dispatch(actions.setWidth(w)),\r\n//         setLengthDispatcher:(l)=>dispatch(actions.setLength(l)),\r\n//         setUnitDispatcher:(unitOfMeasurement)=>dispatch(actions.setUnit(unitOfMeasurement)),\r\n//         setNoOfUnitsDispatcher:(numberUnits)=>dispatch(actions.setNumberOfUnits(numberUnits)),\r\n//         setWeightPerUnitDispatcher:(weightUnit)=>dispatch(actions.setWeightPerUnit(weightUnit)),\r\n//         setMeasureable:(isMeasureable)=>dispatch(actions.setMeasureable(isMeasureable)),\r\n//         setTotalWeight:(totalWeight)=>dispatch(actions.setTotalWeight(totalWeight)),\r\n//         setDensity:(density)=>dispatch(actions.setDensity(density))\r\n//     };\r\n//   }\r\n\r\n// export default connect(mapStateToProps,mapDispatchToProps)(ProductDimensions);\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport constants from \"../../Constants/constants\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Spinner from \"../UI/Spinner\";\r\nimport CreatableSelect from \"react-select/creatable\";\r\nimport Select from \"react-select\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  FormHelperText,\r\n  Card,\r\n  Checkbox,\r\n  Button,\r\n  IconButton,\r\n  InputAdornment,\r\n  Divider,\r\n  Switch,\r\n} from \"@material-ui/core\";\r\nimport { Auth, API } from \"aws-amplify\";\r\nimport { Multiselect } from \"multiselect-react-dropdown\";\r\n\r\n// import Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    elevation: 0,\r\n    // minHeight:900\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    height: 50,\r\n    padding: 10,\r\n    paddingLeft: 55,\r\n    borderBottomStyle: \"solid\",\r\n    borderWidth: \"1px\",\r\n  },\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n  formControl: {\r\n    marginTop: \"1%\",\r\n    width: \"50%\",\r\n  },\r\n});\r\nconst AntSwitch = withStyles((theme) => ({\r\n  root: {\r\n    width: 28,\r\n    height: 16,\r\n    padding: 0,\r\n    display: \"flex\",\r\n  },\r\n  switchBase: {\r\n    padding: 2,\r\n    color: theme.palette.grey[500],\r\n    \"&$checked\": {\r\n      transform: \"translateX(12px)\",\r\n      color: theme.palette.common.white,\r\n      \"& + $track\": {\r\n        opacity: 1,\r\n        backgroundColor: theme.palette.primary.main,\r\n        borderColor: theme.palette.primary.main,\r\n      },\r\n    },\r\n  },\r\n  thumb: {\r\n    width: 12,\r\n    height: 12,\r\n    boxShadow: \"none\",\r\n  },\r\n  track: {\r\n    border: `1px solid ${theme.palette.grey[500]}`,\r\n    borderRadius: 16 / 2,\r\n    opacity: 1,\r\n    backgroundColor: theme.palette.common.white,\r\n  },\r\n  checked: {},\r\n}))(Switch);\r\nconst ProductDetails = (props) => {\r\n  const classes = useStyles();\r\n  const [user, setUser] = useState();\r\n  const [allProducts, setAllProducts] = useState([]);\r\n\r\n  const [calculating, setCalculating] = useState(false);\r\n\r\n  const capabilityOptions = {\r\n    options: constants.inventoryFeatures,\r\n  };\r\n  const selectStyles = {\r\n    menu: (base) => ({\r\n      ...base,\r\n      zIndex: 100,\r\n    }),\r\n  };\r\n\r\n  useEffect(() => {\r\n    Auth.currentUserInfo()\r\n      .then((user) => {\r\n        setUser(user);\r\n        API.get(\r\n          \"GoFlexeOrderPlacement\",\r\n          `/inventory?type=owner&ownerId=${user.username}`\r\n        )\r\n          .then((response) => {\r\n            // Add your code here\r\n            //setAllProducts(response)\r\n\r\n            var items = allProducts.slice();\r\n            for (var i = 0; i < response.length; i++) {\r\n              items.push({\r\n                productId : response[i].productId,\r\n                label: response[i].productName,\r\n                value: response[i],\r\n                isNew: false,\r\n              });\r\n            }\r\n            setAllProducts(items);\r\n            console.log(items);\r\n            // setLoading(false)\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n            // setLoading(false)\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        //setLoading(false)\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {}, []);\r\n\r\n  const handleItemDeleted = (i) => {\r\n    var items = props.chosenProducts.slice();\r\n    items.splice(i, 1);\r\n    props.setChosenProducts(items);\r\n  };\r\n  const addproduct = () => {\r\n    var items = props.chosenProducts.slice();\r\n    items.push(null);\r\n    props.setChosenProducts(items);\r\n  };\r\n  const onProductTypeChange = (event, i) => {\r\n    console.log(event);\r\n    var items = props.chosenProducts.slice();\r\n    items[i].value.productType = event;\r\n    props.setChosenProducts(items);\r\n  };\r\n  const onCategoryChange = (event, i) => {\r\n    console.log(event);\r\n    var items = props.chosenProducts.slice();\r\n    items[i].value.categories = event;\r\n    props.setChosenProducts(items);\r\n  };\r\n  const handleMeasurableChange = (i) => {\r\n    var items = props.chosenProducts.slice();\r\n    items[i].value.measurable = !items[i].value.measurable;\r\n    props.setChosenProducts(items);\r\n  };\r\n  const unitChangeController = (event, i) => {\r\n    var items = props.chosenProducts.slice();\r\n    items[i].value.unit = event;\r\n    props.setChosenProducts(items);\r\n  };\r\n  const onWeightPerUnitChangeController = (event, i) => {\r\n    var items = props.chosenProducts.slice();\r\n    if (event.target.value < 0) {\r\n      items[i].value.weightPerUnit = 0;\r\n    } else {\r\n      items[i].value.weightPerUnit = event.target.value;\r\n    }\r\n    props.setChosenProducts(items);\r\n  };\r\n  const onHeightChangeController = (event, i) => {\r\n    var items = props.chosenProducts.slice();\r\n    if (event.target.value < 0) {\r\n      items[i].value.height = 0;\r\n    } else {\r\n      items[i].value.height = event.target.value;\r\n    }\r\n    props.setChosenProducts(items);\r\n  };\r\n  const onWidthChangeController = (event, i) => {\r\n    var items = props.chosenProducts.slice();\r\n    if (event.target.value < 0) {\r\n      items[i].value.width = 0;\r\n    } else {\r\n      items[i].value.width = event.target.value;\r\n    }\r\n    props.setChosenProducts(items);\r\n  };\r\n  const onLengthChangeController = (event, i) => {\r\n    var items = props.chosenProducts.slice();\r\n    if (event.target.value < 0) {\r\n      items[i].value.length = 0;\r\n    } else {\r\n      items[i].value.length = event.target.value;\r\n    }\r\n    props.setChosenProducts(items);\r\n  };\r\n  const onDensityChangeController = (event, i) => {\r\n    var items = props.chosenProducts.slice();\r\n    if (event.target.value < 0) {\r\n      items[i].value.density = 0;\r\n    } else {\r\n      items[i].value.density = event.target.value;\r\n    }\r\n    props.setChosenProducts(items);\r\n  };\r\n\r\n  const onNoOfUnitsChange = (event, i) => {\r\n    var items = props.chosenProducts.slice();\r\n    if (items[i] === null) return;\r\n    if (event.target.value < 0) {\r\n      items[i].noOfUnits = 0;\r\n    } else {\r\n      items[i].noOfUnits = event.target.value;\r\n    }\r\n\r\n    props.setChosenProducts(items);\r\n  };\r\n  const onTotalWeightChange = (event, i) => {\r\n    var items = props.chosenProducts.slice();\r\n    if (items[i] === null) return;\r\n    if (event.target.value < 0) {\r\n      items[i].totalWeight = 0;\r\n    } else {\r\n      items[i].totalWeight = event.target.value;\r\n    }\r\n    props.setChosenProducts(items);\r\n  };\r\n  const handlePlaceOrderClick = () => {};\r\n  const handleChange = (newValue, i) => {\r\n    //console.log(newValue)\r\n    var items = props.chosenProducts.slice();\r\n    if (newValue === null) {\r\n      items[i] = null;\r\n    } else {\r\n      if (newValue.__isNew__ === true) {\r\n        var temp = {\r\n          value: {\r\n            productName: newValue.value,\r\n            productType: null,\r\n            categories: null,\r\n            measurable: true,\r\n            length: null,\r\n            width: null,\r\n            height: null,\r\n            weightPerUnit: null,\r\n            density: null,\r\n            unit: { label: \"Inches\", value: \"inches\" },\r\n            location: \"\",\r\n            pincode: \"\",\r\n          },\r\n          isNew: true,\r\n          label: newValue.label,\r\n          noOfUnits: 0,\r\n          totalWeight: 0,\r\n        };\r\n        items[i] = temp;\r\n      } else {\r\n        var temp = {\r\n          value: newValue.value,\r\n          isNew: false,\r\n          label: newValue.label,\r\n          noOfUnits: 0,\r\n          totalWeight: 0,\r\n          productId: newValue.productId\r\n        };\r\n        items[i] = temp;\r\n      }\r\n    }\r\n    props.setChosenProducts(items);\r\n    console.log(items);\r\n    // console.log(newValue)\r\n  };\r\n  //   const onquantityChangeController = (event, i) => {\r\n  //     var items = products.slice();\r\n  //     items[i].quantity = event.target.value;\r\n  //     setproducts(items);\r\n  //   };\r\n  /*IF the product is measureable with length width height */\r\n  var measureablePerUnit = (i) => (\r\n    <React.Fragment>\r\n      <Grid container spacing={3} style={{ padding: 50, paddingTop: 10 }}>\r\n        <Grid item xs={12} sm={3}>\r\n          <TextField\r\n            type=\"number\"\r\n            id=\"weightPerUnit\"\r\n            name=\"weightPerUnit\"\r\n            label=\"Weight Per Unit(in Kg)\"\r\n            InputLabelProps={{ shrink: true }}\r\n            onInput={(e) => {\r\n              e.target.value = Math.max(0, parseInt(e.target.value))\r\n                .toString()\r\n                .slice(0, 5);\r\n            }}\r\n            fullWidth\r\n            value={props.chosenProducts[i].value.weightPerUnit}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            autoComplete=\"weightPerUnit\"\r\n            onChange={(event) => onWeightPerUnitChangeController(event, i)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={9}></Grid>\r\n\r\n        <Grid item xs={12} sm={3}>\r\n          <TextField\r\n            type=\"number\"\r\n            id=\"height\"\r\n            name=\"height\"\r\n            label=\"Height\"\r\n            fullWidth\r\n            onInput={(e) => {\r\n              e.target.value = Math.max(0, parseInt(e.target.value))\r\n                .toString()\r\n                .slice(0, 5);\r\n            }}\r\n            value={props.chosenProducts[i].value.height}\r\n            autoComplete=\"Height\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onChange={(event) => onHeightChangeController(event, i)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <TextField\r\n            type=\"number\"\r\n            onInput={(e) => {\r\n              e.target.value = Math.max(0, parseInt(e.target.value))\r\n                .toString()\r\n                .slice(0, 5);\r\n            }}\r\n            id=\"width\"\r\n            name=\"width\"\r\n            label=\"Width\"\r\n            fullWidth\r\n            value={props.chosenProducts[i].value.width}\r\n            autoComplete=\"width\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onChange={(event) => onWidthChangeController(event, i)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <TextField\r\n            type=\"number\"\r\n            id=\"length\"\r\n            name=\"length\"\r\n            label=\"Length\"\r\n            value={props.chosenProducts[i].value.length}\r\n            fullWidth\r\n            onInput={(e) => {\r\n              e.target.value = Math.max(0, parseInt(e.target.value))\r\n                .toString()\r\n                .slice(0, 5);\r\n            }}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onChange={(event) => onLengthChangeController(event, i)}\r\n            autoComplete=\"Length\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={2}>\r\n          <Select\r\n            styles={selectStyles}\r\n            className=\"basic-single\"\r\n            classNamePrefix=\"Unit\"\r\n            isSearchable\r\n            name=\"unit\"\r\n            placeholder=\"Unit\"\r\n            value={props.chosenProducts[i].value.unit}\r\n            onChange={(event) => unitChangeController(event, i)}\r\n            options={constants.lengthDimensions}\r\n          />\r\n          {/* </FormControl> */}\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  var notMeasureable = (i) => (\r\n    <React.Fragment>\r\n      {/*test*/}\r\n      <Grid\r\n        container\r\n        spacing={3}\r\n        style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n      >\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"number\"\r\n            id=\"TotalWeight\"\r\n            name=\"TotalWeight\"\r\n            label=\"Total Weight in Kg\"\r\n            fullWidth\r\n            InputLabelProps={{ shrink: true }}\r\n            onInput={(e) => {\r\n              e.target.value = Math.max(0, parseInt(e.target.value))\r\n                .toString()\r\n                .slice(0, 5);\r\n            }}\r\n            value={props.chosenProducts[i].totalWeight}\r\n            onChange={(event) => onTotalWeightChange(event, i)}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n\r\n            InputProps={{\r\n              endAdornment: <InputAdornment position=\"end\">Kg</InputAdornment>,\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  var fixedMeasurable = (i) => (\r\n    <React.Fragment>\r\n      <Grid\r\n        container\r\n        spacing={4}\r\n        style={{ paddingTop: 10, paddingLeft: 30, paddingRight: 30 }}\r\n      >\r\n        <Grid item xs={12} sm={3}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"weightPerunit\"\r\n            name=\"weightPerunit\"\r\n            label=\"Weight Per Unit\"\r\n            fullWidth\r\n            InputLabelProps={{ shrink: true }}\r\n            value={props.chosenProducts[i].value.weightPerUnit}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            onChange={(event) => onWeightPerUnitChangeController(event, i)}\r\n            style={{ backgroundColor: \"#fff\" }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={8}></Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <Select\r\n            styles={selectStyles}\r\n            className=\"basic-single\"\r\n            classNamePrefix=\"Unit\"\r\n            isSearchable\r\n            name=\"unit\"\r\n            placeholder=\"Unit\"\r\n            value={\r\n              props.chosenProducts[i] === null ||\r\n              props.chosenProducts[i].value.unit === null\r\n                ? null\r\n                : props.chosenProducts[i].value.unit.value\r\n                ? props.chosenProducts[i].value.unit\r\n                : constants.dimensionsMap[props.chosenProducts[i].value.unit]\r\n            }\r\n            onChange={(event) => unitChangeController(event, i)}\r\n            options={constants.lengthDimensions}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"length\"\r\n            name=\"lenght\"\r\n            label=\"Length\"\r\n            fullWidth\r\n            value={props.chosenProducts[i].value.length}\r\n            onChange={(event) => onLengthChangeController(event, i)}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"width\"\r\n            name=\"width\"\r\n            label=\"Width\"\r\n            fullWidth\r\n            value={props.chosenProducts[i].value.width}\r\n            onChange={(event) => onWidthChangeController(event, i)}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"height\"\r\n            name=\"height\"\r\n            label=\"Height\"\r\n            fullWidth\r\n            value={props.chosenProducts[i].value.height}\r\n            onChange={(event) => onHeightChangeController(event, i)}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  var fixedNotMeasurable = (i) => (\r\n    <React.Fragment>\r\n      <Grid\r\n        container\r\n        spacing={4}\r\n        style={{ paddingTop: 10, paddingLeft: 30, paddingRight: 30 }}\r\n      >\r\n        <Grid item xs={12} sm={4}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"Total Weight\"\r\n            name=\"Total Weight\"\r\n            label=\"Total Weight\"\r\n            InputLabelProps={{ shrink: true }}\r\n            fullWidth\r\n            value={props.chosenProducts[i].totalWeight}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            InputProps={{\r\n              endAdornment: <InputAdornment position=\"end\">Kg</InputAdornment>,\r\n            }}\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onChange={(event) => onTotalWeightChange(event, i)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  var list = props.chosenProducts.map((e, i) => (\r\n    <div>\r\n      {i !== 0 && <Divider style={{ marginBottom: 30, marginTop: 30 }} />}\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        style={{ padding: 30 }}\r\n      >\r\n        <Grid item>\r\n          <h5>Product {i + 1}</h5>\r\n        </Grid>\r\n        <Grid item>\r\n          {i == 0 ? (\r\n            \"\"\r\n          ) : (\r\n            <IconButton onClick={() => handleItemDeleted(i)}>\r\n              <DeleteIcon style={{ fontSize: \"30\" }} />\r\n            </IconButton>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={4} style={{ paddingLeft: 30, paddingRight: 30 }}>\r\n        <Grid item xs={12} sm={4}>\r\n          <CreatableSelect\r\n            isClearable\r\n            value={props.chosenProducts[i]}\r\n            onChange={(newValue) => handleChange(newValue, i)}\r\n            options={allProducts}\r\n            placeholder=\"Product Name\"\r\n            styles={selectStyles}\r\n          />\r\n        </Grid>\r\n        {/* Type of the product */}\r\n        <Grid item xs={12} sm={4}>\r\n          <Select\r\n            styles={selectStyles}\r\n            value={\r\n              props.chosenProducts[i] === null ||\r\n              props.chosenProducts[i].value.productType === null\r\n                ? null\r\n                : props.chosenProducts[i].value.productType.value\r\n                ? props.chosenProducts[i].value.productType\r\n                : constants.productTypeMap[props.chosenProducts[i].value.productType]\r\n            }\r\n            isDisabled={props.chosenProducts[i] === null || !props.chosenProducts[i].isNew}\r\n            onChange={(event) => onProductTypeChange(event, i)}\r\n            isSearchable\r\n            placeholder=\"Product Type\"\r\n            name=\"color\"\r\n            options={constants.typesOfProducts}\r\n          />\r\n          \r\n        </Grid>\r\n        {props.chosenProducts[i] === null ||\r\n        props.chosenProducts[i].value.measurable ? (\r\n          <Grid item xs={12} sm={4}>\r\n            <TextField\r\n              fullWidth\r\n              type=\"number\"\r\n              size=\"small\"\r\n              id=\"outlined-basic\"\r\n              onInput={(e) => {\r\n                e.target.value = Math.max(0, parseInt(e.target.value))\r\n                  .toString()\r\n                  .slice(0, 5);\r\n              }}\r\n              label=\"No. of units\"\r\n              variant=\"outlined\"\r\n              value={\r\n                props.chosenProducts[i] === null\r\n                  ? 0\r\n                  : props.chosenProducts[i].noOfUnits\r\n              }\r\n              onChange={(event) => onNoOfUnitsChange(event, i)}\r\n            />\r\n          </Grid>\r\n        ) : (\r\n          <Grid item xs={12} sm={4}>\r\n            {/* <TextField\r\n              fullWidth\r\n              type=\"number\"\r\n              size=\"small\"\r\n              onInput={(e) => {\r\n                e.target.value = Math.max(0, parseInt(e.target.value))\r\n                  .toString()\r\n                  .slice(0, 5);\r\n              }}\r\n              id=\"outlined-basic\"\r\n              label=\"Total Weight\"\r\n              variant=\"outlined\"\r\n              value={props.chosenProducts[i].totalWeight}\r\n              onChange={(event) => onTotalWeightChange(event, i)}\r\n            /> */}\r\n          </Grid>\r\n        )}\r\n        <Grid item xs={12} sm={12}>\r\n          <Select\r\n            fullWidth\r\n            //defaultValue={[colourOptions[2], colourOptions[3]]}\r\n            isMulti\r\n            styles={selectStyles}\r\n            name=\"categories\"\r\n            value={\r\n              props.chosenProducts[i] === null ||\r\n              props.chosenProducts[i].value.categories === null\r\n                ? null\r\n                : props.chosenProducts[i].value.categories\r\n            }\r\n            options={constants.inventoryCategory}\r\n            placeholder=\"Category(Select Multiple)\"\r\n            isDisabled={\r\n              props.chosenProducts[i] === null || !props.chosenProducts[i].isNew\r\n            }\r\n            className=\"basic-multi-select\"\r\n            onChange={(event) => onCategoryChange(event, i)}\r\n            classNamePrefix=\"select\"\r\n          />\r\n        </Grid>\r\n        {props.chosenProducts[i] === null ? (\r\n          <React.Fragment></React.Fragment>\r\n        ) : props.chosenProducts[i].isNew === true ? (\r\n          <React.Fragment>\r\n            <Typography\r\n              style={{\r\n                fontSize: 18,\r\n                marginTop: 20,\r\n                marginBottom: 10,\r\n                marginLeft: 20,\r\n              }}\r\n            >\r\n              Product Dimensions\r\n            </Typography>\r\n            <Grid\r\n              component=\"label\"\r\n              container\r\n              style={{\r\n                fontSize: 14,\r\n                marginTop: 20,\r\n                marginBottom: 20,\r\n                marginLeft: 20,\r\n              }}\r\n              alignItems=\"center\"\r\n              spacing={1}\r\n            >\r\n              <Grid item>Total Weight</Grid>\r\n              <Grid item>\r\n                <AntSwitch\r\n                  checked={props.chosenProducts[i].value.measurable}\r\n                  onChange={() => handleMeasurableChange(i)}\r\n                  name=\"checkedC\"\r\n                />\r\n              </Grid>\r\n              <Grid item>No. Of Units</Grid>\r\n            </Grid>\r\n            {props.chosenProducts[i].value.measurable === true\r\n              ? measureablePerUnit(i)\r\n              : notMeasureable(i)}\r\n          </React.Fragment>\r\n        ) : (\r\n          <React.Fragment>\r\n            <Typography\r\n              style={{\r\n                fontSize: 18,\r\n                marginTop: 20,\r\n                marginBottom: 10,\r\n                marginLeft: 20,\r\n              }}\r\n            >\r\n              Product Dimensions\r\n            </Typography>\r\n            <Grid\r\n              component=\"label\"\r\n              container\r\n              style={{\r\n                fontSize: 14,\r\n                marginTop: 20,\r\n                marginBottom: 20,\r\n                marginLeft: 20,\r\n              }}\r\n              alignItems=\"center\"\r\n              spacing={1}\r\n            >\r\n              {\" \"}\r\n              <Grid item>Total Weight</Grid>\r\n              <Grid item>\r\n                <AntSwitch\r\n                  checked={props.chosenProducts[i].value.measurable}\r\n                  onChange={() => handleMeasurableChange(i)}\r\n                  name=\"checkedC\"\r\n                />\r\n              </Grid>\r\n              <Grid item>No. Of Units</Grid>\r\n            </Grid>\r\n            {props.chosenProducts[i].value.measurable === true\r\n              ? fixedMeasurable(i)\r\n              : fixedNotMeasurable(i)}\r\n          </React.Fragment>\r\n        )}\r\n        <Grid item xs={12} sm={4}></Grid>\r\n      </Grid>\r\n    </div>\r\n  ));\r\n\r\n  //   if (loading === true) {\r\n  //     return (\r\n  //       <React.Fragment>\r\n  //         <h1>Loading your product details</h1>\r\n  //         <Spinner />\r\n  //       </React.Fragment>\r\n  //     );\r\n  //   }\r\n\r\n  if (calculating === true) {\r\n    return (\r\n      <div class=\"jumbotron text-center\">\r\n        <p class=\"lead\">\r\n          <strong>Calculating estimated cost</strong>\r\n        </p>\r\n        <Spinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* <Card  className={classes.root}> */}\r\n      <CardContent style={{ padding: 0 }}>\r\n        <Typography fullWidth className={classes.title} gutterBottom>\r\n          Product Details\r\n        </Typography>\r\n        <form>\r\n          <Grid\r\n            container\r\n            spacing={3}\r\n            style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n          ></Grid>\r\n          {list}\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#f9a825\",\r\n              marginTop: 10,\r\n              marginLeft: 30,\r\n            }}\r\n            onClick={() => addproduct()}\r\n          >\r\n            Add product\r\n          </Button>\r\n          <Divider style={{ margin: 20 }} />\r\n        </form>\r\n      </CardContent>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"flex-end\",\r\n          margin: 20,\r\n        }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\nexport default ProductDetails;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderDetails\\CompleteDetails.js",["419","420","421","422"],"import React, { useState, useEffect } from \"react\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport constants from \"../../Constants/constants\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Spinner from \"../UI/Spinner\";\r\n\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\n\r\nimport { API, Auth } from \"aws-amplify\";\r\nimport { Grid, Card } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // minWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    height: 50,\r\n    padding: 10,\r\n    paddingLeft: 55,\r\n    color: \"white\",\r\n  },\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n  formControl: {\r\n    marginTop: \"1%\",\r\n  },\r\n  proot: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n    position: \"relative\",\r\n    overflow: \"auto\",\r\n    maxHeight: 200,\r\n  },\r\n  listSection: {\r\n    backgroundColor: \"inherit\",\r\n  },\r\n  ul: {\r\n    backgroundColor: \"inherit\",\r\n    padding: 0,\r\n  },\r\n}));\r\n\r\nconst Complete = (props) => {\r\n  const classes = useStyles();\r\n  const [allDetails, setAllDetails] = useState(null);\r\n  console.log(props.orderId);\r\n  useEffect(async () => {\r\n    var currentUser = await Auth.currentUserInfo();\r\n    API.get(\r\n      \"GoFlexeOrderPlacement\",\r\n      `/combinedview?orderId=${props.orderId}`\r\n    ).then((resp) => {\r\n      console.log(resp);\r\n      setAllDetails(resp);\r\n    });\r\n  }, []);\r\n  if (allDetails === null) {\r\n    return <Spinner />;\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <Card className={classes.root}>\r\n        <CardContent style={{ padding: 0, marginTop: 10 }}>\r\n          <Typography\r\n            className={classes.title}\r\n            gutterBottom\r\n            style={{ color: \"black\", backgroundColor: \"lightgrey\" }}\r\n          >\r\n            Order Details\r\n          </Typography>\r\n          <table>\r\n            <Grid\r\n              container\r\n              spacing={3}\r\n              style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n            >\r\n              <Grid item xs={12} sm={6}>\r\n                <tr>\r\n                  <th scope=\"row\">Order Id :</th>\r\n                  <td>{allDetails.customerOrderData[0].OrderId}</td>\r\n                </tr>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <tr>\r\n                  <th scope=\"row\">Customer Email :</th>\r\n                  <td>{allDetails.customerOrderData[0].customerEmail}</td>\r\n                </tr>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <tr>\r\n                  <th scope=\"row\">Expected Delivery date :</th>\r\n                  <td>{allDetails.customerOrderData[0].deliveryDate}</td>\r\n                </tr>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <tr>\r\n                  <th scope=\"row\">Order date:</th>\r\n                  <td>{allDetails.customerOrderData[0].orderDate}</td>\r\n                </tr>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <tr>\r\n                  <th scope=\"row\"></th>\r\n                  <td></td>\r\n                </tr>\r\n              </Grid>\r\n            </Grid>\r\n          </table>\r\n        </CardContent>\r\n      </Card>\r\n      {allDetails.serviceOrderData.length > 0 && (\r\n        <Card className={classes.root}>\r\n          <CardContent style={{ padding: 0, marginTop: 10 }}>\r\n            <Typography\r\n              className={classes.title}\r\n              gutterBottom\r\n              style={{ color: \"black\", backgroundColor: \"lightgrey\" }}\r\n            >\r\n              Service Provider Details\r\n            </Typography>\r\n            <table>\r\n              <Grid\r\n                container\r\n                spacing={3}\r\n                style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n              >\r\n                <Grid item xs={12} sm={6}>\r\n                  <tr>\r\n                    <th scope=\"row\"> Service Order Id :</th>\r\n                    <td>{allDetails.serviceOrderData[0].ServiceOrderId}</td>\r\n                  </tr>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <tr>\r\n                    <th scope=\"row\">Customer OrderId :</th>\r\n                    <td>{allDetails.serviceOrderData[0].customerOrderId}</td>\r\n                  </tr>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <tr>\r\n                    <th scope=\"row\">Display Id:</th>\r\n                    <td>{allDetails.serviceOrderData[0].displayId}</td>\r\n                  </tr>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <tr>\r\n                    <th scope=\"row\">Service Provider Id :</th>\r\n                    <td>{allDetails.serviceOrderData[0].serviceProviderId}</td>\r\n                  </tr>\r\n                </Grid>\r\n              </Grid>\r\n            </table>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n      {allDetails.broadcastOrderData.length > 0 && (\r\n        <Card className={classes.root}>\r\n          <CardContent style={{ padding: 0, marginTop: 10 }}>\r\n            <Typography\r\n              className={classes.title}\r\n              gutterBottom\r\n              style={{ color: \"black\", backgroundColor: \"lightgrey\" }}\r\n            >\r\n              Broadcast Details\r\n            </Typography>\r\n            <table>\r\n              <Grid\r\n                container\r\n                spacing={3}\r\n                style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n              >\r\n                <Grid item xs={12} sm={6}>\r\n                  <tr>\r\n                    <th scope=\"row\"> Broadcast Order Id :</th>\r\n                    <td>{allDetails.broadcastOrderData[0].broadcastOrderId}</td>\r\n                  </tr>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <tr>\r\n                    <th scope=\"row\">Customer OrderId :</th>\r\n                    <td>{allDetails.broadcastOrderData[0].customerOrderId}</td>\r\n                  </tr>\r\n                </Grid>\r\n                {/* <Grid item xs={12} sm={6} >\r\n                                            <tr>\r\n                                                <th scope=\"row\">Receipients:</th>\r\n                                                <td>{\r\n                                                        allDetails.broadcastOrderData[0].receipients.map((rec,idx) =>{\r\n                                                            return('('+idx+')'+rec.userName)\r\n                                                        })\r\n                                                    }</td>\r\n                                            </tr>\r\n                                        </Grid> */}\r\n                <Grid item xs={12} sm={6}>\r\n                  <tr>\r\n                    <th scope=\"row\">Status :</th>\r\n                    <td>{allDetails.broadcastOrderData[0].status}</td>\r\n                  </tr>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6}>\r\n                  <List className={classes.proot} subheader={<li />}>\r\n                    {\r\n                      <li key=\"receipients\" className={classes.listSection}>\r\n                        <ul className={classes.ul}>\r\n                          <ListSubheader>{`Broadcast Reciepients`}</ListSubheader>\r\n                          {allDetails.broadcastOrderData[0].receipients.map(\r\n                            (item, idx) => (\r\n                              <ListItem key={`item--${idx}`}>\r\n                                <ListItemText\r\n                                  primary={`${idx + 1})${item.userName}`}\r\n                                />\r\n                              </ListItem>\r\n                            )\r\n                          )}\r\n                        </ul>\r\n                      </li>\r\n                    }\r\n                  </List>\r\n                </Grid>\r\n              </Grid>\r\n            </table>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default Complete;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Inventory\\AddProductForm.js",["423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443"],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Inventory\\ShowProducts.js",["444"],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Inventory\\EditForm.js",["445","446","447","448","449","450","451","452","453","454","455","456","457","458","459"],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderDetails\\OrderDetails.js",["460","461","462","463","464","465","466","467","468","469"],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\AccountDetails\\AccountIndex.js",["470","471","472","473","474","475","476","477","478","479"],"import React,{useEffect, useState} from 'react'\r\nimport Spinner from '../../UI/Spinner'\r\nimport {Link} from 'react-router-dom'\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Typography,\r\n    makeStyles,\r\n    Grid,\r\n    Breadcrumbs\r\n} from '@material-ui/core'\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        // minWidth: 275,\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n        height: 50,\r\n        padding: 10,\r\n        paddingLeft: 55,\r\n        color: 'white'\r\n    },\r\n    formHeadings: {\r\n        margin: 20,\r\n        marginBottom: 0\r\n    },\r\n    formControl: {\r\n        marginTop:'1%'\r\n    }\r\n});\r\nconst AccountInfoIndex = (props) => {\r\n    const classes = useStyles()\r\n    const [accDetails,setAccDetails] = useState(props.accountDetails)\r\n   \r\n   \r\n    const fun = (page) => {\r\n        //alert(JSON.stringify(props))\r\n        props.changePage(page)\r\n    }\r\n   \r\n    return(\r\n        <React.Fragment>\r\n                                <table>\r\n                                    <Grid container spacing={3} style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}>\r\n                                        <Grid item xs={12} sm={6} >\r\n                                            <tr>\r\n                                                <th scope=\"row\">Account Holder Name:</th>\r\n                                                <td>{accDetails.accountHolderName}</td>\r\n                                            </tr>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6}>\r\n                                            <tr>\r\n                                                <th scope=\"row\">Account Number:</th>\r\n                                                <td>{accDetails.accountNumber}</td>\r\n                                            </tr>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6}>\r\n                                            <tr>\r\n                                                <th scope=\"row\">IFSC Code:</th>\r\n                                                <td>{accDetails.ifscCode}</td>\r\n                                            </tr>\r\n                                        </Grid>\r\n                                       \r\n\r\n                                    </Grid>\r\n                                </table>\r\n              \r\n        </React.Fragment>\r\n    )\r\n    \r\n}\r\nexport default AccountInfoIndex","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\CompanyKYCForm.js",["480","481","482","483","484","485","486"],"import React, { useEffect, useState } from \"react\";\r\nimport Spinner from \"../UI/Spinner\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport axios from \"axios\";\r\nimport { TextField, Grid, Button } from \"@material-ui/core\";\r\nimport { API, Auth } from \"aws-amplify\";\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    height: 50,\r\n    padding: 10,\r\n    paddingLeft: 55,\r\n    color: \"white\",\r\n  },\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n});\r\n\r\nconst CompanyKYC = (props) => {\r\n  const [myState, setMyState] = useState({\r\n    registeredName: \"\",\r\n    registeredAddress: \"\",\r\n    registeredEmail: \"\",\r\n    registeredContactNo: \"\",\r\n    pan: \"\",\r\n    gstin: \"\",\r\n    accountHolderName: \"\",\r\n    accountNumber: \"\",\r\n    ifscCode: \"\",\r\n  });\r\n\r\n  const classes = useStyles();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [aadharProof, setAadharProof] = useState();\r\n  const [panProof, setPanProof] = useState();\r\n  const [gstinProof, setGSTINProof] = useState();\r\n  const [submit, setSubmit] = useState(false);\r\n\r\n  const submitKYC = () => {\r\n    setLoading(true);\r\n    var panLink, gstinLink;\r\n    var aadharLink;\r\n\r\n    const metaData = {\r\n      contentType: aadharProof.type,\r\n    };\r\n    const payload = {\r\n      body: {\r\n        contentType: aadharProof.type,\r\n        metaData: metaData,\r\n      },\r\n    };\r\n    API.post(\r\n      \"GoFlexeOrderPlacement\",\r\n      \"/kyc/document?type=\" + \"serviceprovider\",\r\n      payload\r\n    )\r\n      .then((initiateResult) => {\r\n        aadharLink = `uploads/kycdocuments/${initiateResult.fileId}.${aadharProof.type}`;\r\n        axios\r\n          .put(initiateResult.s3PutObjectUrl, aadharProof, {\r\n            headers: {\r\n              \"Content-Type\": aadharProof.type,\r\n            },\r\n          })\r\n          .then((resp) => {\r\n            console.log(resp);\r\n            const metaData = {\r\n              contentType: panProof.type,\r\n            };\r\n            const payload = {\r\n              body: {\r\n                contentType: panProof.type,\r\n                metaData: metaData,\r\n              },\r\n            };\r\n            API.post(\r\n              \"GoFlexeOrderPlacement\",\r\n              \"/kyc/document?type=\" + \"serviceprovider\",\r\n              payload\r\n            )\r\n              .then((initiateResult) => {\r\n                panLink = `uploads/kycdocuments/${initiateResult.fileId}.${panProof.type}`;\r\n                axios\r\n                  .put(initiateResult.s3PutObjectUrl, panProof, {\r\n                    headers: {\r\n                      \"Content-Type\": panProof.type,\r\n                    },\r\n                  })\r\n                  .then((resp) => {\r\n                    console.log(resp);\r\n                    const metaData = {\r\n                      contentType: gstinProof.type,\r\n                    };\r\n                    const payload = {\r\n                      body: {\r\n                        contentType: gstinProof.type,\r\n                        metaData: metaData,\r\n                      },\r\n                    };\r\n                    API.post(\r\n                      \"GoFlexeOrderPlacement\",\r\n                      \"/kyc/document?type=\" + \"serviceprovider\",\r\n                      payload\r\n                    )\r\n                      .then((initiateResult) => {\r\n                        gstinLink = `uploads/kycdocuments/${initiateResult.fileId}.${gstinProof.type}`;\r\n                        axios\r\n                          .put(initiateResult.s3PutObjectUrl, gstinProof, {\r\n                            headers: {\r\n                              \"Content-Type\": gstinProof.type,\r\n                            },\r\n                          })\r\n                          .then((resp) => {\r\n                            console.log(resp);\r\n                            Auth.currentUserInfo()\r\n                              .then((userDetails) => {\r\n                                const payload = {\r\n                                  body: {\r\n                                    id: userDetails.username,\r\n                                    type: \"serviceprovider\",\r\n                                    selfInfo: {\r\n                                      companyInfo: {\r\n                                        registeredName: myState.registeredName,\r\n                                        registeredAddress:\r\n                                          myState.registeredAddress,\r\n                                        registeredEmail:\r\n                                          myState.registeredEmail,\r\n                                        registeredContactNo:\r\n                                          myState.registeredContactNo,\r\n                                        registrationProofLink: aadharLink,\r\n                                      },\r\n                                      taxInfo: {\r\n                                        pan: myState.pan,\r\n                                        gstin: myState.gstin,\r\n                                        panLink: panLink,\r\n                                        gstinLink: gstinLink,\r\n                                      },\r\n                                      accountInfo: {\r\n                                        accountHolderName:\r\n                                          myState.accountHolderName,\r\n                                        accountNumber: myState.accountNumber,\r\n                                        ifscCode: myState.ifscCode,\r\n                                      },\r\n                                    },\r\n                                  },\r\n                                };\r\n                                API.post(\r\n                                  \"GoFlexeOrderPlacement\",\r\n                                  \"/kyc/info?type=\" + \"serviceprovider\",\r\n                                  payload\r\n                                )\r\n                                  .then((resp) => console.log(resp))\r\n                                  .catch((err) => console.log(err));\r\n                              })\r\n                              .catch((err) => console.log(err));\r\n                          })\r\n                          .catch((err) => console.log(err));\r\n                      })\r\n                      .catch((err) => console.log(err));\r\n                  })\r\n                  .catch((err) => console.log(err));\r\n              })\r\n              .catch((err) => console.log(err));\r\n          })\r\n          .catch((err) => console.log(err));\r\n      })\r\n      .catch((err) => console.log(err));\r\n    setLoading(false);\r\n  };\r\n\r\n  const onAadharProofChange = (event) => {\r\n    setAadharProof(event.target.files[0]);\r\n  };\r\n  const onPanProofChange = (event) => {\r\n    setPanProof(event.target.files[0]);\r\n  };\r\n  const onGSTINProofChange = (event) => {\r\n    setGSTINProof(event.target.files[0]);\r\n  };\r\n  const fieldsChange = (event) => {\r\n    setMyState({ ...myState, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const CompanyDetailsForm = (\r\n    <React.Fragment>\r\n      <Typography className={classes.formHeadings}>Company Details</Typography>\r\n      <Grid\r\n        container\r\n        spacing={3}\r\n        style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n      >\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"registeredName\"\r\n            name=\"registeredName\"\r\n            label=\"Registered Name\"\r\n            value={myState.registeredName}\r\n            onChange={(event) => fieldsChange(event)}\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"registeredAddress\"\r\n            name=\"registeredAddress\"\r\n            label=\"Registered Address\"\r\n            value={myState.registeredAddress}\r\n            onChange={(event) => fieldsChange(event)}\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"email\"\r\n            id=\"registeredEmail\"\r\n            name=\"registeredEmail\"\r\n            label=\"Offcial Email Id\"\r\n            value={myState.registeredEmail}\r\n            onChange={(event) => fieldsChange(event)}\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"number\"\r\n            id=\"registeredContactNo\"\r\n            name=\"registeredContactNo\"\r\n            label=\"Contact number\"\r\n            value={myState.registeredContactNo}\r\n            onChange={(event) => fieldsChange(event)}\r\n            fullWidth\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">+91</InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n        </Grid>\r\n\r\n        <Typography className={classes.formHeadings}>\r\n          Documents Upload\r\n        </Typography>\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n          style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n        >\r\n          <Grid item xs={12}>\r\n            <label>Registration Proof: </label>\r\n            <input\r\n              style={{ marginLeft: \"15px\" }}\r\n              type=\"file\"\r\n              onChange={(event) => onAadharProofChange(event)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const TaxDetails = (\r\n    <React.Fragment>\r\n      <Typography className={classes.formHeadings}>Tax Details</Typography>\r\n      <Grid\r\n        container\r\n        spacing={3}\r\n        style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n      >\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            type=\"text\"\r\n            id=\"pan\"\r\n            name=\"pan\"\r\n            value={myState.pan}\r\n            onChange={(event) => fieldsChange(event)}\r\n            label=\"Enter PAN\"\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            type=\"text\"\r\n            id=\"gstin\"\r\n            name=\"gstin\"\r\n            label=\"GST Number\"\r\n            value={myState.gstin}\r\n            onChange={(event) => fieldsChange(event)}\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n        {/* </Grid> */}\r\n\r\n        <Typography className={classes.formHeadings}>\r\n          Documents Upload\r\n        </Typography>\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n          style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n        >\r\n          <Grid item xs={12}>\r\n            <label>Pan Proof: </label>\r\n            <input\r\n              style={{ marginLeft: \"15px\" }}\r\n              type=\"file\"\r\n              onChange={(event) => onPanProofChange(event)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <label>GSTIN Proof: </label>\r\n            <input\r\n              style={{ marginLeft: \"15px\" }}\r\n              type=\"file\"\r\n              onChange={(event) => onGSTINProofChange(event)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const AccountDetails = (\r\n    <React.Fragment>\r\n      <Typography className={classes.formHeadings}>Account Details</Typography>\r\n      <Grid\r\n        container\r\n        spacing={3}\r\n        style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n      >\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"accountHolderName\"\r\n            name=\"accountHolderName\"\r\n            label=\"Account Holder's Name\"\r\n            value={myState.accountHolderName}\r\n            onChange={(event) => fieldsChange(event)}\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"accountNumber\"\r\n            name=\"accountNumber\"\r\n            label=\"Account Number\"\r\n            value={myState.accountNumber}\r\n            fullWidth\r\n            onChange={(event) => fieldsChange(event)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"ifscCode\"\r\n            name=\"ifscCode\"\r\n            label=\"IFSC Code\"\r\n            value={myState.ifscCode}\r\n            fullWidth\r\n            onChange={(event) => fieldsChange(event)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  if (loading === true) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div style={{ overflow: \"hidden\" }}>\r\n      <Typography\r\n        fullWidth\r\n        className={classes.title}\r\n        gutterBottom\r\n        style={{ backgroundColor: \"#66bb6a\" }}\r\n      >\r\n        Pending KYC\r\n      </Typography>\r\n      <form>\r\n        {CompanyDetailsForm}\r\n        {TaxDetails}\r\n        {AccountDetails}\r\n        <Button\r\n          onClick={submitKYC}\r\n          className=\"row\"\r\n          variant=\"contained\"\r\n          style={{\r\n            float: \"right\",\r\n            backgroundColor: \"#f9a825\",\r\n            marginBottom: \"10px\",\r\n          }}\r\n        >\r\n          Submit KYC\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default CompanyKYC;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\CompanyDetails\\IndexCompanyDetails.js",["487","488","489","490","491","492","493","494","495","496","497"],"import React,{useEffect, useState} from 'react'\r\nimport Spinner from '../../UI/Spinner'\r\nimport {Link} from 'react-router-dom'\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Typography,\r\n    makeStyles,\r\n    Grid,\r\n    Breadcrumbs\r\n} from '@material-ui/core'\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        // minWidth: 275,\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n        height: 50,\r\n        padding: 10,\r\n        paddingLeft: 55,\r\n        color: 'white'\r\n    },\r\n    formHeadings: {\r\n        margin: 20,\r\n        marginBottom: 0\r\n    },\r\n    formControl: {\r\n        marginTop:'1%'\r\n    }\r\n});\r\nconst AccountInfoIndex = (props) => {\r\n    const classes = useStyles()\r\n    const [comDetails,setComDetails] = useState(props.companyDetails)\r\n    \r\n    const fun = (page) => {\r\n        //alert(JSON.stringify(props))\r\n        props.changePage(page)\r\n    }\r\n    \r\n    return (\r\n      <React.Fragment>\r\n        <table>\r\n          <Grid\r\n            container\r\n            spacing={3}\r\n            style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n          >\r\n            <Grid item xs={12} sm={6}>\r\n              <tr>\r\n                <th scope=\"row\">Registered Name:</th>\r\n                <td>{comDetails.registeredName}</td>\r\n              </tr>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <tr>\r\n                <th scope=\"row\">Registered Address:</th>\r\n                <td>{comDetails.registeredAddress}</td>\r\n              </tr>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <tr>\r\n                <th scope=\"row\">Email:</th>\r\n                <td>{comDetails.registeredEmail}</td>\r\n              </tr>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <tr>\r\n                <th scope=\"row\">Contact:</th>\r\n                <td>{comDetails.registeredContactNo}</td>\r\n              </tr>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <tr>\r\n                <th>Registraion Proof:</th>\r\n                <td>\r\n                  <a\r\n                    href={\r\n                      \"https://goflexe-kyc.s3.ap-south-1.amazonaws.com/\" +\r\n                      comDetails.registrationDocLink\r\n                    }\r\n                    target={\"_blank\"}\r\n                  >\r\n                    View Document\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n            </Grid>\r\n          </Grid>\r\n        </table>\r\n      </React.Fragment>\r\n    );\r\n    \r\n}\r\nexport default AccountInfoIndex","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\CompanyDetails\\FormCompanyDetails.js",["498","499","500","501","502","503","504","505","506","507","508","509","510","511"],"import React, { useEffect, useState } from \"react\";\r\nimport Spinner from \"../../UI/Spinner\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Auth, API } from \"aws-amplify\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\nimport axios from \"axios\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport \"../../../Globalcss/globalcss.css\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport { TextField, Grid, Button, Breadcrumbs } from \"@material-ui/core\";\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    height: 50,\r\n    padding: 10,\r\n    paddingLeft: 55,\r\n    color: \"white\",\r\n  },\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n});\r\n\r\nconst CompanyKYC = (props) => {\r\n  const classes = useStyles();\r\n  const [registrationDoc, setRegistrationDoc] = useState();\r\n  const [PhoneValidator, setPhoneValidator] = useState(\"\");\r\n  const [EmailValidator, setEmailValidator] = useState(\"\");\r\n  const [NameValidator, setNameValidator] = useState(\"\");\r\n  const [AddressValidator, setAddressValidator] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [submit, setSubmit] = useState(false);\r\n  const [myState, setMyState] = useState({\r\n    registeredName: \"\",\r\n    registeredAddress: \"\",\r\n    registeredEmail: \"\",\r\n    registeredContactNo: \"\",\r\n  });\r\n  const fieldsChange = (event) => {\r\n    setEmailValidator(\"\");\r\n    setPhoneValidator(\"\");\r\n    setAddressValidator(\"\");\r\n    setNameValidator(\"\");\r\n\r\n    var count = 0,\r\n      temp = event.target.value;\r\n    while (temp > 0) {\r\n      count++;\r\n      temp = Math.floor(temp / 10);\r\n    }\r\n    if (\r\n      event.target.name == \"registeredEmail\" &&\r\n      /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(\r\n        event.target.value\r\n      ) === false\r\n    ) {\r\n      setEmailValidator(\"Enter a Valid Email Address\");\r\n    }\r\n    if (event.target.name == \"registeredContactNo\" && count < 10) {\r\n      setPhoneValidator(\"Phone Number should contain 10 Digits\");\r\n    }\r\n    if (event.target.name == \"registeredContactNo\" && event.target.value < 0) {\r\n      event.target.value = 0;\r\n    }\r\n    setMyState({ ...myState, [event.target.name]: event.target.value });\r\n  };\r\n  const submitKYC = () => {\r\n    if (\r\n      PhoneValidator !== \"\" ||\r\n      EmailValidator !== \"\" ||\r\n      NameValidator !== \"\" ||\r\n      AddressValidator !== \"\"\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (myState.registeredName == \"\") {\r\n      setNameValidator(\"Registered Name cannot be blank\");\r\n      return;\r\n    }\r\n    if (myState.registeredEmail == \"\") {\r\n      setEmailValidator(\"Email cannot be empty\");\r\n      return;\r\n    }\r\n    if (\r\n      myState.registeredContactNo == \"\" ||\r\n      myState.registeredContactNo == null\r\n    ) {\r\n      setPhoneValidator(\"Contact Number cannot be empty\");\r\n      return;\r\n    }\r\n    if (myState.registeredAddress == \"\") {\r\n      setAddressValidator(\"Address cannot be empty\");\r\n      return;\r\n    }\r\n    if (registrationDoc == \"\" || registrationDoc == null) {\r\n      alert(\" Please upload the Registration Certificate\");\r\n      return;\r\n    }\r\n    setSubmit(true);\r\n    var docLink;\r\n    const metaData = {\r\n      contentType: registrationDoc.type,\r\n    };\r\n    const payload = {\r\n      body: {\r\n        contentType: registrationDoc.type,\r\n        metaData: metaData,\r\n      },\r\n    };\r\n    var ext = registrationDoc.name.split(\".\").pop();\r\n    API.post(\r\n      \"GoFlexeOrderPlacement\",\r\n      \"/kyc/document?type=\" + \"customer\",\r\n      payload\r\n    )\r\n      .then((initiateResult) => {\r\n        docLink = `uploads/kycdocuments/customer/${initiateResult.fileId}.${ext}`;\r\n        axios\r\n          .put(initiateResult.s3PutObjectUrl, registrationDoc, {\r\n            headers: {\r\n              \"Content-Type\": registrationDoc.type,\r\n            },\r\n          })\r\n          .then((resp) => {\r\n            Auth.currentUserInfo()\r\n              .then((userDetails) => {\r\n                const payload = {\r\n                  body: {\r\n                    id: userDetails.username,\r\n                    type: \"customer\",\r\n                    kycInformation: {\r\n                      companyInfo: {\r\n                        registeredName: myState.registeredName,\r\n                        registeredAddress: myState.registeredAddress,\r\n                        registeredEmail: myState.registeredEmail,\r\n                        registeredContactNo: myState.registeredContactNo,\r\n                        registrationDocLink: docLink,\r\n                      },\r\n                    },\r\n                  },\r\n                };\r\n                API.post(\r\n                  \"GoFlexeOrderPlacement\",\r\n                  \"/kyc/info?type=\" + \"customer\",\r\n                  payload\r\n                )\r\n                  .then((resp) => {\r\n                    console.log(resp);\r\n                    fun();\r\n                  })\r\n                  .catch((err) => {\r\n                    console.log(err);\r\n                    setSubmit(false);\r\n                  });\r\n              })\r\n              .catch((err) => {\r\n                console.log(err);\r\n                setSubmit(false);\r\n              });\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n            setSubmit(false);\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSubmit(false);\r\n      });\r\n  };\r\n  const fun = () => {\r\n    //alert(JSON.stringify(props))\r\n    props.loadData();\r\n  };\r\n  const onRegistrationProofChange = (event) => {\r\n    setRegistrationDoc(event.target.files[0]);\r\n  };\r\n  if (loading === true) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div style={{ overflow: \"hidden\" }}>\r\n      {/* <Typography fullWidth className={classes.title} gutterBottom style={{ backgroundColor: '#66bb6a' }}>\r\n                            Pending KYC\r\n                        </Typography> */}\r\n      <form>\r\n        {/* <Typography className={classes.formHeadings} >Company Details</Typography> */}\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n          style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n        >\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              type=\"text\"\r\n              id=\"registeredName\"\r\n              name=\"registeredName\"\r\n              label=\"Registered Name\"\r\n              value={myState.registeredName}\r\n              error={NameValidator !== \"\"}\r\n              inputProps={{ maxLength: 50 }}\r\n              helperText={NameValidator}\r\n              onChange={(event) => fieldsChange(event)}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              type=\"text\"\r\n              id=\"registeredAddress\"\r\n              helperText={AddressValidator}\r\n              error={AddressValidator !== \"\"}\r\n              name=\"registeredAddress\"\r\n              label=\"Registered Address\"\r\n              value={myState.registeredAddress}\r\n              onChange={(event) => fieldsChange(event)}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              type=\"email\"\r\n              id=\"registeredEmail\"\r\n              name=\"registeredEmail\"\r\n              label=\"Offcial Email Id\"\r\n              error={EmailValidator !== \"\"}\r\n              inputProps={{ maxLength: 50 }}\r\n              helperText={EmailValidator}\r\n              value={myState.registeredEmail}\r\n              onChange={(event) => fieldsChange(event)}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              type=\"number\"\r\n              id=\"registeredContactNo\"\r\n              name=\"registeredContactNo\"\r\n              label=\"Contact number\"\r\n              value={myState.registeredContactNo}\r\n              error={PhoneValidator !== \"\"}\r\n              helperText={PhoneValidator}\r\n              onInput={(e) => {\r\n                e.target.value = Math.max(0, parseInt(e.target.value))\r\n                  .toString()\r\n                  .slice(0, 10);\r\n              }}\r\n              onChange={(event) => fieldsChange(event)}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">+91</InputAdornment>\r\n                ),\r\n              }}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n\r\n          <Typography className={classes.formHeadings}>\r\n            Documents Upload\r\n          </Typography>\r\n          <Grid\r\n            container\r\n            spacing={3}\r\n            style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n          >\r\n            <Grid item xs={12}>\r\n              <Tooltip title=\"Upload registeration certificate\">\r\n                <InfoIcon style={{ color: \"lightgrey\" }} fontSize=\"small\" />\r\n              </Tooltip>{\" \"}\r\n              <label>Registration Proof: </label>\r\n              <input\r\n                style={{ marginLeft: \"15px\" }}\r\n                type=\"file\"\r\n                onChange={(event) => onRegistrationProofChange(event)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {submit == true ? (\r\n          <Spinner />\r\n        ) : (\r\n          <Button\r\n            onClick={submitKYC}\r\n            className=\"row AllButtons\"\r\n            variant=\"contained\"\r\n            style={{ float: \"right\", marginBottom: \"10px\" }}\r\n          >\r\n            Next\r\n          </Button>\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default CompanyKYC;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\TaxDetails\\TaxIndex.js",["512","513","514","515","516","517","518","519","520","521","522","523"],"import React,{useEffect, useState} from 'react'\r\nimport Spinner from '../../UI/Spinner'\r\nimport {Link} from 'react-router-dom'\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Typography,\r\n    makeStyles,\r\n    Grid,\r\n    Breadcrumbs\r\n} from '@material-ui/core'\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        // minWidth: 275,\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n        height: 50,\r\n        padding: 10,\r\n        paddingLeft: 55,\r\n        color: 'white'\r\n    },\r\n    formHeadings: {\r\n        margin: 20,\r\n        marginBottom: 0\r\n    },\r\n    formControl: {\r\n        marginTop:'1%'\r\n    }\r\n});\r\nconst TaxInfoIndex = (props) => {\r\n    const classes = useStyles()\r\n    const [taxDetails,setTaxDetails] = useState(props.taxDetails)\r\n    \r\n    const fun = (page) => {\r\n        //alert(JSON.stringify(props))\r\n        props.changePage(page)\r\n    }\r\n    \r\n    return(\r\n        <React.Fragment>\r\n\r\n                                <table>\r\n                                    <Grid container spacing={3} style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}>\r\n                                        <Grid item xs={12} sm={6} >\r\n                                            <tr>\r\n                                                <th scope=\"row\">PAN:</th>\r\n                                                <td>{taxDetails.pan}</td>\r\n                                                <td>\r\n                                                <a href={'https://goflexe-kyc.s3.ap-south-1.amazonaws.com/'+taxDetails.panLink} target={'_blank'} >(View Document)</a>\r\n                                                </td>\r\n                                            </tr>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={7}>\r\n                                            <tr>\r\n                                                <th scope=\"row\">GSTIN:</th>\r\n                                                <td>{taxDetails.gstin}</td>\r\n                                                <td>\r\n                                                <a href={'https://goflexe-kyc.s3.ap-south-1.amazonaws.com/'+taxDetails.gstinLink} target={'_blank'} >(View Document)</a>\r\n                                                </td>\r\n                                            </tr>\r\n                                        </Grid>\r\n                                        \r\n                                    </Grid>\r\n                                </table>\r\n              \r\n        </React.Fragment>\r\n    )\r\n    \r\n}\r\nexport default TaxInfoIndex","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\TaxDetails\\TaxForm.js",["524","525","526","527","528","529","530","531","532","533","534","535","536"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Auth, API } from \"aws-amplify\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport axios from \"axios\";\r\nimport Spinner from \"../../UI/Spinner\";\r\nimport \"../../../Globalcss/globalcss.css\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\nimport { TextField, Grid, Button, Breadcrumbs } from \"@material-ui/core\";\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    height: 50,\r\n    padding: 10,\r\n    paddingLeft: 55,\r\n    color: \"white\",\r\n  },\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n});\r\n\r\nconst CompanyKYC = (props) => {\r\n  const classes = useStyles();\r\n  const [panDoc, setPanDoc] = useState();\r\n  const [gstDoc, setGSTDoc] = useState();\r\n  const [PanValidator, setPanValidator] = useState(\"\");\r\n  const [GstValidator, setGstValidator] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [submit, setSubmit] = useState(false);\r\n  const [myState, setMyState] = useState({\r\n    pan: \"\",\r\n    gstin: \"\",\r\n  });\r\n  const fieldsChange = (event) => {\r\n    setPanValidator(\"\");\r\n    setGstValidator(\"\");\r\n    if (event.target.name == \"pan\" && event.target.value.length < 10) {\r\n      setPanValidator(\"PAN Number should be of 10 Digits\");\r\n    }\r\n    if (event.target.name == \"gstin\" && event.target.value.length < 15) {\r\n      setGstValidator(\"Gst Number should be of 15 Digits\");\r\n    }\r\n    setMyState({ ...myState, [event.target.name]: event.target.value });\r\n  };\r\n  const submitKYC = () => {\r\n    if (PanValidator !== \"\" || GstValidator !== \"\") {\r\n      return;\r\n    }\r\n\r\n    if (myState.pan == \"\") {\r\n      setPanValidator(\"PAN Details cannot be empty\");\r\n      return;\r\n    }\r\n    if (myState.gstin == \"\") {\r\n      setGstValidator(\"GSTIN cannot be empty\");\r\n      return;\r\n    }\r\n\r\n    if (panDoc == null || panDoc == \"\") {\r\n      alert(\" Please upload your PAN Proof\");\r\n      return;\r\n    }\r\n    if (gstDoc == null || panDoc == \"\") {\r\n      alert(\" Please upload your GSTIN Proof\");\r\n      return;\r\n    }\r\n\r\n    setSubmit(true);\r\n    var panLink, gstinLink;\r\n    const metaData = {\r\n      contentType: panDoc.type,\r\n    };\r\n    const payload = {\r\n      body: {\r\n        contentType: panDoc.type,\r\n        metaData: metaData,\r\n      },\r\n    };\r\n    var ext = panDoc.name.split(\".\").pop();\r\n    API.post(\r\n      \"GoFlexeOrderPlacement\",\r\n      \"/kyc/document?type=\" + \"customer\",\r\n      payload\r\n    )\r\n      .then((initiateResult) => {\r\n        panLink = `uploads/kycdocuments/customer/${initiateResult.fileId}.${ext}`;\r\n        axios\r\n          .put(initiateResult.s3PutObjectUrl, panDoc, {\r\n            headers: {\r\n              \"Content-Type\": panDoc.type,\r\n            },\r\n          })\r\n          .then((resp) => {\r\n            const metaData = {\r\n              contentType: gstDoc.type,\r\n            };\r\n            const payload = {\r\n              body: {\r\n                contentType: gstDoc.type,\r\n                metaData: metaData,\r\n              },\r\n            };\r\n            var ext = gstDoc.name.split(\".\").pop();\r\n            API.post(\r\n              \"GoFlexeOrderPlacement\",\r\n              \"/kyc/document?type=\" + \"customer\",\r\n              payload\r\n            )\r\n              .then((initiateResult) => {\r\n                gstinLink = `uploads/kycdocuments/customer/${initiateResult.fileId}.${ext}`;\r\n                axios\r\n                  .put(initiateResult.s3PutObjectUrl, gstDoc, {\r\n                    headers: {\r\n                      \"Content-Type\": gstDoc.type,\r\n                    },\r\n                  })\r\n                  .then((res) => {\r\n                    Auth.currentUserInfo()\r\n                      .then((userDetails) => {\r\n                        const payload = {\r\n                          body: {\r\n                            id: userDetails.username,\r\n                            type: \"customer\",\r\n                            kycInformation: {\r\n                              taxInfo: {\r\n                                pan: myState.pan,\r\n                                gstin: myState.gstin,\r\n                                panLink: panLink,\r\n                                gstinLink: gstinLink,\r\n                              },\r\n                            },\r\n                          },\r\n                        };\r\n                        API.post(\r\n                          \"GoFlexeOrderPlacement\",\r\n                          \"/kyc/info?type=\" + \"customer\",\r\n                          payload\r\n                        )\r\n                          .then((resp) => {\r\n                            console.log(resp);\r\n                            fun();\r\n                          })\r\n                          .catch((err) => {\r\n                            console.log(err);\r\n                            setSubmit(false);\r\n                          });\r\n                      })\r\n                      .catch((err) => {\r\n                        console.log(err);\r\n                        setSubmit(false);\r\n                      });\r\n                  })\r\n                  .catch((err) => {\r\n                    console.log(err);\r\n                    setSubmit(false);\r\n                  });\r\n              })\r\n              .catch((err) => {\r\n                console.log(err);\r\n                setSubmit(false);\r\n              });\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n            setSubmit(false);\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSubmit(false);\r\n      });\r\n  };\r\n  const fun = () => {\r\n    //alert(JSON.stringify(props))\r\n    props.loadData();\r\n  };\r\n\r\n  const onPanProofChange = (event) => {\r\n    setPanDoc(event.target.files[0]);\r\n  };\r\n  const onGSTINProofChange = (event) => {\r\n    setGSTDoc(event.target.files[0]);\r\n  };\r\n  if (loading === true) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div style={{ overflow: \"hidden\" }}>\r\n      {/* <Typography fullWidth className={classes.title} gutterBottom style={{ backgroundColor: '#66bb6a' }}>\r\n                            Pending KYC\r\n                </Typography> */}\r\n      <form>\r\n        {/* <Typography className={classes.formHeadings} >Tax Details</Typography> */}\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n          style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n        >\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              required\r\n              type=\"text\"\r\n              id=\"pan\"\r\n              name=\"pan\"\r\n              error={PanValidator !== \"\"}\r\n              helperText={PanValidator === \"\" ? \"\" : PanValidator}\r\n              value={myState.pan}\r\n              onChange={(event) => fieldsChange(event)}\r\n              label=\"Enter PAN Details\"\r\n              fullWidth\r\n              inputProps={{ maxLength: 10 }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              required\r\n              type=\"text\"\r\n              id=\"gstin\"\r\n              name=\"gstin\"\r\n              error={GstValidator !== \"\"}\r\n              helperText={GstValidator}\r\n              value={myState.gstin}\r\n              inputProps={{ maxLength: 15 }}\r\n              onChange={(event) => fieldsChange(event)}\r\n              label=\"GSTIN\"\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Typography className={classes.formHeadings}>\r\n          Documents Upload{\" \"}\r\n          <Tooltip title=\"Upload PAN and GST copy\" placement=\"top\">\r\n            <InfoIcon style={{ color: \"lightgrey\" }} fontSize=\"small\" />\r\n          </Tooltip>{\" \"}\r\n        </Typography>\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n          style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n        >\r\n          <Grid item xs={12}>\r\n            <label>PAN Proof: </label>\r\n            <input\r\n              style={{ marginLeft: \"15px\" }}\r\n              type=\"file\"\r\n              onChange={(event) => onPanProofChange(event)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <label>GSTIN: </label>\r\n            <input\r\n              style={{ marginLeft: \"15px\" }}\r\n              type=\"file\"\r\n              onChange={(event) => onGSTINProofChange(event)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        {submit == true ? (\r\n          <Spinner />\r\n        ) : (\r\n          <Button\r\n            onClick={submitKYC}\r\n            className=\"row AllButtons\"\r\n            variant=\"contained\"\r\n            style={{ float: \"right\", marginBottom: \"10px\" }}\r\n          >\r\n            Next\r\n          </Button>\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default CompanyKYC;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\AccountDetails\\AccountForm.js",["537","538","539","540","541","542","543","544","545","546","547","548"],"import React, { useEffect, useState } from \"react\";\r\nimport Spinner from \"../../UI/Spinner\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Auth, API } from \"aws-amplify\";\r\nimport \"../../../Globalcss/globalcss.css\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { TextField, Grid, Button, Breadcrumbs } from \"@material-ui/core\";\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    height: 50,\r\n    padding: 10,\r\n    paddingLeft: 55,\r\n    color: \"white\",\r\n  },\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n});\r\n\r\nconst AccountInfoForm = (props) => {\r\n  const classes = useStyles();\r\n  const [loading, setLoading] = useState(false);\r\n  const [submit, setSubmit] = useState(false);\r\n  const [IfscValidator, setIfscValidator] = useState(\"\");\r\n  const [AccountNameValidator, setAccountNameValidator] = useState(\"\");\r\n  const [AccountNoValidator, setAccountNoValidator] = useState(\"\");\r\n  const [myState, setMyState] = useState({\r\n    accountHolderName: \"\",\r\n    accountNumber: \"\",\r\n    ifscCode: \"\",\r\n  });\r\n  const submitKYC = () => {\r\n    if (\r\n      AccountNameValidator !== \"\" ||\r\n      IfscValidator !== \"\" ||\r\n      AccountNoValidator !== \"\"\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (myState.accountHolderName == \"\") {\r\n      setAccountNameValidator(\"Account Holder's Name cannot be empty\");\r\n      return;\r\n    }\r\n    if (myState.accountNumber == \"\") {\r\n      setAccountNoValidator(\"Account Number cannot be empty\");\r\n      return;\r\n    }\r\n    if (myState.ifscCode == \"\") {\r\n      setIfscValidator(\"IFS code cannot be empty\");\r\n      return;\r\n    }\r\n\r\n    setSubmit(true);\r\n    Auth.currentUserInfo()\r\n      .then((userDetails) => {\r\n        const payload = {\r\n          body: {\r\n            id: userDetails.username,\r\n            type: \"customer\",\r\n            kycInformation: {\r\n              accountInfo: {\r\n                accountHolderName: myState.accountHolderName,\r\n                accountNumber: myState.accountNumber,\r\n                ifscCode: myState.ifscCode,\r\n              },\r\n            },\r\n          },\r\n        };\r\n        API.post(\r\n          \"GoFlexeOrderPlacement\",\r\n          \"/kyc/info?type=\" + \"customer\",\r\n          payload\r\n        )\r\n          .then((resp) => console.log(resp))\r\n          .catch((err) => {\r\n            console.log(err);\r\n            setSubmit(false);\r\n          });\r\n\r\n        fun();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSubmit(false);\r\n      });\r\n  };\r\n  const fun = () => {\r\n    //alert(JSON.stringify(props))\r\n    props.loadData();\r\n  };\r\n  const fieldsChange = (event) => {\r\n    setIfscValidator(\"\");\r\n    setAccountNameValidator(\"\");\r\n    setAccountNoValidator(\"\");\r\n    //  if (\r\n    //    event.target.name == \"accountNumber\" &&\r\n    //    event.target.value.length < 18\r\n    //  ) {\r\n    //    setAccountNoValidator(\"PAN Number should be of 10 Digits\");\r\n    //  }\r\n    if (event.target.name == \"ifscCode\" && event.target.value.length < 11) {\r\n      setIfscValidator(\"IFS Code should be of 11 Digits\");\r\n    }\r\n\r\n    setMyState({ ...myState, [event.target.name]: event.target.value });\r\n  };\r\n  if (loading === true) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div style={{ overflow: \"hidden\" }}>\r\n      <form>\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n          style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n        >\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              type=\"text\"\r\n              id=\"accountHolderName\"\r\n              name=\"accountHolderName\"\r\n              helperText={AccountNameValidator}\r\n              error={AccountNameValidator !== \"\"}\r\n              value={myState.accountHolderName}\r\n              onChange={(event) => fieldsChange(event)}\r\n              label=\"Account Holder's Name\"\r\n              inputProps={{ maxLength: 30 }}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              type=\"text\"\r\n              id=\"accountNumber\"\r\n              inputProps={{ maxLength: 18 }}\r\n              name=\"accountNumber\"\r\n              label=\"Account Number\"\r\n              helperText={AccountNoValidator}\r\n              error={AccountNoValidator !== \"\"}\r\n              value={myState.accountNumber}\r\n              onChange={(event) => fieldsChange(event)}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              type=\"text\"\r\n              inputProps={{ maxLength: 11 }}\r\n              id=\"ifscCode\"\r\n              name=\"ifscCode\"\r\n              error={IfscValidator !== \"\"}\r\n              helperText={IfscValidator}\r\n              value={myState.ifscCode}\r\n              onChange={(event) => fieldsChange(event)}\r\n              label=\"IFSC Code\"\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        {submit == true ? (\r\n          <Spinner />\r\n        ) : (\r\n          <Button\r\n            onClick={submitKYC}\r\n            className=\"row AllButtons\"\r\n            variant=\"contained\"\r\n            style={{ float: \"right\", marginBottom: \"10px\" }}\r\n          >\r\n            Submit KYC\r\n          </Button>\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default AccountInfoForm;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\KYCPage.js",["549","550"],"import React, { useEffect, useState } from \"react\";\r\nimport Spinner from \"../UI/Spinner\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Auth, API } from \"aws-amplify\";\r\nimport axios from \"axios\";\r\nimport { TextField, Grid, Button } from \"@material-ui/core\";\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    height: 50,\r\n    padding: 10,\r\n    paddingLeft: 55,\r\n    color: \"white\",\r\n  },\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n});\r\n\r\nconst CompanyKYC = (props) => {\r\n  const [report, setReport] = useState(null);\r\n  const [pan, setPan] = useState();\r\n  const [accountHolderName, setAccountHolderName] = useState();\r\n  const [accountNumber, setAccountNumber] = useState();\r\n  const [ifscCode, setIfscCode] = useState();\r\n  const [panProof, setPanProof] = useState();\r\n  const [panLink, setPanLink] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const [uploadsDone, setUploadsDone] = useState(true);\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    setReport({\r\n      status: \"pending\",\r\n      gstin: \"\",\r\n      pan: \"\",\r\n    });\r\n  }, []);\r\n\r\n  async function uploadPan() {\r\n    const metaData = {\r\n      contentType: panProof.type,\r\n    };\r\n    const payload = {\r\n      body: {\r\n        contentType: panProof.type,\r\n        metaData: metaData,\r\n      },\r\n    };\r\n    var initiateResult;\r\n    try {\r\n      initiateResult = await API.post(\r\n        \"GoFlexeOrderPlacement\",\r\n        \"/kyc/document?type=\" + \"customer\",\r\n        payload\r\n      );\r\n      axios\r\n        .put(initiateResult.s3PutObjectUrl, panProof, {\r\n          headers: {\r\n            \"Content-Type\": panProof.type,\r\n          },\r\n        })\r\n        .then((resp) => {\r\n          console.log(resp);\r\n          setPanLink(\r\n            `uploads/kycdocuments/${initiateResult.fileId}.${panProof.type}`\r\n          );\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setUploadsDone(false);\r\n        });\r\n    } catch (err) {\r\n      setPanLink(`fake/link/sinceDocUploadHasfailed`);\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const submitKYC = async () => {\r\n    // alert(pan+accountHolderName+accountNumber+ifscCode+panProof.name)\r\n    // setLoading(true)\r\n    await uploadPan();\r\n\r\n    if (uploadsDone === false) {\r\n      alert(\"Please Try Again\");\r\n      return;\r\n    }\r\n    const userDetails = await Auth.currentUserInfo();\r\n    const payload = {\r\n      body: {\r\n        id: userDetails.username,\r\n        type: \"customer\",\r\n        kycInformation: {\r\n          pan: pan,\r\n          accountHolderName: accountHolderName,\r\n          ifscCode: ifscCode,\r\n          panLink: panLink,\r\n          accountNumber: accountNumber,\r\n        },\r\n      },\r\n    };\r\n    await API.post(\"GoFlexeOrderPlacement\", \"/kyc/info\", payload)\r\n      .then((resp) => console.log(resp))\r\n      .catch((err) => console.log(err));\r\n\r\n    alert(\"Submitted Successfully\");\r\n    setLoading(false);\r\n  };\r\n\r\n  const onPanChange = (event) => {\r\n    setPan(event.target.value);\r\n  };\r\n  const onPanProofChange = (event) => {\r\n    setPanProof(event.target.files[0]);\r\n  };\r\n  const onAccountHolderNameChange = (event) => {\r\n    setAccountHolderName(event.target.value);\r\n  };\r\n  const onAccountNumberChange = (event) => {\r\n    setAccountNumber(event.target.value);\r\n  };\r\n  const onIfscCodeChange = (event) => {\r\n    setIfscCode(event.target.value);\r\n  };\r\n  if (report === null) {\r\n    return <Spinner />;\r\n  }\r\n  if (report.status !== \"pending\") {\r\n    return (\r\n      <div>\r\n        <Typography\r\n          fullWidth\r\n          className={classes.title}\r\n          gutterBottom\r\n          style={{ backgroundColor: \"#66bb6a\" }}\r\n        >\r\n          No Pending KYC\r\n        </Typography>\r\n      </div>\r\n    );\r\n  }\r\n  if (report.status === \"pending\") {\r\n    return (\r\n      <div style={{ overflow: \"hidden\" }}>\r\n        <Typography\r\n          fullWidth\r\n          className={classes.title}\r\n          gutterBottom\r\n          style={{ backgroundColor: \"#66bb6a\" }}\r\n        >\r\n          Pending KYC\r\n        </Typography>\r\n        <form>\r\n          <Typography className={classes.formHeadings}>PAN Details</Typography>\r\n\r\n          {/*test*/}\r\n          <Grid\r\n            container\r\n            spacing={3}\r\n            style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n          >\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                required\r\n                type=\"text\"\r\n                id=\"pan\"\r\n                name=\"pan\"\r\n                label=\"Enter PAN\"\r\n                fullWidth\r\n                value={pan}\r\n                onChange={(event) => onPanChange(event)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Typography className={classes.formHeadings}>\r\n            Account Details\r\n          </Typography>\r\n          <Grid\r\n            container\r\n            spacing={3}\r\n            style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n          >\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                type=\"text\"\r\n                id=\"accountHolderName\"\r\n                name=\"accountHolderName\"\r\n                label=\"Account Holder's Name\"\r\n                fullWidth\r\n                value={accountHolderName}\r\n                onChange={(event) => onAccountHolderNameChange(event)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                type=\"text\"\r\n                id=\"accountNumber\"\r\n                name=\"accountNumber\"\r\n                label=\"Account Number\"\r\n                fullWidth\r\n                value={accountNumber}\r\n                onChange={(event) => onAccountNumberChange(event)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                type=\"text\"\r\n                id=\"ifscCode\"\r\n                name=\"ifscCode\"\r\n                label=\"IFSC Code\"\r\n                fullWidth\r\n                value={ifscCode}\r\n                onChange={(event) => onIfscCodeChange(event)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}></Grid>\r\n            <Typography className={classes.formHeadings}>\r\n              Documents Upload\r\n            </Typography>\r\n            <Grid\r\n              container\r\n              spacing={3}\r\n              style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n            >\r\n              <Grid item xs={12}>\r\n                <label>Pan Proof: </label>\r\n                <input\r\n                  style={{ marginLeft: \"15px\" }}\r\n                  type=\"file\"\r\n                  onChange={(event) => onPanProofChange(event)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Button\r\n            onClick={submitKYC}\r\n            className=\"row\"\r\n            variant=\"contained\"\r\n            style={{\r\n              float: \"right\",\r\n              backgroundColor: \"#f9a825\",\r\n              marginBottom: \"10px\",\r\n            }}\r\n          >\r\n            Submit KYC\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default CompanyKYC;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\CompanyKycPanel.js",["551","552","553","554","555","556","557"],"import React, { useEffect, useState } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nimport CompanyKYCForm from \"./CompanyKYCForm\";\r\nimport IndexCompanyDetails from \"./CompanyDetails/IndexCompanyDetails\";\r\nimport FormCompanyDetails from \"./CompanyDetails/FormCompanyDetails\";\r\nimport TaxForm from \"./TaxDetails/TaxForm\";\r\nimport TaxIndex from \"./TaxDetails/TaxIndex\";\r\nimport AccountInfoForm from \"./AccountDetails/AccountForm\";\r\nimport AccountIndex from \"./AccountDetails/AccountIndex\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nimport { Button, Card, Grid, IconButton } from \"@material-ui/core\";\r\nimport Done from \"@material-ui/icons/Done\";\r\nimport WarningIcon from \"@material-ui/icons/Warning\";\r\n\r\nimport { Auth, API } from \"aws-amplify\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n}));\r\n\r\nconst KYCPanel = () => {\r\n  const classes = useStyles();\r\n  const [pressed, setPressed] = useState(true);\r\n  const [page, setPage] = useState(\"\");\r\n  const [loading, setLoading] = useState(\"true\");\r\n  const [companyDetails, setCompanyDetails] = useState(null);\r\n  const [taxDetails, setTaxDetails] = useState(null);\r\n  const [accountDetails, setAccountDetails] = useState(null);\r\n\r\n  function loadData() {\r\n    setLoading(\"true\");\r\n    Auth.currentUserInfo()\r\n      .then((userDetails) => {\r\n        API.get(\r\n          \"GoFlexeOrderPlacement\",\r\n          `/kyc/info?type=customer&id=${userDetails.username}`\r\n        )\r\n          .then((resp) => {\r\n            console.log(resp);\r\n            if (resp.length === 0) {\r\n              setCompanyDetails(null);\r\n              setTaxDetails(null);\r\n              setAccountDetails(null);\r\n            } else {\r\n              if (resp[0].companyInfo !== undefined) {\r\n                setCompanyDetails(resp[0].companyInfo);\r\n              }\r\n              if (resp[0].accountInfo !== undefined) {\r\n                setAccountDetails(resp[0].accountInfo);\r\n              }\r\n              if (resp[0].taxInfo !== undefined) {\r\n                setTaxDetails(resp[0].taxInfo);\r\n              }\r\n              //setCompanyDetails(resp[0].)\r\n              //setRows(resp[0].trucks)\r\n            }\r\n            setLoading(\"false\");\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n            setLoading(\"error\");\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setLoading(\"error\");\r\n      });\r\n  }\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  const press = () => {\r\n    setPressed(!pressed);\r\n  };\r\n  const changePage = (page) => {\r\n    setPage(page);\r\n  };\r\n\r\n  const displayPanel = (\r\n    <div className={classes.root}>\r\n      <Accordion>\r\n        <Tooltip\r\n          title=\"Enter Registered name and address of your company.\"\r\n          placement=\"top\"\r\n        >\r\n          <AccordionSummary\r\n            style={{\r\n              backgroundColor: \"rgba(0, 0, 0, .03)\",\r\n              borderBottom: \"1px solid rgba(0, 0, 0, .125)\",\r\n            }}\r\n            expandIcon={<ExpandMoreIcon />}\r\n            aria-controls=\"panel1bh-content\"\r\n            id=\"panel1bh-header\"\r\n          >\r\n            <Typography\r\n              fullWidth\r\n              className={classes.title}\r\n              gutterBottom\r\n              inline\r\n              variant=\"body1\"\r\n              align=\"left\"\r\n            >\r\n              Company Info{\" \"}\r\n              {companyDetails !== null ? (\r\n                <Tooltip title=\"Done\">\r\n                  <Done style={{ color: \"green\" }} />\r\n                </Tooltip>\r\n              ) : (\r\n                <Tooltip title=\"Pending\">\r\n                  <WarningIcon style={{ color: \"orange\" }} />\r\n                </Tooltip>\r\n              )}\r\n            </Typography>\r\n          </AccordionSummary>\r\n        </Tooltip>\r\n        <AccordionDetails>\r\n          <Typography>\r\n            {companyDetails === null ? (\r\n              <FormCompanyDetails loadData={loadData} />\r\n            ) : (\r\n              <IndexCompanyDetails\r\n                companyDetails={companyDetails}\r\n                changePage={changePage}\r\n              />\r\n            )}\r\n          </Typography>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n\r\n      <Accordion>\r\n        <Tooltip title=\"Enter PAN and GST number of registered company.\">\r\n          <AccordionSummary\r\n            style={{\r\n              backgroundColor: \"rgba(0, 0, 0, .03)\",\r\n              borderBottom: \"1px solid rgba(0, 0, 0, .125)\",\r\n            }}\r\n            expandIcon={<ExpandMoreIcon />}\r\n            aria-controls=\"panel1bh-content\"\r\n            id=\"panel1bh-header\"\r\n          >\r\n            <Typography\r\n              fullWidth\r\n              className={classes.title}\r\n              gutterBottom\r\n              inline\r\n              variant=\"body1\"\r\n              align=\"left\"\r\n            >\r\n              Tax Info{\" \"}\r\n              {taxDetails !== null ? (\r\n                <Tooltip title=\"Done\">\r\n                  <Done style={{ color: \"green\" }} />\r\n                </Tooltip>\r\n              ) : (\r\n                <Tooltip title=\"Pending\">\r\n                  <WarningIcon style={{ color: \"orange\" }} />\r\n                </Tooltip>\r\n              )}\r\n            </Typography>\r\n          </AccordionSummary>\r\n        </Tooltip>\r\n        <AccordionDetails>\r\n          <Typography>\r\n            {taxDetails === null ? (\r\n              <TaxForm loadData={loadData} />\r\n            ) : (\r\n              <TaxIndex taxDetails={taxDetails} changePage={changePage} />\r\n            )}\r\n          </Typography>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n      <Accordion>\r\n        <Tooltip title=\"Enter Bank account details\">\r\n          <AccordionSummary\r\n            style={{\r\n              backgroundColor: \"rgba(0, 0, 0, .03)\",\r\n              borderBottom: \"1px solid rgba(0, 0, 0, .125)\",\r\n            }}\r\n            expandIcon={<ExpandMoreIcon />}\r\n            aria-controls=\"panel1bh-content\"\r\n            id=\"panel1bh-header\"\r\n          >\r\n            <Typography\r\n              fullWidth\r\n              className={classes.title}\r\n              gutterBottom\r\n              //style={{ backgroundColor: \"#DCDCDC\", color: \"#3f51b5\" }}\r\n              inline\r\n              variant=\"body1\"\r\n              align=\"left\"\r\n            >\r\n              Account Info{\" \"}\r\n              {accountDetails !== null ? (\r\n                <Tooltip title=\"Done\">\r\n                  <Done style={{ color: \"green\" }} />\r\n                </Tooltip>\r\n              ) : (\r\n                <Tooltip title=\"Pending\">\r\n                  <WarningIcon style={{ color: \"orange\" }} />\r\n                </Tooltip>\r\n              )}\r\n            </Typography>\r\n          </AccordionSummary>\r\n        </Tooltip>\r\n        <AccordionDetails>\r\n          <Typography>\r\n            {accountDetails === null ? (\r\n              <AccountInfoForm loadData={loadData} />\r\n            ) : (\r\n              <AccountIndex\r\n                accountDetails={accountDetails}\r\n                changePage={changePage}\r\n              />\r\n            )}\r\n          </Typography>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* <Button onClick={() => press()}>press</Button> */}\r\n      {pressed && displayPanel}\r\n      {!pressed && <CompanyKYCForm />}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default KYCPanel;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Payments\\PaymentIndex.js",["558","559"],"import React, { useEffect, useState } from \"react\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Upload from \"./Upload/Upload\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Auth, API } from \"aws-amplify\";\r\nimport Spinner from \"../UI/Spinner\";\r\nimport {\r\n  Select,\r\n  InputLabel,\r\n  MenuItem,\r\n  Grid,\r\n  Card,\r\n  FormHelperText,\r\n  Divider,\r\n  TextField,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport ShowDetails from \"./ShowDetails\";\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    height: 50,\r\n    padding: 10,\r\n    paddingLeft: 55,\r\n    //color: 'white',\r\n    borderBottomStyle: \"solid\",\r\n    borderWidth: \"1px\",\r\n  },\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n  formControl: {\r\n    //margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n});\r\n\r\n// {\r\n//   \"queryStringParameters\": {\r\n//     \"orderId\": \"154\"\r\n//   },\r\n//   \"httpMethod\": \"POST\",\r\n//   \"body\": {\r\n//     \"invokeType\": \"external\",\r\n//     \"orderId\": \"154\",\r\n//     \"totalAmount\": \"1200\",\r\n//     \"paymentOption\": \"partialPayment\",\r\n//     \"paymentMode\": \"accountTransfer\",\r\n//     \"paymentModeDetails\": {\r\n//       \"referenceId\": \"idMe\"\r\n//     },\r\n//     \"paymentOptionDetails\": {\r\n//       \"paymentRatio\": 30\r\n//     }\r\n//   }\r\n// }\r\n\r\nconst PaymentIndex = (props) => {\r\n  const classes = useStyles();\r\n  const [paymentOption, setPaymentOption] = useState(\"fullPayment\");\r\n  //const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [paymentRatio, setPaymentRatio] = useState(\"50-50\");\r\n  const [paymentMode, setPaymentMode] = useState(\"accountTransfer\");\r\n  const [data, setData] = useState(null);\r\n  const [referenceId, setReferenceId] = useState();\r\n  const [nameOfPayer, setNameOfPayer] = useState();\r\n  const [phoneOfPayer, setPhoneOfPayer] = useState();\r\n  // const [fetchData,setFetchData] = useState(0);\r\n\r\n  const handlePaymentOptionChange = (event) => {\r\n    setPaymentOption(event.target.value);\r\n    //alert(event.target.value);\r\n  };\r\n  const handleRatioChange = (event) => {\r\n    setPaymentRatio(event.target.value);\r\n  };\r\n  const handlePaymentMode = (event) => {\r\n    setPaymentMode(event.target.value);\r\n    // alert(event.target.value)\r\n  };\r\n\r\n  /**Payment Submit functions */\r\n\r\n  const handleAccountTransfer = () => {\r\n    var paymentModeDetails;\r\n    if (paymentOption === \"fullPayment\") {\r\n      paymentModeDetails = {\r\n        referenceId: referenceId,\r\n      };\r\n    } else if (paymentOption === \"partialPayment\") {\r\n      paymentModeDetails = {\r\n        referenceId: referenceId,\r\n        paymentRatio: paymentRatio,\r\n      };\r\n    } else if (paymentOption === \"CreditBased\") {\r\n      paymentModeDetails = {\r\n        referenceId: referenceId,\r\n        paymentDelay: paymentRatio,\r\n      };\r\n    } else if (paymentOption === \"Subscription\") {\r\n      paymentModeDetails = {\r\n        referenceId: referenceId,\r\n        paymentCycle: paymentRatio,\r\n      };\r\n    }\r\n    const toSendData = {\r\n      paymentOption: paymentOption,\r\n      paymentMode: paymentMode,\r\n      orderId: props.orderId,\r\n      paymentModeDetails: paymentModeDetails,\r\n    };\r\n    const payload = {\r\n      body: toSendData,\r\n    };\r\n    API.post(\"GoFlexeOrderPlacement\", `/customer-payments`, payload)\r\n      .then((resp) => {\r\n        console.log(resp);\r\n        setData({\r\n          paymentId: resp.new.paymentId,\r\n          paymentMode: resp.new.paymentMode,\r\n          paymentOption:\r\n            resp.new.paymentOption === undefined\r\n              ? null\r\n              : resp.new.paymentOption,\r\n          totalAmount: resp.new.totalAmount,\r\n          paymentModeDetails: resp.new.paymentModeDetails,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.response);\r\n      });\r\n  };\r\n\r\n  const handleCashTransfer = () => {\r\n    var paymentModeDetails = null;\r\n\r\n    if (paymentOption === \"fullPayment\") {\r\n      paymentModeDetails = {\r\n        nameOfPayer: nameOfPayer,\r\n        phoneOfPayer: phoneOfPayer,\r\n      };\r\n    } else if (paymentOption === \"partialPayment\") {\r\n      paymentModeDetails = {\r\n        paymentRatio: paymentRatio,\r\n        nameOfPayer: nameOfPayer,\r\n        phoneOfPayer: phoneOfPayer,\r\n      };\r\n    } else if (paymentOption === \"CreditBased\") {\r\n      paymentModeDetails = {\r\n        paymentDelay: paymentRatio,\r\n        nameOfPayer: nameOfPayer,\r\n        phoneOfPayer: phoneOfPayer,\r\n      };\r\n    } else if (paymentOption === \"Subscription\") {\r\n      paymentModeDetails = {\r\n        paymentCycle: paymentRatio,\r\n        nameOfPayer: nameOfPayer,\r\n        phoneOfPayer: phoneOfPayer,\r\n      };\r\n    }\r\n    const toSendData = {\r\n      paymentOption: paymentOption,\r\n      paymentMode: paymentMode,\r\n      orderId: props.orderId,\r\n      paymentModeDetails: paymentModeDetails,\r\n    };\r\n    const payload = {\r\n      body: toSendData,\r\n    };\r\n    API.post(\"GoFlexeOrderPlacement\", `/customer-payments`, payload)\r\n      .then((resp) => {\r\n        console.log(resp);\r\n        setData({\r\n          paymentModeDetails: resp.new.paymentModeDetails,\r\n          paymentId: resp.new.paymentId,\r\n          paymentMode: resp.new.paymentMode,\r\n          paymentOption:\r\n            resp.new.paymentOption === undefined\r\n              ? null\r\n              : resp.new.paymentOption,\r\n          totalAmount: resp.new.totalAmount,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.response);\r\n      });\r\n  };\r\n\r\n  /** */\r\n\r\n  useEffect(() => {\r\n    //alert(props.orderId)\r\n    if (props.orderId) {\r\n      var param = `?orderId=${props.orderId}`;\r\n      API.get(\"GoFlexeOrderPlacement\", `/customer-payments` + param)\r\n        .then((resp) => {\r\n          console.log(resp);\r\n          setData({\r\n            paymentId: resp.paymentId,\r\n            paymentMode: resp.paymentMode,\r\n            paymentOption:\r\n              resp.paymentOption === undefined ? null : resp.paymentOption,\r\n            totalAmount: resp.totalAmount,\r\n            paymentModeDetails: resp.paymentModeDetails,\r\n          });\r\n          setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          setLoading(false);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  //   /\r\n  //   /\r\n  //   /\r\n  //   /\r\n  //   /\r\n  //   /\r\n  //   /\r\n  //  If Not Paid\r\n  // /\r\n  // /\r\n  // /\r\n  // /\r\n  // /\r\n\r\n  const fullPayToAccountDashboard = (\r\n    <React.Fragment>\r\n      <Card style={{ padding: 10 }}>\r\n        <Typography style={{ fontSize: 20, marginBottom: 20 }}>\r\n          Total Amount to be paid: {data !== null ? data.totalAmount : \"x\"} INR\r\n        </Typography>\r\n        {/* <HelpIcon /> */}\r\n        <Typography style={{ fontSize: 18, marginBottom: 8 }}>\r\n          Account Details -\r\n        </Typography>\r\n        <div className=\"row\" style={{ fontSize: 16, marginBottom: 20 }}>\r\n          <div className=\"col col-xs-12 col-sm-6\" style={{ marginBottom: 6 }}>\r\n            Account No: 7814289632\r\n            <Tooltip\r\n              title=\"Beneficiary’s account number, make the payment to this account.\"\r\n              placement=\"top-start\"\r\n            >\r\n              <InfoIcon style={{ color: \"lightgrey\" }} fontSize=\"small\" />\r\n            </Tooltip>\r\n          </div>\r\n          <div className=\"col col-xs-12 col-sm-8\" style={{ paddingBottom: 10 }}>\r\n            Account Holder's Name: GoFlexe Ltd.{\" \"}\r\n            <Tooltip\r\n              title=\"Beneficiary’s account name, make the payment to this account.\"\r\n              placement=\"top-start\"\r\n            >\r\n              <InfoIcon style={{ color: \"lightgrey\" }} fontSize=\"small\" />\r\n            </Tooltip>\r\n          </div>\r\n\r\n          <div className=\"col col-xs-12 col-sm-6\">Bank Name: Yes Bank</div>\r\n          <div className=\"col col-xs-12 col-sm-6\">\r\n            IFSC: BNK0123456{\" \"}\r\n            <Tooltip\r\n              title=\"IFSC is short for Indian Financial System Code, represented by an 11 digit character.\"\r\n              placement=\"top-start\"\r\n            >\r\n              <InfoIcon style={{ color: \"lightgrey\" }} fontSize=\"small\" />\r\n            </Tooltip>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div>\r\n            <p\r\n              style={{\r\n                marginLeft: 20,\r\n                marginRight: 8,\r\n                marginTop: 8,\r\n                fontSize: 18,\r\n              }}\r\n            >\r\n              Reference Id:\r\n            </p>\r\n          </div>\r\n          <div>\r\n            <Tooltip title=\"Transaction Id for the payment you have done\">\r\n              <TextField\r\n                variant=\"outlined\"\r\n                id=\"standard-size-small\"\r\n                size=\"small\"\r\n                value={referenceId}\r\n                onChange={(event) => setReferenceId(event.target.value)}\r\n              />\r\n            </Tooltip>\r\n          </div>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"flex-end\",\r\n            margin: 20,\r\n          }}\r\n        >\r\n          <Button\r\n            className=\"AllButtons\"\r\n            variant=\"contained\"\r\n            // style={{backgroundColor:'#FF8C00'}}\r\n            onClick={() => handleAccountTransfer()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </div>\r\n        <Divider style={{ marginBottom: 20 }} />\r\n        <p>\r\n          Note:Please submit the amount in the following account and paste the\r\n          Reference Id of the transaction in the textbox given above\r\n        </p>\r\n      </Card>\r\n     \r\n    </React.Fragment>\r\n  );\r\n\r\n  const cashPayment = (\r\n    <React.Fragment>\r\n      <Card style={{ padding: 10 }}>\r\n        <Typography style={{ fontSize: 20, marginBottom: 20 }}>\r\n          Total Amount to be paid: {data !== null ? data.totalAmount : \"x\"} INR\r\n        </Typography>\r\n        {/* <HelpIcon /> */}\r\n        <Typography style={{ marginBottom: 10 }}>\r\n          Please provide the name and contact details of the payer\r\n        </Typography>\r\n        <div className=\"row\">\r\n          <div>\r\n            <p\r\n              style={{\r\n                marginLeft: 20,\r\n                marginRight: 8,\r\n                marginTop: 8,\r\n                fontSize: 18,\r\n              }}\r\n            >\r\n              Name:\r\n            </p>\r\n          </div>\r\n          <div>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              id=\"standard-size-small\"\r\n              size=\"small\"\r\n              value={nameOfPayer}\r\n              onChange={(event) => setNameOfPayer(event.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div>\r\n            <p\r\n              style={{\r\n                marginLeft: 20,\r\n                marginRight: 8,\r\n                marginTop: 8,\r\n                fontSize: 18,\r\n              }}\r\n            >\r\n              Phone:\r\n            </p>\r\n          </div>\r\n          <div>\r\n            <TextField\r\n              type=\"number\"\r\n              variant=\"outlined\"\r\n              id=\"standard-size-small\"\r\n              size=\"small\"\r\n              value={phoneOfPayer}\r\n              onChange={(event) => setPhoneOfPayer(event.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"flex-end\",\r\n            margin: 20,\r\n          }}\r\n        >\r\n          <Button\r\n            variant=\"contained\"\r\n            style={{ backgroundColor: \"#FF8C00\" }}\r\n            onClick={() => handleCashTransfer()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </div>\r\n\r\n        <Divider style={{ marginBottom: 20 }} />\r\n        <p>\r\n          Note:Please hand over the cash to the delivery personnel at the time\r\n          of delivery\r\n        </p>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const OthersPayment = (\r\n    <React.Fragment>\r\n      <Card style={{ padding: 10 }}>\r\n        <Typography style={{ fontSize: 20, marginBottom: 20 }}>\r\n          Total Amount to be paid: {data !== null ? data.totalAmount : \"x\"} INR\r\n        </Typography>\r\n        {/* <HelpIcon /> */}\r\n        <Upload\r\n          setData={setData}\r\n          orderId={props.orderId}\r\n          paymentOption={paymentOption}\r\n          paymentMode={paymentMode}\r\n          paymentRatio={paymentRatio}\r\n        />\r\n\r\n        <Divider style={{ marginBottom: 20, marginTop: 20 }} />\r\n        <p>\r\n          Note:Please upload a picture / screenshot of payment via UPI or\r\n          Cheque.\r\n        </p>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const content = (\r\n    <Card className={classes.root}>\r\n      <CardContent style={{ padding: 0 }}>\r\n        <Typography className={classes.title} gutterBottom>\r\n          Payment\r\n        </Typography>\r\n        <form style={{ padding: 10 }}>\r\n          <FormControl component=\"fieldset\">\r\n            <RadioGroup\r\n              row\r\n              style={{ width: \"auto\" }}\r\n              aria-label=\"position\"\r\n              name=\"position\"\r\n              onChange={(event) => handlePaymentOptionChange(event)}\r\n              value={paymentOption}\r\n            >\r\n              <FormLabel component=\"legend\">\r\n                Selected payment Promise:\r\n              </FormLabel>\r\n              <Grid\r\n                container\r\n                spacing={0}\r\n                style={{ padding: 20, paddingBottom: 30 }}\r\n              >\r\n                <Grid item xs={12} sm={6}>\r\n                  <FormControlLabel\r\n                    value=\"ImmediatePayment\"\r\n                    control={<Radio color=\"primary\" />}\r\n                    label=\"Immediate Payment\"\r\n                  />\r\n                  {paymentOption === \"ImmediatePayment\" && (\r\n                    <FormHelperText>\r\n                      For Immediate Payment, We will do negotitation on your\r\n                      behalf to give you a discounted price.\r\n                    </FormHelperText>\r\n                  )}\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <FormControlLabel\r\n                    value=\"30DaysCycle\"\r\n                    control={<Radio color=\"primary\" />}\r\n                    label=\"30 Days Cycle\"\r\n                  />\r\n                  {paymentOption === \"30DaysCycle\" && (\r\n                    <FormHelperText>Pay in 30 Days.</FormHelperText>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n            </RadioGroup>\r\n          </FormControl>\r\n        </form>\r\n        <form style={{ padding: 10 }}>\r\n          <FormControl component=\"fieldset\">\r\n            <RadioGroup\r\n              row\r\n              style={{ width: \"auto\" }}\r\n              aria-label=\"position\"\r\n              name=\"position\"\r\n              onChange={(event) => handlePaymentOptionChange(event)}\r\n              value={paymentOption}\r\n            >\r\n              <FormLabel component=\"legend\">\r\n                Choose your payment option:\r\n              </FormLabel>\r\n              <Grid\r\n                container\r\n                spacing={0}\r\n                style={{ padding: 20, paddingBottom: 30 }}\r\n              >\r\n                <Grid item xs={12} sm={3}>\r\n                  <FormControlLabel\r\n                    value=\"fullPayment\"\r\n                    control={<Radio color=\"primary\" />}\r\n                    label=\"Full Payment\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={3}>\r\n                  <FormControlLabel\r\n                    value=\"partialPayment\"\r\n                    control={<Radio color=\"primary\" />}\r\n                    label=\"Partial Payment\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={3}>\r\n                  <FormControlLabel\r\n                    value=\"CreditBased\"\r\n                    control={<Radio color=\"primary\" />}\r\n                    label=\"Credit Based\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={3}>\r\n                  <FormControlLabel\r\n                    value=\"Subscription\"\r\n                    control={<Radio color=\"primary\" />}\r\n                    label=\"Subscription\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  {paymentOption === \"fullPayment\" && (\r\n                    <FormHelperText>\r\n                      Make the full payment of your order.\r\n                      <br />\r\n                      Choose the most suitable payment mode.\r\n                    </FormHelperText>\r\n                  )}\r\n                  {paymentOption === \"partialPayment\" && (\r\n                    <FormHelperText>\r\n                      Make some of the payment now and the dues at time of\r\n                      delivery.\r\n                      <br />\r\n                      Choose the most suitable payment method.\r\n                    </FormHelperText>\r\n                  )}\r\n                  {paymentOption === \"CreditBased\" && (\r\n                    <FormHelperText>\r\n                      Make your payment after a few days.\r\n                      <br />\r\n                      Choose the most suitable payment method.\r\n                    </FormHelperText>\r\n                  )}\r\n                  {paymentOption === \"Subscription\" && (\r\n                    <FormHelperText>\r\n                      Take a subscription plan and pay weekly or monthly.\r\n                      <br />\r\n                      Choose the most suitable payment method.\r\n                    </FormHelperText>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n            </RadioGroup>\r\n          </FormControl>\r\n\r\n          <Divider style={{ marginBottom: 20 }} />\r\n          {paymentOption === \"CreditBased\" && (\r\n            <FormControl\r\n              style={{ marginLeft: 50 }}\r\n              className={classes.formControl}\r\n            >\r\n              <InputLabel id=\"demo-simple-select-label\">\r\n                Payment Delay\r\n              </InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                value={paymentRatio}\r\n                onChange={handleRatioChange}\r\n                //   value={age}\r\n                //   onChange={handleChange}\r\n              >\r\n                <MenuItem value=\"7 Days\">7 Days</MenuItem>\r\n                <MenuItem value=\"30 Days\">30 Days</MenuItem>\r\n                <MenuItem value=\"45 Days\">45 Days</MenuItem>\r\n              </Select>\r\n              {paymentRatio === \"45 Days\" && (\r\n                <FormHelperText>Pay the total amount in 45 Days</FormHelperText>\r\n              )}\r\n              {paymentRatio === \"30 Days\" && (\r\n                <FormHelperText>Pay the total amount in 30 Days</FormHelperText>\r\n              )}\r\n              {paymentRatio === \"7 Days\" && (\r\n                <FormHelperText>Pay the total amount in 7 Days</FormHelperText>\r\n              )}\r\n            </FormControl>\r\n          )}\r\n          {paymentOption === \"Subscription\" && (\r\n            <FormControl\r\n              style={{ marginLeft: 50 }}\r\n              className={classes.formControl}\r\n            >\r\n              <InputLabel id=\"demo-simple-select-label\">\r\n                Payment Cycle\r\n              </InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                value={paymentRatio}\r\n                onChange={handleRatioChange}\r\n                //   value={age}\r\n                //   onChange={handleChange}\r\n              >\r\n                <MenuItem value=\"Monthly\">Monthly</MenuItem>\r\n                <MenuItem value=\"Weekly\">Weekly</MenuItem>\r\n              </Select>\r\n              {paymentRatio === \"Monthly\" && (\r\n                <FormHelperText>Pay each Month</FormHelperText>\r\n              )}\r\n              {paymentRatio === \"Weekly\" && (\r\n                <FormHelperText>Pay each Week</FormHelperText>\r\n              )}\r\n            </FormControl>\r\n          )}\r\n          {paymentOption === \"partialPayment\" && (\r\n            <FormControl\r\n              style={{ marginLeft: 50 }}\r\n              className={classes.formControl}\r\n            >\r\n              <InputLabel id=\"demo-simple-select-label\">\r\n                Payment Ratio\r\n              </InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                value={paymentRatio}\r\n                onChange={handleRatioChange}\r\n                //   value={age}\r\n                //   onChange={handleChange}\r\n              >\r\n                <MenuItem value=\"10%\">10%</MenuItem>\r\n                <MenuItem value=\"30%\">30%</MenuItem>\r\n                <MenuItem value=\"50%\">50%</MenuItem>\r\n              </Select>\r\n              {paymentRatio === \"50%\" && (\r\n                <FormHelperText>\r\n                  Pay 50% now and 50%\r\n                  <br /> at time of delivery\r\n                </FormHelperText>\r\n              )}\r\n              {paymentRatio === \"30%\" && (\r\n                <FormHelperText>\r\n                  Pay 30% now and 70%\r\n                  <br /> at time of delivery\r\n                </FormHelperText>\r\n              )}\r\n              {paymentRatio === \"10%\" && (\r\n                <FormHelperText>\r\n                  Pay 10% now and 90%\r\n                  <br /> at time of delivery\r\n                </FormHelperText>\r\n              )}\r\n            </FormControl>\r\n          )}\r\n          <Grid\r\n            container\r\n            spacing={3}\r\n            style={{ padding: 50, paddingTop: 20, paddingBottom: 30 }}\r\n          >\r\n            <Grid item xs={12} sm={4}>\r\n              <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\">\r\n                  Choose your payment mode\r\n                </FormLabel>\r\n                <RadioGroup\r\n                  aria-label=\"gender\"\r\n                  name=\"gender1\"\r\n                  value={paymentMode}\r\n                  onChange={handlePaymentMode}\r\n                >\r\n                  <Tooltip\r\n                    title=\"Through electronic funds transfer, you can now transfer the required amount in our bank via RTGS/NEFT or net banking.\"\r\n                    placement=\"left\"\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"accountTransfer\"\r\n                      control={<Radio color=\"primary\" />}\r\n                      label=\"Account Transfer\"\r\n                    />\r\n                  </Tooltip>\r\n                  <Tooltip\r\n                    title=\"Pay in cash at the time of delivery.\"\r\n                    placement=\"left\"\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"cash\"\r\n                      control={<Radio color=\"primary\" />}\r\n                      label=\"Cash\"\r\n                    />\r\n                  </Tooltip>\r\n                  <Tooltip\r\n                    title=\"Make payment through your desired method (eg. UPI, cheque, etc.) and provide us with a proof of transaction. \"\r\n                    placement=\"left\"\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"Others\"\r\n                      control={<Radio color=\"primary\" />}\r\n                      label=\"Others\"\r\n                    />\r\n                  </Tooltip>\r\n                </RadioGroup>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} sm={8}>\r\n              {paymentMode === \"accountTransfer\" && fullPayToAccountDashboard}\r\n              {paymentMode === \"cash\" && cashPayment}\r\n              {paymentMode === \"Others\" && OthersPayment}\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </CardContent>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"flex-end\",\r\n          margin: 20,\r\n        }}\r\n      ></div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"flex-end\",\r\n          margin: 20,\r\n        }}\r\n      >\r\n        <Link to=\"/\" className=\"btn btn-primary\">\r\n          <Button\r\n            className=\"AllButtons\"\r\n            variant=\"contained\"\r\n            // style={{backgroundColor:'#FF8C00'}}\r\n            // onClick={() => handleAccountTransfer()}\r\n          >\r\n            Pay Later\r\n          </Button>\r\n        </Link>\r\n      </div>\r\n    </Card>\r\n  );\r\n\r\n  if (loading === true) {\r\n    return <Spinner />;\r\n  }\r\n  if (data !== null && data.paymentOption !== null) {\r\n    return <ShowDetails data={data} />;\r\n  }\r\n  return <div>{content}</div>;\r\n};\r\nexport default PaymentIndex;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\PriceCalculator\\PriceCalculator.js",["560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","576","577","578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport constants from \"../../Constants/constants\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Spinner from \"../UI/Spinner\";\r\nimport CreatableSelect from \"react-select/creatable\";\r\nimport Select from \"react-select\";\r\nimport { connect } from \"react-redux\";\r\nimport { InputAdornment } from \"@material-ui/core\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { Redirect, withRouter } from \"react-router-dom\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport \"../../Globalcss/globalcss.css\";\r\nimport {\r\n  TextField,\r\n  Checkbox,\r\n  Grid,\r\n  Select as MaterialSelect,\r\n  Card,\r\n  Button,\r\n  IconButton,\r\n  FormControl,\r\n  InputLabel,\r\n  Divider,\r\n  FormControlLabel,\r\n  Switch,\r\n} from \"@material-ui/core\";\r\nimport { Auth, API } from \"aws-amplify\";\r\nimport { Multiselect } from \"multiselect-react-dropdown\";\r\n// import Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    // minHeight:900\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    height: 50,\r\n    padding: 10,\r\n    paddingLeft: 55,\r\n    borderBottomStyle: \"solid\",\r\n    borderWidth: \"1px\",\r\n  },\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n  formControl: {\r\n    marginTop: \"1%\",\r\n    width: \"50%\",\r\n  },\r\n});\r\nconst AntSwitch = withStyles((theme) => ({\r\n  root: {\r\n    width: 28,\r\n    height: 16,\r\n    padding: 0,\r\n    display: \"flex\",\r\n  },\r\n  switchBase: {\r\n    padding: 2,\r\n    color: theme.palette.grey[500],\r\n    \"&$checked\": {\r\n      transform: \"translateX(12px)\",\r\n      color: theme.palette.common.white,\r\n      \"& + $track\": {\r\n        opacity: 1,\r\n        backgroundColor: theme.palette.primary.main,\r\n        borderColor: theme.palette.primary.main,\r\n      },\r\n    },\r\n  },\r\n  thumb: {\r\n    width: 12,\r\n    height: 12,\r\n    boxShadow: \"none\",\r\n  },\r\n  track: {\r\n    border: `1px solid ${theme.palette.grey[500]}`,\r\n    borderRadius: 16 / 2,\r\n    opacity: 1,\r\n    backgroundColor: theme.palette.common.white,\r\n  },\r\n  checked: {},\r\n}))(Switch);\r\nconst PriceCalculator = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const [user, setUser] = useState();\r\n  const [allProducts, setAllProducts] = useState([]);\r\n  const [chosenProducts, setChosenProducts] = useState([null]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [calculating, setCalculating] = useState(false);\r\n  const [showPrice, setShowPrice] = useState(false);\r\n  const [estimatedPrice, setEstimatedPrice] = useState(null);\r\n  const [pickuppin, setpickuppin] = useState();\r\n  const [destinationpin, setdestinationpin] = useState();\r\n  const [pickupZipValidator, setPickupZipValidator] = useState(\"\");\r\n  const [deliverZipValidator, setDeliverZipValidator] = useState(\"\");\r\n  const [negativeValueValidator, setnegativeValueValidator] = useState(\"\");\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [PickupData, setPickupData] = useState([]);\r\n  const [DeliveryData, setDeliveryData] = useState([]);\r\n  const [pickupArea, setPickupArea] = useState(\"\");\r\n  const [deliveryArea, setDeliveryArea] = useState(\"\");\r\n\r\n  const capabilityOptions = {\r\n    options: constants.inventoryFeatures,\r\n  };\r\n  const selectStyles = {\r\n    menu: (base) => ({\r\n      ...base,\r\n      zIndex: 100,\r\n    }),\r\n  };\r\n  const onDistanceChangeController = (event) => {\r\n    props.setDistanceRange(event);\r\n  };\r\n\r\n  useEffect(() => {\r\n    Auth.currentUserInfo()\r\n      .then((user) => {\r\n        setUser(user);\r\n        API.get(\r\n          \"GoFlexeOrderPlacement\",\r\n          `/inventory?type=owner&ownerId=${user.username}`\r\n        )\r\n          .then((response) => {\r\n            // Add your code here\r\n            //setAllProducts(response)\r\n\r\n            var items = allProducts.slice();\r\n            //console.log(Array.isArray(response))\r\n            for (var i = 0; i < response.length; i++) {\r\n              items.push({\r\n                productId: response[i].productId,\r\n                label: response[i].productName,\r\n                value: response[i],\r\n                isNew: false,\r\n              });\r\n            }\r\n            setAllProducts(items);\r\n            console.log(items);\r\n            setLoading(false);\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n            setLoading(false);\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {}, []);\r\n  const emptyPinValidator = (string) => {\r\n    if (string === \"\" || string == null) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const onDestinationZipChangeController = (event) => {\r\n    var destinationPinCode = parseInt(event.target.value, 10);\r\n    var greater = 999999,\r\n      smaller = 100000;\r\n    var check = 1;\r\n    var count = 0,\r\n      temp = destinationPinCode;\r\n    while (temp > 0) {\r\n      count++;\r\n      temp = Math.floor(temp / 10);\r\n    }\r\n    if (count == 6) {\r\n      const api_url =\r\n        \"https://api.postalpincode.in/pincode/\" + destinationPinCode;\r\n\r\n      // Defining async function\r\n      async function getapi(url) {\r\n        // Storing response\r\n\r\n        const response = await fetch(url);\r\n\r\n        // Storing data in form of JSON\r\n        var data = await response.json();\r\n        console.log(data);\r\n        setDeliveryData(\r\n          data !== null && data[0].PostOffice !== null ? data[0].PostOffice : \"\"\r\n        );\r\n      }\r\n      // Calling that async function\r\n      getapi(api_url);\r\n    }\r\n\r\n    if (destinationPinCode < smaller || destinationPinCode > greater) {\r\n      setDeliverZipValidator(\"Must be of 6 digits\");\r\n      check = 0;\r\n    }\r\n\r\n    if (destinationPinCode < 0) {\r\n      setDeliverZipValidator(\"Cannot be negative\");\r\n      check = 0;\r\n    }\r\n    if (check === 1) {\r\n      setDeliverZipValidator(\"\");\r\n    }\r\n\r\n    setdestinationpin(destinationPinCode);\r\n  };\r\n  const onPickupZipChangeController = (event) => {\r\n    var pickupPinCode = parseInt(event.target.value, 10);\r\n    var greater = 999999,\r\n      smaller = 100000;\r\n    var check = 1;\r\n    var count = 0,\r\n      temp = pickupPinCode;\r\n    while (temp > 0) {\r\n      count++;\r\n      temp = Math.floor(temp / 10);\r\n    }\r\n    if (count == 6) {\r\n      const api_url = \"https://api.postalpincode.in/pincode/\" + pickupPinCode;\r\n\r\n      // Defining async function\r\n      async function getapi(url) {\r\n        // Storing response\r\n\r\n        const response = await fetch(url);\r\n\r\n        // Storing data in form of JSON\r\n        var data = await response.json();\r\n        console.log(data);\r\n        setPickupData(\r\n          data !== null && data[0].PostOffice !== null ? data[0].PostOffice : \"\"\r\n        );\r\n      }\r\n      // Calling that async function\r\n      getapi(api_url);\r\n    }\r\n    if (pickupPinCode < smaller || pickupPinCode > greater) {\r\n      setPickupZipValidator(\"Must be of 6 digits\");\r\n      check = 0;\r\n    }\r\n    if (pickupPinCode < 0) {\r\n      setPickupZipValidator(\"Cannot be negative\");\r\n      check = 0;\r\n    }\r\n    if (check === 1) {\r\n      setPickupZipValidator(\"\");\r\n    }\r\n    setpickuppin(pickupPinCode);\r\n  };\r\n\r\n  const handleItemDeleted = (i) => {\r\n    var items = chosenProducts.slice();\r\n    items.splice(i, 1);\r\n    setChosenProducts(items);\r\n  };\r\n  const addproduct = () => {\r\n    var items = chosenProducts.slice();\r\n    items.push(null);\r\n    setChosenProducts(items);\r\n  };\r\n  const onProductTypeChange = (event, i) => {\r\n    console.log(event);\r\n    var items = chosenProducts.slice();\r\n    items[i].value.productType = event.value;\r\n    setChosenProducts(items);\r\n  };\r\n  const onCategoryChange = (event, i) => {\r\n    console.log(event);\r\n    var items = chosenProducts.slice();\r\n    items[i].value.categories = event;\r\n    setChosenProducts(items);\r\n  };\r\n  const handleMeasurableChange = (i) => {\r\n    var items = chosenProducts.slice();\r\n    items[i].value.measurable = !items[i].value.measurable;\r\n    setChosenProducts(items);\r\n  };\r\n  const onPickupAreaChangeController = (event) => {\r\n    setPickupArea(event.target.value);\r\n  };\r\n  const onDeliveryAreaChangeController = (event) => {\r\n    setDeliveryArea(event.target.value);\r\n  };\r\n  const unitChangeController = (event, i) => {\r\n    var items = chosenProducts.slice();\r\n    items[i].value.unit = event;\r\n    setChosenProducts(items);\r\n  };\r\n  const onWeightPerUnitChangeController = (event, i) => {\r\n    var items = chosenProducts.slice();\r\n\r\n    if (event.target.value < 0) {\r\n      items[i].value.weightPerUnit = 0;\r\n    } else {\r\n      items[i].value.weightPerUnit = event.target.value;\r\n    }\r\n    setChosenProducts(items);\r\n  };\r\n  const onHeightChangeController = (event, i) => {\r\n    var items = chosenProducts.slice();\r\n    if (event.target.value < 0) {\r\n      items[i].value.height = 0;\r\n    } else {\r\n      items[i].value.height = event.target.value;\r\n    }\r\n\r\n    setChosenProducts(items);\r\n  };\r\n  const onWidthChangeController = (event, i) => {\r\n    var items = chosenProducts.slice();\r\n    if (event.target.value < 0) {\r\n      items[i].value.width = 0;\r\n    } else {\r\n      items[i].value.width = event.target.value;\r\n    }\r\n    setChosenProducts(items);\r\n  };\r\n  const onLengthChangeController = (event, i) => {\r\n    var items = chosenProducts.slice();\r\n    if (event.target.value < 0) {\r\n      items[i].value.length = 0;\r\n    } else {\r\n      items[i].value.length = event.target.value;\r\n    }\r\n    setChosenProducts(items);\r\n  };\r\n  const onDensityChangeController = (event, i) => {\r\n    var items = chosenProducts.slice();\r\n    if (event.target.value < 0) {\r\n      items[i].value.density = 0;\r\n    } else {\r\n      items[i].value.density = event.target.value;\r\n    }\r\n    setChosenProducts(items);\r\n  };\r\n  const calculatePrice = () => {\r\n    const msg = myValidator(chosenProducts);\r\n    if (msg !== \"\") {\r\n      alert(msg);\r\n      return;\r\n    }\r\n    if (pickupZipValidator !== \"\") {\r\n      alert(\"Pickup zip must be of 6 digits.\");\r\n      return;\r\n    }\r\n    if (deliverZipValidator !== \"\") {\r\n      alert(\"Destination zip must be of 6 digits.\");\r\n      return;\r\n    }\r\n    if (\r\n      emptyPinValidator(destinationpin) === false ||\r\n      emptyPinValidator(pickuppin) === false\r\n    ) {\r\n      alert(\"Zip codes cannot be empty\");\r\n\r\n      return;\r\n    }\r\n    setCalculating(true);\r\n\r\n    var items = [];\r\n\r\n    for (var i = 0; i < chosenProducts.length; i++) {\r\n      //var temp=''\r\n      items.push({\r\n        toPin: pickuppin,\r\n        fromPin: destinationpin,\r\n        productName: chosenProducts[i].value.productName,\r\n        productType: chosenProducts[i].value.productType.value || chosenProducts[i].value.productType,\r\n        length: chosenProducts[i].value.length,\r\n        width: chosenProducts[i].value.width,\r\n        height: chosenProducts[i].value.height,\r\n        weightPerUnit: chosenProducts[i].value.weightPerUnit,\r\n        Unit:\r\n          chosenProducts[i].value.measurable == true\r\n            ? chosenProducts[i].value.unit.value || chosenProducts[i].value.unit\r\n            : \"\",\r\n        noOfUnits: chosenProducts[i].noOfUnits,\r\n        measurable: chosenProducts[i].value.measurable,\r\n        density: chosenProducts[i].value.density,\r\n        totalWeight: chosenProducts[i].totalWeight,\r\n        distanceRange: props.distanceRange.value,\r\n      });\r\n    }\r\n    var params = JSON.stringify(items);\r\n    // alert(`/pricing?items=`+params)\r\n    // return\r\n    console.log(params);\r\n    var exactParam = `?items=${params}&useCase=price`;\r\n    //console.log(exactParam)\r\n    //return\r\n    API.get(\"GoFlexeOrderPlacement\", `/pricing` + exactParam)\r\n      .then((resp) => {\r\n        console.log(resp);\r\n        setShowPrice(true);\r\n        setEstimatedPrice(resp.estimatedPrice);\r\n        setCalculating(false);\r\n      })\r\n      .catch((err) => {\r\n        setCalculating(false);\r\n        alert(\"Error calculating price, Try again Later\");\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const myValidator = (arr) => {\r\n    var msg = \"\";\r\n    arr.map((item) => {\r\n      if (item === null) {\r\n        msg = \"Product details cannot be empty\";\r\n        return;\r\n      }\r\n      if (item.value.measurable === true && item.noOfUnits == 0) {\r\n        msg = \" Number of Units cannot be 0\";\r\n        return;\r\n      }\r\n      if (\r\n        (item.value.measurable === true && item.value.height == null) ||\r\n        (item.value.measurable === true && item.value.height == 0) ||\r\n        (item.value.measurable === true && item.value.height == \"\")\r\n      ) {\r\n        msg = \"Product Height cannot be empty\";\r\n        return;\r\n      }\r\n      if (\r\n        (item.value.measurable === true && item.value.length == null) ||\r\n        (item.value.measurable === true && item.value.length == 0) ||\r\n        (item.value.measurable === true && item.value.length == \"\")\r\n      ) {\r\n        msg = \"Product Length cannot be empty\";\r\n        return;\r\n      }\r\n      if (\r\n        (item.value.measurable === true && item.value.width == null) ||\r\n        (item.value.measurable === true && item.value.width == 0) ||\r\n        (item.value.measurable === true && item.value.width == \"\")\r\n      ) {\r\n        msg = \"Product width cannot be empty\";\r\n        return;\r\n      }\r\n      if (\r\n        (item.value.measurable === true && item.value.weightPerUnit == null) ||\r\n        (item.value.measurable === true && item.value.weightPerUnit == 0) ||\r\n        (item.value.measurable === true && item.value.weightPerUnit == \"\")\r\n      ) {\r\n        msg = \"WeightPerUnit cannot be empty\";\r\n        return;\r\n      }\r\n      if (\r\n        (item.value.measurable === true && item.value.unit == null) ||\r\n        (item.value.measurable === true && item.value.unit == \"\")\r\n      ) {\r\n        msg = \"Measurement unit cannot be empty\";\r\n        return;\r\n      }\r\n      if (\r\n        (item.value.measurable == null || item.value.measurable == false) &&\r\n        item.totalWeight == 0\r\n      ) {\r\n        msg = \"Total Weight cannot be 0\";\r\n        return;\r\n      }\r\n      if (item.value.productType == null) {\r\n        msg = \"Product Type cannot be empty\";\r\n        return;\r\n      }\r\n      if (item.value.productType == null) {\r\n        msg = \"Product Type cannot be empty\";\r\n        return;\r\n      }\r\n      if (item.value.categories == null) {\r\n        msg = \"Product Category cannot be empty\";\r\n        return;\r\n      }\r\n    });\r\n\r\n    return msg;\r\n  };\r\n\r\n  const onNoOfUnitsChange = (event, i) => {\r\n    var items = chosenProducts.slice();\r\n    if (chosenProducts[i] === null) return;\r\n    if (event.target.value < 0) {\r\n      items[i].noOfUnits = 0;\r\n    } else {\r\n      items[i].noOfUnits = event.target.value;\r\n    }\r\n    setChosenProducts(items);\r\n  };\r\n  const onTotalWeightChange = (event, i) => {\r\n    var items = chosenProducts.slice();\r\n    if (event.target.value < 0) {\r\n      items[i].totalWeight = 0;\r\n    } else {\r\n      items[i].totalWeight = event.target.value;\r\n    }\r\n    setChosenProducts(items);\r\n  };\r\n  const handlePlaceOrderClick = () => {\r\n    props.setPickupPinDispatcher(pickuppin);\r\n    props.setDestinationPinDispatcher(destinationpin);\r\n    props.setChosenProducts(chosenProducts);\r\n    setRedirect(true);\r\n  };\r\n  const handleChange = (newValue, i) => {\r\n    var items = chosenProducts.slice();\r\n    if (newValue === null) {\r\n      items[i] = null;\r\n    } else {\r\n      if (newValue.__isNew__ === true) {\r\n        var temp = {\r\n          value: {\r\n            productName: newValue.value,\r\n            productType: null,\r\n            categories: null,\r\n            measurable: true,\r\n            length: null,\r\n            width: null,\r\n            height: null,\r\n            weightPerUnit: null,\r\n            density: null,\r\n            unit: { label: \"Inches\", value: \"inches\" },\r\n            location: \"\",\r\n            pincode: \"\",\r\n            productId: \"\",\r\n          },\r\n          isNew: true,\r\n          label: newValue.label,\r\n          noOfUnits: 0,\r\n          totalWeight: 0,\r\n        };\r\n        items[i] = temp;\r\n      } else {\r\n        var temp = {\r\n          value: newValue.value,\r\n          isNew: false,\r\n          label: newValue.label,\r\n          noOfUnits: 0,\r\n          totalWeight: 0,\r\n          productId: newValue.productId,\r\n        };\r\n        items[i] = temp;\r\n      }\r\n    }\r\n    setChosenProducts(items);\r\n    console.log(items);\r\n    // console.log(newValue)\r\n  };\r\n  //   const onquantityChangeController = (event, i) => {\r\n  //     var items = products.slice();\r\n  //     items[i].quantity = event.target.value;\r\n  //     setproducts(items);\r\n  //   };\r\n  /*IF the product is measureable with length width height */\r\n  var measureablePerUnit = (i) => (\r\n    <React.Fragment>\r\n      <Grid container spacing={3} style={{ padding: 50, paddingTop: 10 }}>\r\n        <Grid item xs={12} sm={3}>\r\n          <TextField\r\n            type=\"number\"\r\n            id=\"weightPerUnit\"\r\n            name=\"weightPerUnit\"\r\n            label=\"Weight Per Unit(in Kg)\"\r\n            fullWidth\r\n            onInput={(e) => {\r\n              e.target.value = Math.max(0, parseInt(e.target.value))\r\n                .toString()\r\n                .slice(0, 5);\r\n            }}\r\n            value={chosenProducts[i].value.weightPerUnit}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            autoComplete=\"weightPerUnit\"\r\n            onChange={(event) => onWeightPerUnitChangeController(event, i)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={9}></Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <TextField\r\n            type=\"number\"\r\n            id=\"height\"\r\n            name=\"height\"\r\n            label=\"Height\"\r\n            fullWidth\r\n            onInput={(e) => {\r\n              e.target.value = Math.max(0, parseInt(e.target.value))\r\n                .toString()\r\n                .slice(0, 5);\r\n            }}\r\n            value={chosenProducts[i].value.height}\r\n            autoComplete=\"Height\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onChange={(event) => onHeightChangeController(event, i)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <TextField\r\n            type=\"number\"\r\n            id=\"width\"\r\n            name=\"width\"\r\n            label=\"Width\"\r\n            fullWidth\r\n            onInput={(e) => {\r\n              e.target.value = Math.max(0, parseInt(e.target.value))\r\n                .toString()\r\n                .slice(0, 5);\r\n            }}\r\n            value={chosenProducts[i].value.width}\r\n            autoComplete=\"width\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onChange={(event) => onWidthChangeController(event, i)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <TextField\r\n            type=\"number\"\r\n            id=\"length\"\r\n            name=\"length\"\r\n            label=\"Length\"\r\n            onInput={(e) => {\r\n              e.target.value = Math.max(0, parseInt(e.target.value))\r\n                .toString()\r\n                .slice(0, 5);\r\n            }}\r\n            value={chosenProducts[i].value.length}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onChange={(event) => onLengthChangeController(event, i)}\r\n            autoComplete=\"Length\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={2}>\r\n          <Select\r\n            styles={selectStyles}\r\n            className=\"basic-single\"\r\n            classNamePrefix=\"Unit\"\r\n            isSearchable\r\n            name=\"unit\"\r\n            placeholder=\"Unit\"\r\n            value={chosenProducts[i].value.unit}\r\n            onChange={(event) => unitChangeController(event, i)}\r\n            options={constants.lengthDimensions}\r\n          />\r\n          {/* </FormControl> */}\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  var notMeasureable = (i) => (\r\n    <React.Fragment>\r\n      {/*test*/}\r\n      <Grid\r\n        container\r\n        spacing={3}\r\n        style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n      >\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"number\"\r\n            id=\"TotalWeight\"\r\n            name=\"TotalWeight\"\r\n            onInput={(e) => {\r\n              e.target.value = Math.max(0, parseInt(e.target.value))\r\n                .toString()\r\n                .slice(0, 5);\r\n            }}\r\n            label=\"Total Weight\"\r\n            fullWidth\r\n            value={chosenProducts[i].totalWeight}\r\n            onChange={(event) => onTotalWeightChange(event, i)}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            InputProps={{\r\n              endAdornment: <InputAdornment position=\"end\">Kg</InputAdornment>,\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  var fixedMeasurable = (i) => (\r\n    <React.Fragment>\r\n      <Grid\r\n        container\r\n        spacing={4}\r\n        style={{ paddingTop: 30, paddingLeft: 30, paddingRight: 30 }}\r\n      >\r\n        <Grid item xs={12} sm={3}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"weightPerunit\"\r\n            name=\"weightPerunit\"\r\n            label=\"Weight Per Unit\"\r\n            fullWidth\r\n            onChange={(event) => onWeightPerUnitChangeController(event, i)}\r\n            value={chosenProducts[i].value.weightPerUnit}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={9}></Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <Select\r\n            styles={selectStyles}\r\n            className=\"basic-single\"\r\n            classNamePrefix=\"Unit\"\r\n            isSearchable\r\n            name=\"unit\"\r\n            placeholder=\"Unit\"\r\n            value={\r\n              chosenProducts[i] === null ||\r\n              chosenProducts[i].value.unit === null\r\n                ? null\r\n                : chosenProducts[i].value.unit.value\r\n                ? chosenProducts[i].value.unit\r\n                : constants.dimensionsMap[chosenProducts[i].value.unit]\r\n            }\r\n\r\n            onChange={(event) => unitChangeController(event, i)}\r\n            options={constants.lengthDimensions}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"length\"\r\n            name=\"lenght\"\r\n            label=\"Length\"\r\n            fullWidth\r\n            onChange={(event) => onLengthChangeController(event, i)}\r\n            value={chosenProducts[i].value.length}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"width\"\r\n            name=\"width\"\r\n            label=\"Width\"\r\n            fullWidth\r\n            value={chosenProducts[i].value.width}\r\n            onChange={(event) => onWidthChangeController(event, i)}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"height\"\r\n            name=\"height\"\r\n            label=\"Height\"\r\n            fullWidth\r\n            value={chosenProducts[i].value.height}\r\n            variant=\"outlined\"\r\n            onChange={(event) => onHeightChangeController(event, i)}\r\n            size=\"small\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  var fixedNotMeasurable = (i) => (\r\n    <React.Fragment>\r\n      <Grid\r\n        container\r\n        spacing={4}\r\n        style={{ paddingTop: 30, paddingLeft: 30, paddingRight: 30 }}\r\n      >\r\n        <Grid item xs={12} sm={3}>\r\n          <TextField\r\n            type=\"number\"\r\n            id=\"TotalWeight\"\r\n            name=\"TotalWeight\"\r\n            onInput={(e) => {\r\n              e.target.value = Math.max(0, parseInt(e.target.value))\r\n                .toString()\r\n                .slice(0, 5);\r\n            }}\r\n            label=\"Total Weight\"\r\n            fullWidth\r\n            value={chosenProducts[i].totalWeight}\r\n            onChange={(event) => onTotalWeightChange(event, i)}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            InputProps={{\r\n              endAdornment: <InputAdornment position=\"end\">Kg</InputAdornment>,\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  var list = chosenProducts.map((e, i) => (\r\n    <div>\r\n      {i !== 0 && <Divider style={{ marginBottom: 30, marginTop: 30 }} />}\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        style={{ padding: 30 }}\r\n      >\r\n        <Grid item>\r\n          <h5>Product {i + 1}</h5>\r\n        </Grid>\r\n        <Grid item>\r\n          {i == 0 ? (\r\n            \"\"\r\n          ) : (\r\n            <IconButton onClick={() => handleItemDeleted(i)}>\r\n              <DeleteIcon style={{ fontSize: \"30\" }} />\r\n            </IconButton>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={4} style={{ paddingLeft: 30, paddingRight: 30 }}>\r\n        <Grid item xs={12} sm={4}>\r\n          <CreatableSelect\r\n            isClearable\r\n            value={chosenProducts[i]}\r\n            onChange={(newValue) => handleChange(newValue, i)}\r\n            options={allProducts}\r\n            placeholder=\"Product Name\"\r\n            styles={selectStyles}\r\n          />\r\n        </Grid>\r\n        {/* Type of the product */}\r\n        <Grid item xs={12} sm={4}>\r\n          \r\n            <Select\r\n              styles={selectStyles}\r\n              value={\r\n                chosenProducts[i] === null ||\r\n                chosenProducts[i].value.productType === null\r\n                  ? null\r\n                  : (chosenProducts[i].value.productType.value?\r\n                    chosenProducts[i].value.productType:constants.productTypeMap[chosenProducts[i].value.productType] ) \r\n              }\r\n              isDisabled={\r\n                chosenProducts[i] === null || !chosenProducts[i].isNew\r\n              }\r\n              onChange={(event) => onProductTypeChange(event, i)}\r\n              isSearchable\r\n              placeholder=\"Product Type\"\r\n              name=\"color\"\r\n              options={constants.typesOfProducts}\r\n            />\r\n        </Grid>\r\n        {chosenProducts[i] === null || chosenProducts[i].value.measurable ? (\r\n          <Grid item xs={12} sm={4}>\r\n            <TextField\r\n              error={negativeValueValidator !== \"\"}\r\n              helperText={\r\n                negativeValueValidator === \"\" ? \" \" : negativeValueValidator\r\n              }\r\n              fullWidth\r\n              type=\"number\"\r\n              size=\"small\"\r\n              id=\"outlined-basic\"\r\n              label=\"No. of units\"\r\n              onInput={(e) => {\r\n                e.target.value = Math.max(0, parseInt(e.target.value))\r\n                  .toString()\r\n                  .slice(0, 5);\r\n              }}\r\n              variant=\"outlined\"\r\n              value={\r\n                chosenProducts[i] === null ? 0 : chosenProducts[i].noOfUnits\r\n              }\r\n              onChange={(event) => onNoOfUnitsChange(event, i)}\r\n            />\r\n          </Grid>\r\n        ) : (\r\n          <Grid item xs={12} sm={4}>\r\n            {/* <TextField\r\n              fullWidth\r\n              type=\"number\"\r\n              size=\"small\"\r\n              id=\"outlined-basic\"\r\n              onInput={(e) => {\r\n                e.target.value = Math.max(0, parseInt(e.target.value))\r\n                  .toString()\r\n                  .slice(0, 5);\r\n              }}\r\n              label=\"Total Weight\"\r\n              variant=\"outlined\"\r\n              value={chosenProducts[i].totalWeight}\r\n              onChange={(event) => onTotalWeightChange(event, i)}\r\n            /> */}\r\n          </Grid>\r\n        )}\r\n        <Grid item xs={12} sm={11}>\r\n          <Select\r\n            //defaultValue={[colourOptions[2], colourOptions[3]]}\r\n            isMulti\r\n            styles={selectStyles}\r\n            name=\"categories\"\r\n            value={\r\n              chosenProducts[i] === null ||\r\n              chosenProducts[i].value.categories === null\r\n                ? null\r\n                : chosenProducts[i].value.categories\r\n            }\r\n            options={constants.inventoryCategory}\r\n            placeholder=\"Category(Select Multiple)\"\r\n            isDisabled={chosenProducts[i] === null || !chosenProducts[i].isNew}\r\n            className=\"basic-multi-select\"\r\n            onChange={(event) => onCategoryChange(event, i)}\r\n            classNamePrefix=\"select\"\r\n          />\r\n        </Grid>\r\n\r\n        {/* <Grid item xs={12} sm={1}>\r\n            <IconButton onClick={() => handleItemDeleted(i)}>\r\n            <DeleteIcon style={{ fontSize: \"30\" }} />\r\n          </IconButton>\r\n        </Grid> */}\r\n        {chosenProducts[i] === null ? (\r\n          <React.Fragment></React.Fragment>\r\n        ) : chosenProducts[i].isNew === true ? (\r\n          <React.Fragment>\r\n            <Grid\r\n              component=\"label\"\r\n              container\r\n              style={{ fontSize: 18, marginTop: 20, marginBottom: 20 }}\r\n              alignItems=\"center\"\r\n              spacing={1}\r\n            >\r\n              <Grid item>Total Weight</Grid>\r\n              <Grid item>\r\n                <AntSwitch\r\n                  checked={chosenProducts[i].value.measurable}\r\n                  onChange={() => handleMeasurableChange(i)}\r\n                  name=\"checkedC\"\r\n                />\r\n              </Grid>\r\n              <Grid item>No. Of Units</Grid>\r\n            </Grid>\r\n            {chosenProducts[i].value.measurable === true\r\n              ? measureablePerUnit(i)\r\n              : notMeasureable(i)}\r\n          </React.Fragment>\r\n        ) : (\r\n          <React.Fragment>\r\n            <Typography\r\n              style={{\r\n                fontSize: 18,\r\n                marginTop: 20,\r\n                marginBottom: 10,\r\n                marginLeft: 20,\r\n              }}\r\n            >\r\n              Product Dimensions\r\n            </Typography>\r\n            <Grid\r\n              component=\"label\"\r\n              container\r\n              style={{ fontSize: 18, marginTop: 20, marginBottom: 20 }}\r\n              alignItems=\"center\"\r\n              spacing={1}\r\n            >\r\n              <Grid item>Total Weight</Grid>\r\n              <Grid item>\r\n                <AntSwitch\r\n                  checked={chosenProducts[i].value.measurable}\r\n                  onChange={() => handleMeasurableChange(i)}\r\n                  name=\"checkedC\"\r\n                />\r\n              </Grid>\r\n              <Grid item>No. Of Units</Grid>\r\n            </Grid>\r\n            {chosenProducts[i].value.measurable === true\r\n              ? fixedMeasurable(i)\r\n              : fixedNotMeasurable(i)}\r\n          </React.Fragment>\r\n        )}\r\n        <Grid item xs={12} sm={4}></Grid>\r\n      </Grid>\r\n    </div>\r\n  ));\r\n\r\n  if (loading === true) {\r\n    return (\r\n      <React.Fragment>\r\n        <h1>Loading your product details</h1>\r\n        <Spinner />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  if (redirect) {\r\n    return <Redirect to=\"/ordersRedir\" />;\r\n  }\r\n  if (calculating === true) {\r\n    return (\r\n      <div class=\"jumbotron text-center\">\r\n        <p class=\"lead\">\r\n          <strong>Calculating estimated cost</strong>\r\n        </p>\r\n        <Spinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Card className={classes.root}>\r\n        <CardContent style={{ padding: 0 }}>\r\n          <Typography fullWidth className={classes.title} gutterBottom>\r\n            Price Calculator\r\n          </Typography>\r\n          <form>\r\n            <Grid\r\n              container\r\n              spacing={3}\r\n              style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n            ></Grid>\r\n            {list}\r\n            <Button\r\n              className=\"AllButtons\"\r\n              style={{\r\n                marginTop: 10,\r\n                marginLeft: 20,\r\n              }}\r\n              onClick={() => addproduct()}\r\n            >\r\n              Add product\r\n            </Button>\r\n            <Divider style={{ margin: 20 }} />\r\n            <Typography className={classes.formHeadings}>\r\n              Location Details\r\n            </Typography>\r\n            <Grid\r\n              container\r\n              spacing={3}\r\n              style={{ padding: 50, paddingTop: 20, paddingBottom: 30 }}\r\n            >\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  required\r\n                  error={pickupZipValidator !== \"\"}\r\n                  helperText={\r\n                    pickupZipValidator === \"\"\r\n                      ? PickupData == \"\"\r\n                        ? \"\"\r\n                        : PickupData[0].District + \", \" + PickupData[0].State\r\n                      : pickupZipValidator\r\n                  }\r\n                  type=\"number\"\r\n                  id=\"pickupzip\"\r\n                  name=\"pickupzip\"\r\n                  label=\"Pickup Zip\"\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  fullWidth\r\n                  value={pickuppin}\r\n                  onChange={(event) => onPickupZipChangeController(event)}\r\n                  autoComplete=\"Pickup postal-code\"\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  required\r\n                  error={deliverZipValidator !== \"\"}\r\n                  helperText={\r\n                    deliverZipValidator === \"\"\r\n                      ? DeliveryData == \"\"\r\n                        ? \"\"\r\n                        : DeliveryData[0].District +\r\n                          \", \" +\r\n                          DeliveryData[0].State\r\n                      : deliverZipValidator\r\n                  }\r\n                  type=\"number\"\r\n                  id=\"destinationzip\"\r\n                  name=\"destinationzip\"\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  label=\"Destination Zip\"\r\n                  fullWidth\r\n                  value={destinationpin}\r\n                  onChange={(event) => onDestinationZipChangeController(event)}\r\n                  autoComplete=\"Destination postal-code\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={4}>\r\n                {/* <FormControl className={classes.formControl}>\r\n                  <InputLabel htmlFor=\"age-native-simple\">Distance</InputLabel>\r\n                  <MaterialSelect\r\n                    native\r\n                    value={DistanceRange}\r\n                    onChange={(event) => onDistanceChangeController(event)}\r\n                    inputProps={{\r\n                      name: \"age\",\r\n                      id: \"age-native-simple\",\r\n                    }}\r\n                  >\r\n                    {constants.DistanceOptions.map((d) => (\r\n                      <option value={d.value}>{d.name}</option>\r\n                    ))}\r\n                  </MaterialSelect>\r\n                </FormControl> */}\r\n                <Select\r\n                  styles={selectStyles}\r\n                  className=\"basic-single\"\r\n                  classNamePrefix=\"Distance\"\r\n                  isSearchable\r\n                  name=\"Distance\"\r\n                  placeholder=\"Distance\"\r\n                  value={props.distanceRange}\r\n                  onChange={(event) => onDistanceChangeController(event)}\r\n                  options={constants.DistanceOptions}\r\n                />\r\n              </Grid>\r\n              {PickupData.length !== 0 ? (\r\n                <Grid item xs={12} sm={4}>\r\n                  <FormControl className={classes.formControl} fullWidth>\r\n                    <InputLabel htmlFor=\"age-native-simple\">\r\n                      Pickup Locality\r\n                    </InputLabel>\r\n                    <MaterialSelect\r\n                      autoWidth={true}\r\n                      fullWidth\r\n                      native\r\n                      onChange={(event) => onPickupAreaChangeController(event)}\r\n                      value={pickupArea}\r\n                      inputProps={{\r\n                        name: \"age\",\r\n                        id: \"age-native-simple\",\r\n                      }}\r\n                    >\r\n                      {PickupData.map((d) => (\r\n                        <option>{d.Name}</option>\r\n                      ))}\r\n                    </MaterialSelect>\r\n                  </FormControl>\r\n                </Grid>\r\n              ) : (\r\n                <p></p>\r\n              )}\r\n\r\n              {DeliveryData.length !== 0 ? (\r\n                <Grid item xs={12} sm={6}>\r\n                  <FormControl className={classes.formControl} fullWidth>\r\n                    <InputLabel htmlFor=\"age-native-simple\">\r\n                      Destination Locality\r\n                    </InputLabel>\r\n                    <MaterialSelect\r\n                      native\r\n                      onChange={(event) =>\r\n                        onDeliveryAreaChangeController(event)\r\n                      }\r\n                      value={deliveryArea}\r\n                      inputProps={{\r\n                        name: \"age\",\r\n                        id: \"age-native-simple\",\r\n                      }}\r\n                    >\r\n                      {DeliveryData.map((d) => (\r\n                        <option>{d.Name}</option>\r\n                      ))}\r\n                    </MaterialSelect>\r\n                  </FormControl>\r\n                </Grid>\r\n              ) : (\r\n                <p></p>\r\n              )}\r\n            </Grid>\r\n          </form>\r\n          <Typography className={classes.formHeadings}>\r\n            Value Added Services\r\n          </Typography>\r\n          <Grid\r\n            container\r\n            spacing={3}\r\n            style={{ padding: 50, paddingTop: 20, paddingBottom: 30 }}\r\n          >\r\n            {constants.vas.map((vas) => {\r\n              return (\r\n                <Grid item xs={12} sm={4}>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        //checked={state.checkedB}\r\n                        //onChange={handleChange}\r\n                        name={vas.name}\r\n                        color=\"primary\"\r\n                      />\r\n                    }\r\n                    label={vas.name}\r\n                  />\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </CardContent>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"flex-end\",\r\n            margin: 20,\r\n          }}\r\n        >\r\n          <Button\r\n            variant=\"contained\"\r\n            className=\"AllButtons\"\r\n            style={{\r\n              marginTop: 10,\r\n              marginLeft: 20,\r\n            }}\r\n            onClick={() => calculatePrice()}\r\n          >\r\n            Calculate\r\n          </Button>\r\n        </div>\r\n        {showPrice === true && (\r\n          <Card className={classes.root}>\r\n            <Divider />\r\n            <Grid>\r\n              <Button\r\n                sm={6}\r\n                style={{\r\n                  float: \"right\",\r\n                  marginTop: \"10px\",\r\n                  marginRight: \"30px\",\r\n                  backgroundColor: \"#f9a825\",\r\n                }}\r\n                variant=\"contained\"\r\n                //color=\"primary\"\r\n                onClick={() => handlePlaceOrderClick()}\r\n              >\r\n                Place order\r\n              </Button>\r\n            </Grid>\r\n            <div\r\n              style={{ textAlign: \"center\", fontSize: \"18px\", padding: \"20px\" }}\r\n            >\r\n              Estimated price is : {estimatedPrice}\r\n            </div>\r\n          </Card>\r\n        )}\r\n      </Card>\r\n      {/* //if(showPrice===true) */}\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    distanceRange: state.order.distanceRange,\r\n    // height:state.order.height,\r\n    // width:state.order.width,\r\n    // length:state.order.length,\r\n    // unit:state.order.unit,\r\n    // noOfUnits:state.order.noOfUnits,\r\n    // weightPerUnit:state.order.weightPerUnit,\r\n    // pickupPin:state.order.pickupPin,\r\n    // destinationPin:state.order.destinationPin,\r\n    // measureable:state.order.measureable,\r\n    // totalWeight:state.order.totalWeight,\r\n    // density:state.order.density\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    // setHeightDispatcher:(h)=>dispatch(actions.setHeight(h)),\r\n    // setWidthDispatcher:(w)=>dispatch(actions.setWidth(w)),\r\n    // setLengthDispatcher:(l)=>dispatch(actions.setLength(l)),\r\n    // setUnitDispatcher:(unitOfMeasurement)=>dispatch(actions.setUnit(unitOfMeasurement)),\r\n    // setNoOfUnitsDispatcher:(numberUnits)=>dispatch(actions.setNumberOfUnits(numberUnits)),\r\n    // setWeightPerUnitDispatcher:(weightUnit)=>dispatch(actions.setWeightPerUnit(weightUnit)),\r\n    setPickupPinDispatcher: (pPin) => dispatch(actions.setPickupPin(pPin)),\r\n    setDestinationPinDispatcher: (dPin) =>\r\n      dispatch(actions.setDestinationPin(dPin)),\r\n    setDistanceRange: (distanceRange) =>\r\n      dispatch(actions.setDistanceRange(distanceRange)),\r\n    // setMeasureable:(isMeasureable)=>dispatch(actions.setMeasureable(isMeasureable)),\r\n    // setTotalWeight:(totalWeight)=>dispatch(actions.setTotalWeight(totalWeight)),\r\n    // setDensity:(density)=>dispatch(actions.setDensity(density)),\r\n    setChosenProducts: (chosenProducts) =>\r\n      dispatch(actions.setChosenProducts(chosenProducts)),\r\n  };\r\n};\r\nexport default withRouter(\r\n  connect(mapStateToProps, mapDispatchToProps)(PriceCalculator)\r\n);\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Payments\\Upload\\Upload.js",["598"],"import React, { Component } from \"react\";\r\nimport Dropzone from \"../Dropzone/Dropzone\";\r\nimport \"./Upload.css\";\r\nimport Progress from \"../Progress/Progress\";\r\nimport {Button} from '@material-ui/core'\r\nimport {API} from 'aws-amplify'\r\nimport axios from 'axios'\r\nclass Upload extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      files: null,\r\n      uploading: false,\r\n      uploadProgress: {},\r\n      successfullUploaded: false\r\n    };\r\n\r\n    this.onFilesAdded = this.onFilesAdded.bind(this);\r\n    this.uploadFiles = this.uploadFiles.bind(this);\r\n    // this.sendRequest = this.sendRequest.bind(this);\r\n    this.renderActions = this.renderActions.bind(this);\r\n  }\r\n\r\n  onFilesAdded(files) {\r\n    this.setState(prevState => ({\r\n      files: files\r\n    }));\r\n  }\r\n\r\n  async uploadFiles() {\r\n    if(this.state.files===null){\r\n      alert('Please Select a file.')\r\n      return\r\n    }\r\n    this.setState({ uploadProgress: {}, uploading: true });\r\n    //setLoading(true);\r\n    var docLink;\r\n    const metaData = {\r\n      contentType: this.state.files.type,\r\n    };\r\n    const payload = {\r\n      body: {\r\n        contentType: this.state.files.type,\r\n        metaData: metaData,\r\n      },\r\n    };\r\n    var ext = this.state.files.name.split(\".\").pop();\r\n    API.post(\r\n      \"GoFlexeOrderPlacement\",\r\n      \"/kyc/document?type=\" + \"customer\",\r\n      payload\r\n    )\r\n      .then((initiateResult) => {\r\n        docLink = `uploads/kycdocuments/customer/${initiateResult.fileId}.${ext}`;\r\n        axios\r\n          .put(initiateResult.s3PutObjectUrl, this.state.files, {\r\n            headers: {\r\n              \"Content-Type\": this.state.files.type,\r\n            },\r\n          })\r\n          .then((resp) => {\r\n\r\n\r\n            var paymentModeDetails = null;\r\n            if(this.props.paymentOption==='fullPayment'){\r\n              paymentModeDetails={\r\n                chequeLink:docLink\r\n              }\r\n            }\r\n            else if(this.props.paymentOption==='partialPayment'){\r\n              paymentModeDetails={\r\n                paymentRatio:this.props.paymentRatio,\r\n                chequeLink:docLink\r\n              }\r\n            }\r\n            else if(this.props.paymentOption==='CreditBased'){\r\n              paymentModeDetails={\r\n                paymentDelay:this.props.paymentRatio,\r\n                chequeLink:docLink\r\n              }\r\n            }\r\n            else if(this.props.paymentOption==='Subscription'){\r\n              paymentModeDetails={\r\n                paymentCycle:this.props.paymentRatio,\r\n                chequeLink:docLink\r\n              }\r\n            }\r\n                const payload = {\r\n                  body: {\r\n                    paymentMode:this.props.paymentMode,\r\n                    paymentOption:this.props.paymentOption,\r\n                    orderId:this.props.orderId,\r\n                    paymentModeDetails:paymentModeDetails\r\n                  },\r\n                };\r\n                API.post(\r\n                  \"GoFlexeOrderPlacement\", `/customer-payments`, payload\r\n                )\r\n                  .then((resp) => {\r\n                    console.log(resp);\r\n                    this.props.setData({\r\n                      paymentId:resp.new.paymentId,\r\n                      paymentMode:resp.new.paymentMode,\r\n                      paymentOption:resp.new.paymentOption ===undefined ? null :resp.new.paymentOption,\r\n                      totalAmount:resp.new.totalAmount\r\n                    });\r\n                    //fun();\r\n                  })\r\n                  .catch((err) => console.log(err));\r\n          })\r\n          .catch((err) => console.log(err));\r\n      })\r\n      .catch((err) => console.log(err));\r\n    //setLoading(false);\r\n   \r\n\r\n      this.setState({ successfullUploaded: true, uploading: false });\r\n   \r\n      // Not Production ready! Do some error handling here instead...\r\n      //this.setState({ successfullUploaded: true, uploading: false });\r\n    \r\n  }\r\n\r\n  // sendRequest(file) {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     const req = new XMLHttpRequest();\r\n\r\n  //     req.upload.addEventListener(\"progress\", event => {\r\n  //       if (event.lengthComputable) {\r\n  //         const copy = { ...this.state.uploadProgress };\r\n  //         copy[file.name] = {\r\n  //           state: \"pending\",\r\n  //           percentage: (event.loaded / event.total) * 100\r\n  //         };\r\n  //         this.setState({ uploadProgress: copy });\r\n  //       }\r\n  //     });\r\n\r\n  //     req.upload.addEventListener(\"load\", event => {\r\n  //       const copy = { ...this.state.uploadProgress };\r\n  //       copy[file.name] = { state: \"done\", percentage: 100 };\r\n  //       this.setState({ uploadProgress: copy });\r\n  //       resolve(req.response);\r\n  //     });\r\n\r\n  //     req.upload.addEventListener(\"error\", event => {\r\n  //       const copy = { ...this.state.uploadProgress };\r\n  //       copy[file.name] = { state: \"error\", percentage: 0 };\r\n  //       this.setState({ uploadProgress: copy });\r\n  //       reject(req.response);\r\n  //     });\r\n\r\n  //     const formData = new FormData();\r\n  //     formData.append(\"file\", file, file.name);\r\n\r\n  //     req.open(\"POST\", \"http://localhost:8000/upload\");\r\n  //     req.send(formData);\r\n  //   });\r\n  // }\r\n\r\n  renderProgress(file) {\r\n    const uploadProgress = this.state.uploadProgress[file.name];\r\n    if (this.state.uploading || this.state.successfullUploaded) {\r\n      return (\r\n        <div className=\"ProgressWrapper\">\r\n          <Progress progress={uploadProgress ? uploadProgress.percentage : 0} />\r\n          <img\r\n            className=\"CheckIcon\"\r\n            alt=\"done\"\r\n            src=\"baseline-check_circle_outline-24px.svg\"\r\n            style={{\r\n              opacity:\r\n                uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\r\n            }}\r\n          />\r\n            \r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderActions() {\r\n    if (this.state.successfullUploaded) {\r\n      return (\r\n        <Button\r\n        variant='contained'\r\n          style={{backgroundColor:'#FF8C00',marginRight:10}}\r\n          onClick={() =>\r\n            this.setState({ files: [], successfullUploaded: false })\r\n          }\r\n        >\r\n          Clear\r\n        </Button>\r\n      );\r\n    } else {\r\n      return (\r\n        <Button\r\n          variant='contained'\r\n          style={{backgroundColor:'#FF8C00',marginRight:10}}\r\n          disabled={this.state.files===null || this.state.uploading}\r\n          onClick={this.uploadFiles}\r\n        >\r\n          Upload\r\n        </Button>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Upload\">\r\n        <span className=\"Title\">Upload a picture of the payment proof</span>\r\n        <div className=\"Content\">\r\n          <div>\r\n            <Dropzone\r\n              onFilesAdded={this.onFilesAdded}\r\n              disabled={this.state.uploading || this.state.successfullUploaded}\r\n            />\r\n          </div>\r\n          <div className=\"Files\">\r\n            \r\n               {this.state.files!==null && <div key={this.state.files.name} className=\"Row\">\r\n                  <span className=\"Filename\">{this.state.files.name}</span>\r\n                  {this.renderProgress(this.state.files)}\r\n                </div>\r\n              }\r\n          </div>\r\n        </div>\r\n        <div className=\"Actions\">{this.renderActions()}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Upload;","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Payments\\Progress\\Progress.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Payments\\Dropzone\\Dropzone.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OpenPriceCalculator.js",["599","600"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Spinner from \"./UI/Spinner\";\r\nimport axios from \"axios\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport * as actions from \"../store/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, withRouter } from \"react-router-dom\";\r\nimport constants from \"../Constants/constants\";\r\nimport { API } from \"aws-amplify\";\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  Card,\r\n  FormControl,\r\n  FormControlLabel,\r\n  Switch,\r\n  InputLabel,\r\n  Button,\r\n  Checkbox,\r\n  InputAdornment,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    height: 50,\r\n    padding: 10,\r\n    paddingLeft: 55,\r\n    color: \"white\",\r\n  },\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n});\r\n\r\nconst OpenPriceCalculator = (props) => {\r\n  const classes = useStyles();\r\n  //State Variables for form fields\r\n  const [height, setHeight] = useState();\r\n  const [width, setWidth] = useState();\r\n  const [breadth] = useState();\r\n  const [length, setLength] = useState();\r\n  const [pickuppin, setpickuppin] = useState();\r\n  const [unit, setUnit] = useState(\"centimeters\");\r\n  //   const [volWeight,setVolWeight]=useState(0);\r\n  const [destinationpin, setdestinationpin] = useState();\r\n  const [loader, setLoader] = useState(false);\r\n  const [estimatedPrice, setEstimatedPrice] = useState(0);\r\n  const [showPrice, setShowPrice] = useState(false);\r\n  const [noOfUnits, setNoOfUnits] = useState();\r\n  const [weightPerUnit, setWeightPerUnit] = useState();\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [totalWeight, setTotalWeight] = useState();\r\n  const [density, setDensity] = useState();\r\n  const [pickupZipValidator, setPickupZipValidator] = useState(\"\");\r\n  const [deliverZipValidator, setDeliverZipValidator] = useState(\"\");\r\n  const [switchToggler, setSwitchToggler] = useState(true);\r\n\r\n  const handleSwitchTogglerChange = (event) => {\r\n    setSwitchToggler(!switchToggler);\r\n  };\r\n  /*const [dis,setDis]=useState(true);\r\n  const [validatePickupPin,setValidatePickUpPin]=useState(false);\r\n  const [validateDestinationPin,setValidateDestinationPin]=useState(false);\r\n  const [validateHeight,setValidateHeight]=useState(false);\r\n  const [validateBreadth,setValidateBreadth]=useState(false);\r\n  const [validateWidth,setValidateWidth]=useState(false);*/\r\n\r\n  /*\r\n  function validatePIN (pin) {\r\n    return /^(\\d{4}|\\d{6})$/.test(pin);\r\n    }\r\n\r\n  function validateDimensions(dimension)\r\n  {\r\n      return /^\\d+(\\.\\d{1,2})?$/.test(dimension);\r\n  }*/\r\n\r\n  //   function roundHalf(num) { return (Math.round(num*2)/2).toFixed(1); }\r\n\r\n  const unitChangeController = (event) => {\r\n    var unitOfProduct = event.target.value;\r\n    setUnit(unitOfProduct);\r\n    // if(unitOfProduct===\"centimeters\")\r\n    //     setVolWeight(parseFloat(width)*parseFloat(height)*parseFloat(breadth)/5000);\r\n    // else if(unitOfProduct===\"inches\")\r\n    //     setVolWeight(parseFloat(width)*parseFloat(height)*parseFloat(breadth)/138.4);\r\n  };\r\n\r\n  const onPickupZipChangeController = (event) => {\r\n    var pickupPinCode = parseInt(event.target.value, 10);\r\n    var greater = 999999,\r\n      smaller = 100000;\r\n    var check = 1;\r\n    if (pickupPinCode < smaller || pickupPinCode > greater) {\r\n      setPickupZipValidator(\"Must be of 6 digits\");\r\n      check = 0;\r\n    }\r\n    if (pickupPinCode < 0) {\r\n      setPickupZipValidator(\"Cannot be negative\");\r\n      check = 0;\r\n    }\r\n    if (check === 1) {\r\n      setPickupZipValidator(\"\");\r\n    }\r\n    setpickuppin(pickupPinCode);\r\n  };\r\n\r\n  const onDestinationZipChangeController = (event) => {\r\n    var destinationPinCode = parseInt(event.target.value, 10);\r\n    var greater = 999999,\r\n      smaller = 100000;\r\n    var check = 1;\r\n    if (destinationPinCode < smaller || destinationPinCode > greater) {\r\n      setDeliverZipValidator(\"Must be of 6 digits\");\r\n      check = 0;\r\n    }\r\n    if (destinationPinCode < 0) {\r\n      setDeliverZipValidator(\"Cannot be negative\");\r\n      check = 0;\r\n    }\r\n    if (check === 1) {\r\n      setDeliverZipValidator(\"\");\r\n    }\r\n\r\n    setdestinationpin(destinationPinCode);\r\n  };\r\n\r\n  const onHeightChangeController = (event) => {\r\n    var heightOfProduct = event.target.value;\r\n    heightOfProduct = heightOfProduct < 0 ? 0 : heightOfProduct;\r\n    setHeight(heightOfProduct);\r\n    // if(unit==\"centimeters\")\r\n    //     setVolWeight(parseFloat(heightOfProduct)*parseFloat(width)*parseFloat(breadth)/5000);\r\n    // else if(unit==\"inches\")\r\n    //     setVolWeight(parseFloat(heightOfProduct)*parseFloat(width)*parseFloat(breadth)/138.4);\r\n  };\r\n\r\n  const onWidthChangeController = (event) => {\r\n    var widthOfProduct = event.target.value;\r\n    widthOfProduct = widthOfProduct < 0 ? 0 : widthOfProduct;\r\n    setWidth(widthOfProduct);\r\n    // if(unit==\"centimeters\")\r\n    //     setVolWeight(parseFloat(widthOfProduct)*parseFloat(height)*parseFloat(breadth)/5000);\r\n    // else if(unit==\"inches\")\r\n    //     setVolWeight(parseFloat(widthOfProduct)*parseFloat(height)*parseFloat(breadth)/138.4);\r\n  };\r\n  const onTotalWeightChangeController = (event) => {\r\n    setTotalWeight(event.target.value);\r\n  };\r\n  const onDensityChangeController = (event) => {\r\n    setDensity(event.target.value);\r\n  };\r\n  // const onBreadthChangeController=(event)=>{\r\n  //     var breadthOfProduct=event.target.value;\r\n  //     setBreadth(breadthOfProduct);\r\n  //     if(unit==\"centimeters\")\r\n  //         setVolWeight(parseFloat(breadthOfProduct)*parseFloat(width)*parseFloat(height)/5000);\r\n  //     else if(unit=='inches')\r\n  //         setVolWeight(parseFloat(breadthOfProduct)*parseFloat(width)*parseFloat(height)/138.4);\r\n  // }\r\n  const handlePlaceOrderClick = () => {\r\n    props.setWidthDispatcher(width);\r\n    props.setLengthDispatcher(length);\r\n    props.setUnitDispatcher(unit);\r\n    props.setNoOfUnitsDispatcher(noOfUnits);\r\n    props.setWeightPerUnitDispatcher(weightPerUnit);\r\n    props.setPickupPinDispatcher(pickuppin);\r\n    props.setDestinationPinDispatcher(destinationpin);\r\n    props.setHeightDispatcher(height);\r\n    props.setDensity(density);\r\n    props.setMeasureable(switchToggler);\r\n    props.setTotalWeight(totalWeight);\r\n    setRedirect(true);\r\n  };\r\n\r\n  const onNumberOfUnitsChangeController = (event) => {\r\n    var no = event.target.value;\r\n    no = no < 0 ? 0 : no;\r\n    setNoOfUnits(no);\r\n  };\r\n  const onWeightPerUnitChangeController = (event) => {\r\n    var weight = event.target.value;\r\n    weight = weight < 0 ? 0 : weight;\r\n    setWeightPerUnit(weight);\r\n  };\r\n  const onLengthChangeController = (event) => {\r\n    var length = event.target.value;\r\n    length = length < 0 ? 0 : length;\r\n    setLength(length);\r\n  };\r\n\r\n  const handleCalculateClick = () => {\r\n    if (deliverZipValidator !== \"\" || pickupZipValidator !== \"\") {\r\n      alert(\"Please Fill correct Pin Codes\");\r\n      return;\r\n    }\r\n    setLoader(true);\r\n    //  var params={\r\n    //     height:height,\r\n    //     width:width,\r\n    //     length:length,\r\n    //     toPin:destinationpin,\r\n    //     fromPin:pickuppin,\r\n    //     measureable:switchToggler\r\n    // }\r\n    var params;\r\n    if (switchToggler === true) {\r\n      params = `height=${height}&width=${width}&length=${length}&toPin=${destinationpin}&fromPin=${pickuppin}&measureable=${switchToggler}`;\r\n    } else {\r\n      params = `totalWeight=${totalWeight}&density=${density}&toPin=${destinationpin}&fromPin=${pickuppin}&measureable=${switchToggler}`;\r\n    }\r\n    API.get(\"GoFlexeOrderPlacement\", `/pricing?` + params)\r\n      .then((resp) => {\r\n        console.log(resp);\r\n        setShowPrice(true);\r\n        setEstimatedPrice(resp.estimatedPrice);\r\n        setLoader(false);\r\n      })\r\n      .catch((err) => {\r\n        setLoader(false);\r\n        setShowPrice(true);\r\n        console.log(err);\r\n      });\r\n\r\n    // const url='https://2n3n7swm8f.execute-api.ap-south-1.amazonaws.com/draft0/pricing'\r\n    // axios.get(url,{\r\n\r\n    // })\r\n    // .then(resp=>{\r\n    //     console.log(resp.data);\r\n    //     setShowPrice(true);\r\n    //     setEstimatedPrice(resp.data.estimatedPrice);\r\n    //     setLoader(false);\r\n    // })\r\n    // .catch(err=>{\r\n    //     setLoader(false);\r\n    //     setShowPrice(true)\r\n    //     console.log(err);\r\n    // })\r\n  };\r\n  var measureablePerUnit = (\r\n    <React.Fragment>\r\n      <Typography className={classes.formHeadings}>Product Details</Typography>\r\n      {/*test*/}\r\n      <Grid\r\n        container\r\n        spacing={3}\r\n        style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n      >\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            type=\"number\"\r\n            id=\"units\"\r\n            name=\"units\"\r\n            label=\"No of Units\"\r\n            fullWidth\r\n            value={noOfUnits}\r\n            autoComplete=\"units\"\r\n            onChange={(event) => onNumberOfUnitsChangeController(event)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"number\"\r\n            id=\"weight\"\r\n            name=\"weight\"\r\n            label=\"Weight per unit\"\r\n            fullWidth\r\n            value={weightPerUnit}\r\n            autoComplete=\"Weight\"\r\n            onChange={(event) => onWeightPerUnitChangeController(event)}\r\n            InputProps={{\r\n              endAdornment: <InputAdornment position=\"end\">Kg</InputAdornment>,\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Typography className={classes.formHeadings}>\r\n        Dimensions per unit\r\n      </Typography>\r\n      <Grid container spacing={3} style={{ padding: 50, paddingTop: 10 }}>\r\n        <Grid item xs={12} sm={6}>\r\n          <FormControl className={classes.formControl}>\r\n            <InputLabel htmlFor=\"age-native-simple\">Unit</InputLabel>\r\n            <Select\r\n              native\r\n              //value=\"inches\"\r\n              onChange={unitChangeController}\r\n              inputProps={{\r\n                name: \"age\",\r\n                id: \"age-native-simple\",\r\n              }}\r\n            >\r\n              {constants.dimensionOptions.map((d) => (\r\n                <option value={d.value}>{d.name}</option>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            type=\"number\"\r\n            id=\"height\"\r\n            name=\"height\"\r\n            label=\"Height\"\r\n            fullWidth\r\n            value={height}\r\n            autoComplete=\"Height\"\r\n            onChange={(event) => onHeightChangeController(event)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"number\"\r\n            id=\"width\"\r\n            name=\"width\"\r\n            label=\"Width\"\r\n            fullWidth\r\n            value={width}\r\n            autoComplete=\"width\"\r\n            onChange={(event) => onWidthChangeController(event)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            type=\"number\"\r\n            id=\"length\"\r\n            name=\"length\"\r\n            label=\"Length\"\r\n            value={length}\r\n            fullWidth\r\n            onChange={(event) => onLengthChangeController(event)}\r\n            autoComplete=\"Length\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n  var notMeasureable = (\r\n    <React.Fragment>\r\n      <Typography className={classes.formHeadings}>Product Details</Typography>\r\n      {/*test*/}\r\n      <Grid\r\n        container\r\n        spacing={3}\r\n        style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n      >\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            type=\"number\"\r\n            id=\"totalWeight\"\r\n            name=\"totalWeight\"\r\n            label=\"Total Weight(in Tons)\"\r\n            value={totalWeight}\r\n            onChange={(event) => onTotalWeightChangeController(event)}\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"number\"\r\n            id=\"density\"\r\n            name=\"density\"\r\n            label=\"Weight per cubic meter\"\r\n            fullWidth\r\n            value={density}\r\n            onChange={(event) => onDensityChangeController(event)}\r\n            InputProps={{\r\n              endAdornment: <InputAdornment position=\"end\">Kg</InputAdornment>,\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const vases = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <Typography className={classes.formHeadings}>\r\n          Value Added Services\r\n        </Typography>\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n          style={{ padding: 50, paddingTop: 20, paddingBottom: 30 }}\r\n        >\r\n          {constants.vas.map((vas) => {\r\n            return (\r\n              <Grid item xs={12} sm={4}>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      //checked={state.checkedB}\r\n                      //onChange={handleChange}\r\n                      name={vas.name}\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                  label={vas.name}\r\n                />\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  var content = (\r\n    <Card className={classes.root} style={{ width: \"100%\" }}>\r\n      <CardContent style={{ padding: 0 }}>\r\n        <Typography\r\n          className={classes.title}\r\n          gutterBottom\r\n          style={{\r\n            color: \"black\",\r\n            fontSize: 20,\r\n            height: 50,\r\n            padding: 10,\r\n            paddingLeft: 55,\r\n            borderBottomStyle: \"solid\",\r\n            borderWidth: \"1px\",\r\n          }}\r\n        >\r\n          Price Calculator\r\n        </Typography>\r\n        <form>\r\n          <Typography className={classes.formHeadings}>\r\n            Location Details\r\n          </Typography>\r\n          <Grid\r\n            container\r\n            spacing={3}\r\n            style={{ padding: 50, paddingTop: 20, paddingBottom: 30 }}\r\n          >\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                required\r\n                error={pickupZipValidator !== \"\"}\r\n                helperText={\r\n                  pickupZipValidator === \"\" ? \" \" : pickupZipValidator\r\n                }\r\n                type=\"number\"\r\n                id=\"pickupzip\"\r\n                name=\"pickupzip\"\r\n                label=\"Pickup Zip\"\r\n                fullWidth\r\n                value={pickuppin}\r\n                onChange={(event) => onPickupZipChangeController(event)}\r\n                autoComplete=\"Pickup postal-code\"\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                required\r\n                error={deliverZipValidator !== \"\"}\r\n                helperText={\r\n                  deliverZipValidator === \"\" ? \" \" : deliverZipValidator\r\n                }\r\n                type=\"number\"\r\n                id=\"destinationzip\"\r\n                name=\"destinationzip\"\r\n                label=\"Destination Zip\"\r\n                fullWidth\r\n                value={destinationpin}\r\n                onChange={(event) => onDestinationZipChangeController(event)}\r\n                autoComplete=\"Destination postal-code\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <FormControlLabel\r\n            style={{ margin: 20 }}\r\n            control={\r\n              <Switch\r\n                checked={switchToggler}\r\n                onChange={handleSwitchTogglerChange}\r\n                name=\"checkedB\"\r\n                color=\"primary\"\r\n              />\r\n            }\r\n            label=\"(Measureable Dimensions)\"\r\n          />\r\n\r\n          {switchToggler === true ? measureablePerUnit : notMeasureable}\r\n\r\n          {vases()}\r\n        </form>\r\n      </CardContent>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"flex-end\",\r\n          margin: 20,\r\n        }}\r\n      >\r\n        <Button\r\n          variant=\"contained\"\r\n          style={{ backgroundColor: \"#FF8C00\" }}\r\n          onClick={handleCalculateClick}\r\n        >\r\n          Calculate\r\n        </Button>\r\n      </div>\r\n    </Card>\r\n  );\r\n\r\n  if (loader === true) {\r\n    content = (\r\n      <div class=\"jumbotron text-center\">\r\n        <p class=\"lead\">\r\n          <strong>Calculating estimated cost</strong>\r\n        </p>\r\n        <Spinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  var priceContent = null;\r\n  if (showPrice === true) {\r\n    priceContent = (\r\n      <Card className={classes.root}>\r\n        <Grid>\r\n          <Button\r\n            sm={6}\r\n            style={{\r\n              float: \"right\",\r\n              marginTop: \"10px\",\r\n              marginRight: \"30px\",\r\n              backgroundColor: \"#FF8C00\",\r\n            }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handlePlaceOrderClick}\r\n          >\r\n            Place order\r\n          </Button>\r\n        </Grid>\r\n        <div style={{ textAlign: \"center\", fontSize: \"18px\", padding: \"20px\" }}>\r\n          Estimated price is : {estimatedPrice}\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (redirect) {\r\n    return <Redirect to=\"/ordersRedir\" />;\r\n  }\r\n  return (\r\n    <div>\r\n      {content}\r\n      {priceContent}\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    height: state.order.height,\r\n    width: state.order.width,\r\n    length: state.order.length,\r\n    unit: state.order.unit,\r\n    noOfUnits: state.order.noOfUnits,\r\n    weightPerUnit: state.order.weightPerUnit,\r\n    pickupPin: state.order.pickupPin,\r\n    destinationPin: state.order.destinationPin,\r\n    measureable: state.order.measureable,\r\n    totalWeight: state.order.totalWeight,\r\n    density: state.order.density,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setHeightDispatcher: (h) => dispatch(actions.setHeight(h)),\r\n    setWidthDispatcher: (w) => dispatch(actions.setWidth(w)),\r\n    setLengthDispatcher: (l) => dispatch(actions.setLength(l)),\r\n    setUnitDispatcher: (unitOfMeasurement) =>\r\n      dispatch(actions.setUnit(unitOfMeasurement)),\r\n    setNoOfUnitsDispatcher: (numberUnits) =>\r\n      dispatch(actions.setNumberOfUnits(numberUnits)),\r\n    setWeightPerUnitDispatcher: (weightUnit) =>\r\n      dispatch(actions.setWeightPerUnit(weightUnit)),\r\n    setPickupPinDispatcher: (pPin) => dispatch(actions.setPickupPin(pPin)),\r\n    setDestinationPinDispatcher: (dPin) =>\r\n      dispatch(actions.setDestinationPin(dPin)),\r\n    setMeasureable: (isMeasureable) =>\r\n      dispatch(actions.setMeasureable(isMeasureable)),\r\n    setTotalWeight: (totalWeight) =>\r\n      dispatch(actions.setTotalWeight(totalWeight)),\r\n    setDensity: (density) => dispatch(actions.setDensity(density)),\r\n  };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, mapDispatchToProps)(OpenPriceCalculator)\r\n);\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Payments\\ShowDetails.js",["601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639","640","641","642","643","644"],"// import { useEffect } from \"react\";\r\n\r\n// const ShowDetails = (props) => {\r\n//     useEffect(()=>{\r\n//         console.log(props.data)\r\n//     },[])\r\n//     return(\r\n//         <div>\r\n//            Payment Option: {props.data.paymentOption}\r\n//         </div>\r\n//     )\r\n// }\r\n// export default ShowDetails;\r\nimport { useEffect } from \"react\";\r\nimport React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Upload from \"./Upload/Upload\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\nimport { Auth, API } from \"aws-amplify\";\r\nimport Spinner from \"../UI/Spinner\";\r\nimport {\r\n  Select,\r\n  InputLabel,\r\n  MenuItem,\r\n  Grid,\r\n  Card,\r\n  FormHelperText,\r\n  Divider,\r\n  TextField,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    height: 50,\r\n    padding: 10,\r\n    paddingLeft: 55,\r\n    //color: 'white',\r\n    borderBottomStyle: \"solid\",\r\n    borderWidth: \"1px\",\r\n  },\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n  formControl: {\r\n    //margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n});\r\n\r\nconst ShowDetails = (props) => {\r\n  useEffect(() => {\r\n    console.log(props.data);\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n  const [paymentOption, setPaymentOption] = useState(\"fullPayment\");\r\n  //const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [paymentRatio, setPaymentRatio] = useState(\"50-50\");\r\n  const [paymentMode, setPaymentMode] = useState(\"accountTransfer\");\r\n  const [data, setData] = useState(null);\r\n  const [referenceId, setReferenceId] = useState();\r\n  const [nameOfPayer, setNameOfPayer] = useState();\r\n  const [phoneOfPayer, setPhoneOfPayer] = useState();\r\n\r\n  const PaidfullPayToAccountDashboard = (\r\n    <React.Fragment>\r\n      <Card style={{ padding: 10 }}>\r\n        <Typography style={{ fontSize: 20, marginBottom: 20 }}>\r\n          Total Amount paid:{\" \"}\r\n          {props.data !== null ? props.data.totalAmount : \"x\"} INR\r\n        </Typography>\r\n        {/* <HelpIcon /> */}\r\n        <Typography style={{ fontSize: 18, marginBottom: 8 }}>\r\n          Account Details -\r\n        </Typography>\r\n        <div className=\"row\" style={{ fontSize: 16, marginBottom: 20 }}>\r\n          <div className=\"col col-xs-12 col-sm-6\" style={{ marginBottom: 6 }}>\r\n            Account No: 7814289632{\" \"}\r\n            <Tooltip\r\n              title=\"Beneficiary’s account number, make the payment to this account.\"\r\n              placement=\"top-start\"\r\n            >\r\n              <InfoIcon style={{ color: \"lightgrey\" }} fontSize=\"small\" />\r\n            </Tooltip>\r\n          </div>\r\n          <div className=\"col col-xs-12 col-sm-8\" style={{ paddingBottom: 10 }}>\r\n            Account Holder's Name: GoFlexe Ltd.{\" \"}\r\n            <Tooltip\r\n              title=\"Beneficiary’s account name, make the payment to this account.\"\r\n              placement=\"top-start\"\r\n            >\r\n              <InfoIcon style={{ color: \"lightgrey\" }} fontSize=\"small\" />\r\n            </Tooltip>\r\n          </div>\r\n\r\n          <div className=\"col col-xs-12 col-sm-6\">Bank Name: Yes Bank</div>\r\n          <div className=\"col col-xs-12 col-sm-6\">\r\n            IFSC: BNK0123456{\" \"}\r\n            <Tooltip\r\n              title=\"IFSC is short for Indian Financial System Code, represented by an 11 digit character.\"\r\n              placement=\"top-start\"\r\n            >\r\n              <InfoIcon style={{ color: \"lightgrey\" }} fontSize=\"small\" />\r\n            </Tooltip>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div>\r\n            <p\r\n              style={{\r\n                marginLeft: 20,\r\n                marginRight: 8,\r\n                marginTop: 8,\r\n                fontSize: 18,\r\n              }}\r\n            >\r\n              Reference Id:{\" \"}\r\n              {props.data.paymentMode == \"accountTransfer\"\r\n                ? props.data.paymentModeDetails.referenceId\r\n                : \"\"}\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        <Divider style={{ marginBottom: 20 }} />\r\n        {/* <p>\r\n          Note:Please submit the amount in the following account and paste the\r\n          Reference Id of the transaction in the textbox given above\r\n        </p> */}\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const PaidcashPayment = (\r\n    <React.Fragment>\r\n      <Card style={{ padding: 10 }}>\r\n        <Typography style={{ fontSize: 20, marginBottom: 20 }}>\r\n          Total Amount paid: {props.data.totalAmount} INR\r\n        </Typography>\r\n        {/* <HelpIcon /> */}\r\n        <Typography style={{ marginBottom: 10 }}>\r\n          Name and contact details of the payer\r\n        </Typography>\r\n        <div className=\"row\">\r\n          <div>\r\n            <p\r\n              style={{\r\n                marginLeft: 20,\r\n                marginRight: 8,\r\n                marginTop: 8,\r\n                fontSize: 18,\r\n              }}\r\n            >\r\n              Name:{\" \"}\r\n              {props.data !== null && props.data.paymentMode == \"cash\"\r\n                ? props.data.paymentModeDetails.nameOfPayer\r\n                : \"\"}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div>\r\n            <p\r\n              style={{\r\n                marginLeft: 20,\r\n                marginRight: 8,\r\n                marginTop: 8,\r\n                fontSize: 18,\r\n              }}\r\n            >\r\n              Phone:\r\n              {props.data.paymentMode == \"cash\"\r\n                ? props.data.paymentModeDetails.phoneOfPayer\r\n                : \"\"}\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        <Divider style={{ marginBottom: 20 }} />\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const PaidOthersPayment = (\r\n    <React.Fragment>\r\n      <Card style={{ padding: 10 }}>\r\n        <Typography style={{ fontSize: 20, marginBottom: 20 }}>\r\n          Total Amount paid: {props.data.totalAmount} INR\r\n        </Typography>\r\n        {/* <HelpIcon /> */}\r\n        Proof of Payment :\r\n        <a\r\n          href={\r\n            \"https://goflexe-kyc.s3.ap-south-1.amazonaws.com/\" +\r\n            (props.data !== null && props.data.paymentMode == \"Others\"\r\n              ? props.data.paymentModeDetails.chequeLink\r\n              : \"\")\r\n          }\r\n          target={\"_blank\"}\r\n        >\r\n          (Open)\r\n        </a>\r\n        <Divider style={{ marginBottom: 20, marginTop: 50 }} />\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const Paidcontent = (\r\n    <Card className={classes.root}>\r\n      <CardContent style={{ padding: 0 }}>\r\n        <Typography className={classes.title} gutterBottom>\r\n          Payment details\r\n        </Typography>\r\n        <Grid container spacing={0} style={{ paddingLeft: 30 }}>\r\n          <Grid item xs={12} sm={6}>\r\n            <form style={{ padding: 10 }}>\r\n              <FormControl component=\"fieldset\">\r\n                <RadioGroup\r\n                  row\r\n                  style={{ width: \"auto\" }}\r\n                  aria-label=\"position\"\r\n                  name=\"position\"\r\n                  value=\"ImmediatePayment\"\r\n                >\r\n                  <FormLabel component=\"legend\">\r\n                    Selected payment Promise:\r\n                  </FormLabel>\r\n                  <Grid\r\n                    container\r\n                    spacing={0}\r\n                    style={{ padding: 20, paddingLeft: 0, paddingBottom: 30 }}\r\n                  >\r\n                    <Grid item xs={12} sm={6}>\r\n                      <FormControlLabel\r\n                        value=\"ImmediatePayment\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Immediate Payment\"\r\n                      />\r\n                    </Grid>\r\n                    {/* <Grid item xs={12} sm={6}>\r\n                      <FormControlLabel\r\n                        value=\"30DaysCycle\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"30 Days Cycle\"\r\n                      />\r\n                    </Grid> */}\r\n                  </Grid>\r\n                </RadioGroup>\r\n              </FormControl>\r\n            </form>\r\n          </Grid>\r\n          <Grid item sm={6} style={{ padding: 10 }}>\r\n            <FormControl component=\"fieldset\">\r\n              <RadioGroup\r\n                row\r\n                style={{ width: \"auto\" }}\r\n                aria-label=\"position\"\r\n                name=\"position\"\r\n                value={props.data.paymentOption}\r\n              >\r\n                <FormLabel component=\"legend\">\r\n                  Selected payment option:\r\n                </FormLabel>\r\n                <Grid\r\n                  container\r\n                  spacing={0}\r\n                  style={{ padding: 20, paddingBottom: 30 }}\r\n                >\r\n                  {props.data.paymentOption == \"fullPayment\" ? (\r\n                    <Grid item xs={12} sm={6}>\r\n                      <FormControlLabel\r\n                        value=\"fullPayment\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Full Payment\"\r\n                      />\r\n                    </Grid>\r\n                  ) : (\r\n                    <p></p>\r\n                  )}\r\n                  {props.data.paymentOption == \"partialPayment\" ? (\r\n                    <Grid item xs={12} sm={6}>\r\n                      <FormControlLabel\r\n                        value=\"partialPayment\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Partial Payment\"\r\n                      />\r\n                    </Grid>\r\n                  ) : (\r\n                    <p></p>\r\n                  )}\r\n                  {props.data.paymentOption == \"CreditBased\" ? (\r\n                    <Grid item xs={12} sm={6}>\r\n                      <FormControlLabel\r\n                        value=\"CreditBased\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Credit Based\"\r\n                      />\r\n                    </Grid>\r\n                  ) : (\r\n                    <p></p>\r\n                  )}\r\n                  {props.data.paymentOption == \"Subscription\" ? (\r\n                    <Grid item xs={12} sm={6}>\r\n                      <FormControlLabel\r\n                        value=\"Subscription\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Subscription\"\r\n                      />\r\n                    </Grid>\r\n                  ) : (\r\n                    <p></p>\r\n                  )}\r\n                </Grid>\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={0} style={{ paddingLeft: 30 }}>\r\n          <Grid item xs={12} sm={6}>\r\n            <FormControl component=\"fieldset\">\r\n              <FormLabel component=\"legend\">Selected payment mode</FormLabel>\r\n              <RadioGroup\r\n                aria-label=\"gender\"\r\n                name=\"gender1\"\r\n                value={props.data.paymentMode}\r\n              >\r\n                {props.data.paymentMode == \"accountTransfer\" ? (\r\n                  <FormControlLabel\r\n                    value=\"accountTransfer\"\r\n                    control={<Radio color=\"primary\" />}\r\n                    label=\"Account Transfer\"\r\n                  />\r\n                ) : (\r\n                  <p></p>\r\n                )}\r\n                {props.data.paymentMode == \"cash\" ? (\r\n                  <FormControlLabel\r\n                    value=\"cash\"\r\n                    control={<Radio color=\"primary\" />}\r\n                    label=\"Cash\"\r\n                  />\r\n                ) : (\r\n                  <p></p>\r\n                )}\r\n                {props.data.paymentMode == \"Others\" ? (\r\n                  <FormControlLabel\r\n                    value=\"Others\"\r\n                    control={<Radio color=\"primary\" />}\r\n                    label=\"Others\"\r\n                  />\r\n                ) : (\r\n                  <p></p>\r\n                )}\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            {\" \"}\r\n            {props.data.paymentOption === \"CreditBased\" && (\r\n              <FormControl\r\n                style={{ marginLeft: 50 }}\r\n                className={classes.formControl}\r\n              >\r\n                <InputLabel id=\"demo-simple-select-label\">\r\n                  Payment Delay\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-simple-select-label\"\r\n                  id=\"demo-simple-select\"\r\n                  value={props.data.paymentModeDetails.paymentDelay}\r\n\r\n                  //   value={age}\r\n                  //   onChange={handleChange}\r\n                >\r\n                  {props.data.paymentModeDetails.paymentDelay == \"7 Days\" ? (\r\n                    <MenuItem value=\"7 Days\">7 Days</MenuItem>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {props.data.paymentModeDetails.paymentDelay == \"30 Days\" ? (\r\n                    <MenuItem value=\"30 Days\">30 Days</MenuItem>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {props.data.paymentModeDetails.paymentDelay == \"45 Days\" ? (\r\n                    <MenuItem value=\"45 Days\">45 Days</MenuItem>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </Select>\r\n                {props.data.paymentModeDetails.paymentDelay === \"45 Days\" && (\r\n                  <FormHelperText>\r\n                    Pay the total amount in 45 Days\r\n                  </FormHelperText>\r\n                )}\r\n                {props.data.paymentModeDetails.paymentDelay === \"30 Days\" && (\r\n                  <FormHelperText>\r\n                    Pay the total amount in 30 Days\r\n                  </FormHelperText>\r\n                )}\r\n                {props.data.paymentModeDetails.paymentDelay === \"7 Days\" && (\r\n                  <FormHelperText>\r\n                    Pay the total amount in 7 Days\r\n                  </FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            )}\r\n            {props.data.paymentOption == \"Subscription\" ? (\r\n              <FormControl\r\n                style={{ marginLeft: 50 }}\r\n                className={classes.formControl}\r\n              >\r\n                <InputLabel id=\"demo-simple-select-label\">\r\n                  Payment Cycle\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-simple-select-label\"\r\n                  id=\"demo-simple-select\"\r\n                  value={props.data.paymentModeDetails.paymentCycle}\r\n\r\n                  //   value={age}\r\n                  //   onChange={handleChange}\r\n                >\r\n                  {props.data.paymentModeDetails.paymentCycle == \"Monthly\" ? (\r\n                    <MenuItem value=\"Monthly\">Monthly</MenuItem>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {props.data.paymentModeDetails.paymentCycle == \"Weekly\" ? (\r\n                    <MenuItem value=\"Weekly\">Weekly</MenuItem>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </Select>\r\n                {props.data.paymentModeDetails.paymentCycle === \"Monthly\" && (\r\n                  <FormHelperText>Pay each Month</FormHelperText>\r\n                )}\r\n                {props.data.paymentModeDetails.paymentCycle === \"Weekly\" && (\r\n                  <FormHelperText>Pay each Week</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {props.data.paymentOption == \"partialPayment\" && (\r\n              <FormControl\r\n                style={{ marginLeft: 50 }}\r\n                className={classes.formControl}\r\n              >\r\n                <InputLabel id=\"demo-simple-select-label\">\r\n                  Payment Ratio\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-simple-select-label\"\r\n                  id=\"demo-simple-select\"\r\n                  value={props.data.paymentModeDetails.paymentRatio}\r\n                >\r\n                  {props.data.paymentModeDetails.paymentRatio == \"10%\" ? (\r\n                    <MenuItem value=\"10%\">10%</MenuItem>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {props.data.paymentModeDetails.paymentRatio == \"30%\" ? (\r\n                    <MenuItem value=\"30%\">30%</MenuItem>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {props.data.paymentModeDetails.paymentRatio == \"50%\" ? (\r\n                    <MenuItem value=\"50%\">50%</MenuItem>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </Select>\r\n                {props.data.paymentModeDetails.paymentRatio === \"50%\" && (\r\n                  <FormHelperText>\r\n                    Pay 50% now and 50%\r\n                    <br /> at time of delivery\r\n                  </FormHelperText>\r\n                )}\r\n                {props.data.paymentModeDetails.paymentRatio === \"30%\" && (\r\n                  <FormHelperText>\r\n                    Pay 30% now and 70%\r\n                    <br /> at time of delivery\r\n                  </FormHelperText>\r\n                )}\r\n                {props.data.paymentModeDetails.paymentRatio === \"10%\" && (\r\n                  <FormHelperText>\r\n                    Pay 10% now and 90%\r\n                    <br /> at time of delivery\r\n                  </FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n        <form style={{ padding: 10 }}>\r\n          <Divider style={{ marginBottom: 5 }} />\r\n\r\n          <Grid\r\n            container\r\n            spacing={3}\r\n            style={{ padding: 50, paddingTop: 20, paddingBottom: 30 }}\r\n          >\r\n            <Grid item xs={12} sm={12}>\r\n              {props.data.paymentMode === \"accountTransfer\" &&\r\n                PaidfullPayToAccountDashboard}\r\n              {props.data.paymentMode === \"cash\" && PaidcashPayment}\r\n              {props.data.paymentMode === \"Others\" && PaidOthersPayment}\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </CardContent>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"flex-end\",\r\n          marginRight: 60,\r\n        }}\r\n      >\r\n        <Link to=\"/\" className=\"btn btn-primary\">\r\n          <Button\r\n            className=\"AllButtons\"\r\n            variant=\"contained\"\r\n            // style={{backgroundColor:'#FF8C00'}}\r\n            // onClick={() => handleAccountTransfer()}\r\n          >\r\n            Go Home\r\n          </Button>\r\n        </Link>\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"flex-end\",\r\n          margin: 20,\r\n        }}\r\n      ></div>\r\n    </Card>\r\n  );\r\n\r\n  return <div>{Paidcontent}</div>;\r\n};\r\n\r\nexport default ShowDetails;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Track\\Track.js",["645","646","647","648","649","650","651","652","653","654","655","656","657","658","659","660","661","662","663","664","665","666","667","668","669","670","671","672","673","674","675","676","677","678"],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Preference\\AddAddressForm.js",["679","680","681","682","683","684","685","686","687","688","689"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport constants from \"../../Constants/constants\";\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  TextareaAutosize,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nconst useStyles = makeStyles({\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n});\r\n\r\nconst AddAddressForm = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const [Area, setArea] = useState(\"\");\r\n  const [deliveryArea, setDeliveryArea] = useState(\"\");\r\n  const [ZipValidator, setZipValidator] = useState(\"\");\r\n  const [deliverZipValidator, setDeliverZipValidator] = useState(\"\");\r\n  const [PinData, setPinData] = useState([]);\r\n  useEffect(() => {\r\n    var today = new Date();\r\n    var dd = String(today.getDate()).padStart(2, \"0\");\r\n    var mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\r\n    var yyyy = today.getFullYear();\r\n\r\n    today = yyyy + \"-\" + mm + \"-\" + dd;\r\n  }, []);\r\n  const onAddressChangeController = (event) => {\r\n    var Address = event.target.value;\r\n  };\r\n  const onAreaChangeController = (event) => {\r\n    setArea(event.target.value);\r\n  };\r\n\r\n  const onPinChangeController = (event) => {\r\n    var PinPinCode = parseInt(event.target.value, 10);\r\n    if (PinPinCode < 0) {\r\n      setZipValidator(\"Cannot be a negative value\");\r\n\r\n      return;\r\n    } else {\r\n      setZipValidator(\"\");\r\n    }\r\n    var count = 0,\r\n      temp = PinPinCode;\r\n    while (temp > 0) {\r\n      count++;\r\n      temp = Math.floor(temp / 10);\r\n    }\r\n    if (count == 6) {\r\n      const api_url = \"https://api.postalpincode.in/pincode/\" + PinPinCode;\r\n\r\n      // Defining async function\r\n      async function getapi(url) {\r\n        // Storing response\r\n\r\n        const response = await fetch(url);\r\n\r\n        // Storing data in form of JSON\r\n        var data = await response.json();\r\n        console.log(data);\r\n        setPinData(\r\n          data !== null && data[0].PostOffice !== null ? data[0].PostOffice : \"\"\r\n        );\r\n      }\r\n      // Calling that async function\r\n      getapi(api_url);\r\n    }\r\n    if (count !== 6) {\r\n      setZipValidator(\"Must be of six digits\");\r\n    } else {\r\n      setZipValidator(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CardContent style={{ padding: 0 }}>\r\n      <Typography className=\"TypographyTitle\" gutterBottom>\r\n        Address Details\r\n      </Typography>\r\n      <form>\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n          style={{\r\n            paddingLeft: 20,\r\n            paddingTop: 40,\r\n            paddingBottom: 40,\r\n            paddingRight: 20,\r\n          }}\r\n        >\r\n          <Grid item xs={12} sm={5}>\r\n            <TextField required id=\"Name\" name=\"Name\" label=\"Full Name\" fullWidth />\r\n          </Grid>\r\n          <Grid item xs={12} sm={5}>\r\n            <TextField\r\n              required\r\n              id=\"ContactNo\"\r\n              name=\"ContactNo\"\r\n              label=\"Phone Number\"\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={5}>\r\n            <TextField\r\n              required\r\n              id=\"address\"\r\n              name=\"address\"\r\n              label=\"Address\"\r\n              fullWidth\r\n              onChange={(event) => onAddressChangeController(event)}\r\n              autoComplete=\"shipping address-line1\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={2}>\r\n            <TextField\r\n              required\r\n              error={ZipValidator !== \"\"}\r\n              helperText={\r\n                ZipValidator === \"\"\r\n                  ? PinData == \"\"\r\n                    ? \"\"\r\n                    : PinData[0].District + \", \" + PinData[0].State\r\n                  : ZipValidator\r\n              }\r\n              type=\"number\"\r\n              id=\"PinCode\r\n              name=\"\r\n              PinCode\r\n              label=\"PinCode\"\r\n              fullWidth\r\n              // value={props.pickupPin}\r\n              onChange={(event) => onPinChangeController(event)}\r\n              autoComplete=\"Pickup postal-code\"\r\n            />\r\n          </Grid>\r\n          {PinData.length !== 0 ? (\r\n            <Grid item xs={12} sm={3}>\r\n              <FormControl className={classes.formControl} fullWidth>\r\n                <InputLabel htmlFor=\"age-native-simple\">Locality</InputLabel>\r\n                <Select\r\n                  native\r\n                  onChange={(event) => onAreaChangeController(event)}\r\n                  value={Area}\r\n                  inputProps={{\r\n                    name: \"age\",\r\n                    id: \"age-native-simple\",\r\n                  }}\r\n                >\r\n                  {PinData.map((d) => (\r\n                    <option>{d.Name}</option>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          ) : (\r\n            <p></p>\r\n          )}\r\n        </Grid>\r\n        <Button\r\n          className=\"row AllButtons\"\r\n          variant=\"contained\"\r\n          style={{\r\n            float: \"right\",\r\n\r\n            marginBottom: \"10px\",\r\n          }}\r\n        >\r\n          Submit\r\n        </Button>\r\n        <Button\r\n          onClick={() => props.toggleForm()}\r\n          className=\"row\"\r\n          variant=\"contained\"\r\n          color=\"default\"\r\n          style={{\r\n            float: \"right\",\r\n            marginRight: \"10px\",\r\n            marginBottom: \"10px\",\r\n          }}\r\n        >\r\n          Cancel\r\n        </Button>\r\n      </form>\r\n    </CardContent>\r\n  );\r\n};\r\n\r\nexport default AddAddressForm;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Preference\\ShowAddresses.js",["690","691","692","693","694","695"],"import React, { useEffect, useState } from \"react\";\r\nimport Spinner from \"../UI/Spinner\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\r\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\r\nimport { Auth, API } from \"aws-amplify\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport EditForm from \"./EditForm\";\r\nconst useRowStyles = makeStyles({\r\n  root: {\r\n    \"& > *\": {\r\n      borderBottom: \"unset\",\r\n    },\r\n  },\r\n});\r\n\r\nexport default function CollapsibleTable(props) {\r\n  const classes = useRowStyles();\r\n  const [openedPages, setOpenedPages] = useState([]);\r\n  const [checkedBoxes, setCheckedBoxes] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [rows, setRows] = useState([]);\r\n  const [toEdit, setToEdit] = useState(false);\r\n  // useEffect(async () => {\r\n  //   var currentUser = await Auth.currentUserInfo();\r\n  //   var owner = currentUser.username;\r\n  //   API.get(\"GoFlexeOrderPlacement\", `/inventory?type=owner&ownerId=${owner}`)\r\n  //     .then((response) => {\r\n  //       // Add your code here\r\n  //       console.log(response);\r\n  //       setRows(response);\r\n  //       setLoading(false);\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       console.log(error);\r\n  //       setLoading(false);\r\n  //     });\r\n  // }, [toEdit]);\r\n\r\n  const handleOpen = (event, idx) => {\r\n    const selectedIndex = openedPages.indexOf(idx);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(openedPages, idx);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(openedPages.slice(1));\r\n    } else if (selectedIndex === openedPages.length - 1) {\r\n      newSelected = newSelected.concat(openedPages.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        openedPages.slice(0, selectedIndex),\r\n        openedPages.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setOpenedPages(newSelected);\r\n  };\r\n\r\n  const handleChecked = (event, idx) => {\r\n    const selectedIndex = checkedBoxes.indexOf(idx);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(checkedBoxes, idx);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(checkedBoxes.slice(1));\r\n    } else if (selectedIndex === checkedBoxes.length - 1) {\r\n      newSelected = newSelected.concat(checkedBoxes.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        checkedBoxes.slice(0, selectedIndex),\r\n        checkedBoxes.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setCheckedBoxes(newSelected);\r\n  };\r\n\r\n  const isOpened = (idx) => openedPages.indexOf(idx) !== -1;\r\n  const isChecked = (idx) => checkedBoxes.indexOf(idx) !== -1;\r\n\r\n  const showEditPage = () => {\r\n    setToEdit(!toEdit);\r\n    props.editButtonClicked();\r\n  };\r\n\r\n  if (toEdit === true) {\r\n    return (\r\n      <EditForm row={rows[checkedBoxes[0]]} editButtonClicked={showEditPage} />\r\n    );\r\n  }\r\n  if (loading === true) {\r\n    return <Spinner />;\r\n  }\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table aria-label=\"collapsible table\">\r\n        {checkedBoxes.length > 0 && (\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell />\r\n              <TableCell />\r\n              <TableCell />\r\n              {checkedBoxes.length === 1 ? (\r\n                <TableCell align=\"right\">\r\n                  <IconButton onClick={() => showEditPage()}>\r\n                    <Tooltip title=\"Edit\">\r\n                      <EditIcon label=\"Edit\" color=\"primary\" />\r\n                    </Tooltip>\r\n                  </IconButton>\r\n                </TableCell>\r\n              ) : (\r\n                <TableCell />\r\n              )}\r\n              {checkedBoxes.length > 0 ? (\r\n                <TableCell align=\"right\">\r\n                  <IconButton>\r\n                    <Tooltip title=\"Delete\">\r\n                      <DeleteIcon color=\"secondary\" />\r\n                    </Tooltip>\r\n                  </IconButton>\r\n                </TableCell>\r\n              ) : (\r\n                <TableCell />\r\n              )}\r\n            </TableRow>\r\n          </TableHead>\r\n        )}\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell />\r\n            <TableCell>Name</TableCell>\r\n            <TableCell>Contact No.</TableCell>\r\n            <TableCell>Location</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row, idx) => {\r\n            const isItemOpened = isOpened(idx);\r\n            const labelId = `enhanced-table-checkbox-${idx}`;\r\n            return (\r\n              <React.Fragment>\r\n                <TableRow className={classes.root}>\r\n                  <TableCell>\r\n                    <IconButton\r\n                      aria-label=\"expand row\"\r\n                      size=\"small\"\r\n                      onClick={(event) => handleOpen(event, idx)}\r\n                    >\r\n                      {isItemOpened ? (\r\n                        <KeyboardArrowUpIcon />\r\n                      ) : (\r\n                        <KeyboardArrowDownIcon />\r\n                      )}\r\n                    </IconButton>\r\n                    <Checkbox\r\n                      size=\"small\"\r\n                      color=\"primary\"\r\n                      checked={isChecked(idx)}\r\n                      name={idx}\r\n                      onChange={(event) => handleChecked(event, idx)}\r\n                      inputProps={{ \"aria-label\": \"secondary checkbox\" }}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {row.productName}\r\n                  </TableCell>\r\n                  <TableCell>{row.productType.label}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <TableCell\r\n                    style={{ paddingBottom: 0, paddingTop: 0 }}\r\n                    colSpan={6}\r\n                  >\r\n                    <Collapse in={isItemOpened} timeout=\"auto\" unmountOnExit>\r\n                      <Box margin={1}>\r\n                        <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                          More Details\r\n                        </Typography>\r\n                        <TableRow>\r\n                          <th>Categories: </th>\r\n                          <td>\r\n                            {\" \"}\r\n                            {row.categories.map(\r\n                              (category) => category.label + \" .\"\r\n                            )}\r\n                          </td>\r\n                          {/* //{console.log(row.features)} */}\r\n                        </TableRow>\r\n                        {row.measurable === true ? (\r\n                          <React.Fragment>\r\n                            <TableRow>\r\n                              <th>Length: </th>\r\n                              <td> {row.length}</td>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                              <th>Width: </th>\r\n                              <td> {row.width} </td>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                              <th>Height: </th>\r\n                              <td> {row.height} </td>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                              <th>Unit Of Measurement: </th>\r\n                              <td>\r\n                                {\" \"}\r\n                                {row.unit === null ? \"-\" : row.unit.label}{\" \"}\r\n                              </td>\r\n                            </TableRow>\r\n                          </React.Fragment>\r\n                        ) : (\r\n                          <React.Fragment>\r\n                            <TableRow>\r\n                              <th>Density: </th>\r\n                              <td> {row.density} kg per cubic meter</td>\r\n                            </TableRow>\r\n                          </React.Fragment>\r\n                        )}\r\n                        {/* {row.measurable===true ?\r\n                    <React.Fragment>\r\n                        <TableRow>\r\n                        <th>Length: </th>\r\n                        <td> {row.length}</td>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                        <th>Width: </th>\r\n                        <td> {row.width} </td>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                        <th>Height: </th>\r\n                        <td> {row.height} </td>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                        <th>Unit Of Measurement: </th>\r\n                        <td> {row.unit} </td>\r\n                        </TableRow>\r\n                    </React.Fragment>\r\n                    :\r\n                    <React.Fragment>\r\n                      <TableRow>\r\n                        <th>Length: </th>\r\n                        <td> </td>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                        <th>Width: </th>\r\n                        <td>  </td>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                        <th>Height: </th>\r\n                        <td>  </td>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                        <th>Unit Of Measurement: </th>\r\n                        <td>  </td>\r\n                        </TableRow>\r\n                    </React.Fragment>\r\n               } */}\r\n                      </Box>\r\n                    </Collapse>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Preference\\EditForm.js",["696","697","698","699","700"],"import React, { useEffect, useState } from \"react\";\r\n/// /inventory      get(id,owner,type)\r\n// /pricing get(length,width,height,toPin,fromPin,weightPerUnit,measureable=true/false,other)\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Button,\r\n  Select,\r\n  Breadcrumbs,\r\n} from \"@material-ui/core\";\r\nimport { Auth, API } from \"aws-amplify\";\r\nimport Spinner from \"../UI/Spinner\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Multiselect } from \"multiselect-react-dropdown\";\r\nimport constants from \"../../Constants/constants\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../../Globalcss/globalcss.css\";\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    // minWidth: 275,\r\n  },\r\n  // title: {\r\n  //     fontSize: 20,\r\n  //     height: 50,\r\n  //     padding: 10,\r\n  //     paddingLeft: 55,\r\n  //     color: 'white'\r\n  // },\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n  formControl: {\r\n    marginTop: \"1%\",\r\n  },\r\n  container: {\r\n    justifyContent: \"space-between\",\r\n    flexDirection: \"column\",\r\n    display: \"flex\",\r\n  },\r\n  btnHolder: {\r\n    justifyContent: \"flex-end\",\r\n    display: \"flex\",\r\n    marginRight: \"30px\",\r\n    marginBottom: \"30px\",\r\n  },\r\n});\r\n\r\nconst AddProductForm = (props) => {\r\n  const classes = useStyles();\r\n  const [newProductName, setNewProductName] = useState(props.row.productName);\r\n  const [newProductType, setNewProductType] = useState(props.row.productType);\r\n  const [unit, setUnit] = useState(\"centimeters\");\r\n  const [height, setHeight] = useState(props.row.height);\r\n  const [width, setWidth] = useState(props.row.width);\r\n  const [length, setLength] = useState(props.row.length);\r\n  const [weightPerUnit, setWeightPerunit] = useState(props.row.weightPerUnit);\r\n  const [features, setFeatures] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const capabilityOptions = {\r\n    options: constants.inventoryFeatures,\r\n  };\r\n  const [lengthValidator, setLengthValidator] = useState(\"\");\r\n  const [widthValidator, setWidthValidator] = useState(\"\");\r\n  const [heightValidator, setHeightValidator] = useState(\"\");\r\n  const [weightPerUnitValidator, setWeightPerUnitValidator] = useState(\"\");\r\n\r\n  const onMultiSelect = (selectedList, selectedItem) => {\r\n    // selectedList.map((select) => alert(select.name))\r\n    setFeatures(selectedList);\r\n  };\r\n  const onMultiRemove = (selectedList, removedItem) => {\r\n    // alert(selectedList)\r\n    setFeatures(selectedList);\r\n  };\r\n  const onHeightChangeController = (event) => {\r\n    if (event.target.value < 0) {\r\n      setHeightValidator(\"Height cannot be negative\");\r\n    } else {\r\n      setHeightValidator(\"\");\r\n    }\r\n    setHeight(event.target.value);\r\n  };\r\n  const onWidthChangeController = (event) => {\r\n    if (event.target.value < 0) {\r\n      setWidthValidator(\"Width cannot be negative\");\r\n    } else {\r\n      setWidthValidator(\"\");\r\n    }\r\n\r\n    setWidth(event.target.value);\r\n  };\r\n  const onLengthChangeController = (event) => {\r\n    if (event.target.value < 0) {\r\n      setLengthValidator(\"Length cannot be negative\");\r\n    } else {\r\n      setLengthValidator(\"\");\r\n    }\r\n    setLength(event.target.value);\r\n  };\r\n  const unitChangeController = (event) => {\r\n    setUnit(event.target.value);\r\n  };\r\n  const onProductNameChange = (event) => {\r\n    setNewProductName(event.target.value);\r\n  };\r\n  const onProductTypeChange = (event) => {\r\n    setNewProductType(event.target.value);\r\n  };\r\n  const onWeightPerUnitChangeController = (event) => {\r\n    if (event.target.value < 0) {\r\n      setWeightPerUnitValidator(\"Weight Per unit cannot be negative\");\r\n    } else {\r\n      setWeightPerUnitValidator(\"\");\r\n    }\r\n    setWeightPerunit(event.target.value);\r\n  };\r\n\r\n  const submitTruck = () => {\r\n    if (newProductName == \"\") {\r\n      alert(\"Product Name can't be empty\");\r\n      return;\r\n    }\r\n\r\n    // if (features == null || features == \"\") {\r\n    //   alert(\"Product Features can't be empty\");\r\n    //   return;\r\n    // }\r\n    if (\r\n      weightPerUnit == null ||\r\n      height == null ||\r\n      length == null ||\r\n      width == null\r\n    ) {\r\n      alert(\"Product Dimensions can't be empty\");\r\n      return;\r\n    }\r\n    if (unit === \"\") {\r\n      alert(\"Select measurement Unit for your Product\");\r\n      return;\r\n    }\r\n    if (lengthValidator !== \"\") {\r\n      alert(lengthValidator);\r\n      return;\r\n    }\r\n     if (widthValidator !== \"\") {\r\n       alert(widthValidator);\r\n       return;\r\n     }\r\n      if (heightValidator !== \"\") {\r\n        alert(heightValidator);\r\n        return;\r\n      }\r\n       if (weightPerUnitValidator !== \"\") {\r\n         alert(weightPerUnitValidator);\r\n         return;\r\n       }\r\n    //   if ( density == null) {\r\n    //     alert(\"Density cannot be empty\");\r\n    //     return;\r\n    //   }\r\n\r\n    setLoading(true);\r\n    // alert(props.row.productType)\r\n    const data = {\r\n      owner: props.row.owner,\r\n      productName: newProductName,\r\n      productId: props.row.productId,\r\n      productType: props.row.productType,\r\n      unit: unit,\r\n      height: height,\r\n      width: width,\r\n      length: length,\r\n      weightPerUnit: weightPerUnit,\r\n      location: \"ok\",\r\n      features: features,\r\n    };\r\n    const payload = {\r\n      body: data,\r\n    };\r\n    API.put(\"GoFlexeOrderPlacement\", `/inventory?type=owner`, payload)\r\n      .then((response) => {\r\n        // Add your code here\r\n        console.log(response);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.response);\r\n        alert(\"Please Try again Later\");\r\n        setLoading(false);\r\n      });\r\n    console.log(data);\r\n    setLoading(false);\r\n    props.editButtonClicked();\r\n    // var params = `type=owner&owner=${props.row.owner}&location=${location}&productType=${newProductType}&productName=${newProductName}&productId=${props.row.productId}`\r\n  };\r\n\r\n  if (loading === true) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div style={{ overflow: \"hidden\" }}>\r\n      <Breadcrumbs style={{ marginBottom: \"10px\" }} aria-label=\"breadcrumb\">\r\n        <Link\r\n          onClick={() => props.editButtonClicked()}\r\n          color=\"inherit\"\r\n          to=\"/inventory-manager\"\r\n        >\r\n          Inventory\r\n        </Link>\r\n        <Typography color=\"textPrimary\">Edit Product</Typography>\r\n      </Breadcrumbs>\r\n      <Typography fullWidth className=\"TypographyTitle\" gutterBottom>\r\n        Edit Product\r\n      </Typography>\r\n      <form>\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n          style={{ paddingLeft: 50, paddingRight: 50, paddingTop: 10 }}\r\n        >\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              required\r\n              type=\"text\"\r\n              id=\"productName\"\r\n              name=\"productName\"\r\n              label=\"Enter Product Name\"\r\n              value={newProductName}\r\n              onChange={(event) => onProductNameChange(event)}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          {/* <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                    required\r\n                    type=\"text\"\r\n                    id=\"productType\"\r\n                    name=\"productType\"\r\n                    label=\"Enter Product Type\"\r\n                    value={newProductType}\r\n                    onChange={(event) => onProductTypeChange(event)}\r\n                    fullWidth          \r\n                />\r\n            </Grid> */}\r\n          <Grid item xs={12} sm={8}>\r\n            <Multiselect\r\n              style={{\r\n                borderLeft: \"0px\",\r\n                overflow: \"hidden\",\r\n                multiselectContainer: { height: \"75px\" },\r\n              }}\r\n              options={capabilityOptions.options} // Options to display in the dropdown\r\n              onSelect={onMultiSelect} // Function will trigger on select event\r\n              onRemove={onMultiRemove} // Function will trigger on remove event\r\n              displayValue=\"name\" // Property name to display in the dropdown options\r\n              placeholder=\"Features(Select Many)\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Typography className={classes.formHeadings}>\r\n          Dimensions per unit\r\n        </Typography>\r\n        <Grid container spacing={3} style={{ padding: 50, paddingTop: 10 }}>\r\n          <Grid item xs={12} sm={6}>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor=\"age-native-simple\">Unit</InputLabel>\r\n              <Select\r\n                native\r\n                //value=\"inches\"\r\n                onChange={unitChangeController}\r\n                inputProps={{\r\n                  name: \"age\",\r\n                  id: \"age-native-simple\",\r\n                }}\r\n              >\r\n                {constants.dimensionOptions.map((d) => (\r\n                  <option value={d.value}>{d.name}</option>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              error={heightValidator !== \"\"}\r\n              helperText={heightValidator === \"\" ? \" \" : heightValidator}\r\n              required\r\n              type=\"number\"\r\n              id=\"height\"\r\n              name=\"height\"\r\n              label=\"Height\"\r\n              fullWidth\r\n              value={height}\r\n              autoComplete=\"Height\"\r\n              onChange={(event) => onHeightChangeController(event)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              error={widthValidator !== \"\"}\r\n              helperText={widthValidator === \"\" ? \" \" : widthValidator}\r\n              type=\"number\"\r\n              id=\"width\"\r\n              name=\"width\"\r\n              label=\"Width\"\r\n              fullWidth\r\n              value={width}\r\n              autoComplete=\"width\"\r\n              onChange={(event) => onWidthChangeController(event)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              error={lengthValidator !== \"\"}\r\n              helperText={lengthValidator === \"\" ? \" \" : lengthValidator}\r\n              required\r\n              type=\"number\"\r\n              id=\"length\"\r\n              name=\"length\"\r\n              label=\"Length\"\r\n              value={length}\r\n              fullWidth\r\n              onChange={(event) => onLengthChangeController(event)}\r\n              autoComplete=\"Length\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Typography className={classes.formHeadings}>Other Details</Typography>\r\n        <Grid container spacing={3} style={{ padding: 50, paddingTop: 10 }}>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              error={weightPerUnitValidator !== \"\"}\r\n              helperText={\r\n                weightPerUnitValidator === \"\" ? \" \" : weightPerUnitValidator\r\n              }\r\n              type=\"number\"\r\n              id=\"weightPerUnit\"\r\n              name=\"weightPerUnit\"\r\n              label=\"Weight Per Unit(in Kg)\"\r\n              fullWidth\r\n              value={weightPerUnit}\r\n              autoComplete=\"weightPerUnit\"\r\n              onChange={(event) => onWeightPerUnitChangeController(event)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Button\r\n          onClick={submitTruck}\r\n          className=\"row\"\r\n          variant=\"contained\"\r\n          style={{\r\n            float: \"right\",\r\n            backgroundColor: \"#f9a825\",\r\n            marginBottom: \"10px\",\r\n          }}\r\n        >\r\n          Submit\r\n        </Button>\r\n        <Button\r\n          onClick={() => props.editButtonClicked()}\r\n          className=\"row\"\r\n          variant=\"contained\"\r\n          color=\"default\"\r\n          style={{ float: \"right\", marginRight: \"10px\", marginBottom: \"10px\" }}\r\n        >\r\n          Cancel\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default AddProductForm;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\PaymentPromise.js",["701","702","703","704","705","706","707","708","709","710","711","712","713","714","715"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport Select from \"react-select\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport {\r\n  TextField,\r\n  Grid,\r\n  FormHelperText,\r\n  Card,\r\n  Checkbox,\r\n  Button,\r\n  IconButton,\r\n  Divider,\r\n  Switch,\r\n} from \"@material-ui/core\";\r\nimport constants from \"../../Constants/constants\";\r\nimport {\r\n  InputLabel,\r\n  Select as MaterialSelect,\r\n  TextareaAutosize,\r\n} from \"@material-ui/core\";\r\nconst useStyles = makeStyles({\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n});\r\n\r\nconst PaymentPromise = (props) => {\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      elevation: 0,\r\n      // minHeight:900\r\n    },\r\n    title: {\r\n      fontSize: 20,\r\n      height: 50,\r\n      padding: 10,\r\n      paddingLeft: 55,\r\n      borderBottomStyle: \"solid\",\r\n      borderWidth: \"1px\",\r\n    },\r\n    formHeadings: {\r\n      margin: 20,\r\n      marginBottom: 0,\r\n    },\r\n    formControl: {\r\n      marginTop: \"1%\",\r\n      width: \"50%\",\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  const [paymentOption, setPaymentOption] = useState(\"fullPayment\");\r\n  const handlePaymentOptionChange = (event) => {\r\n    setPaymentOption(event.target.value);\r\n    //alert(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <CardContent>\r\n      <Typography className={classes.title}>Value Added Services</Typography>\r\n      <Grid\r\n        container\r\n        spacing={3}\r\n        style={{ padding: 50, paddingTop: 20, paddingBottom: 30 }}\r\n      >\r\n        {constants.vas.map((vas) => {\r\n          return (\r\n            <Grid item xs={12} sm={4}>\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    //checked={state.checkedB}\r\n                    //onChange={handleChange}\r\n                    name={vas.name}\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label={vas.name}\r\n              />\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n      <CardContent style={{ padding: 10 }}>\r\n        <Typography fullWidth className={classes.title} gutterBottom>\r\n          Payments\r\n        </Typography>\r\n        <form style={{ padding: 10 }}>\r\n          <FormControl component=\"fieldset\">\r\n            <RadioGroup\r\n              row\r\n              style={{ width: \"auto\" }}\r\n              aria-label=\"position\"\r\n              name=\"position\"\r\n              onChange={(event) => handlePaymentOptionChange(event)}\r\n              value={paymentOption}\r\n            >\r\n              <FormLabel component=\"legend\">\r\n                Choose your payment Promise:\r\n              </FormLabel>\r\n              <Grid\r\n                container\r\n                spacing={0}\r\n                style={{ padding: 20, paddingBottom: 30 }}\r\n              >\r\n                <Grid item xs={12} sm={6}>\r\n                  <FormControlLabel\r\n                    value=\"ImmediatePayment\"\r\n                    control={<Radio color=\"primary\" />}\r\n                    label=\"Immediate Payment\"\r\n                  />\r\n                  {paymentOption === \"ImmediatePayment\" && (\r\n                    <FormHelperText>\r\n                      For Immediate Payment, We will do negotitation on your\r\n                      behalf to give you a discounted price.\r\n                    </FormHelperText>\r\n                  )}\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <FormControlLabel\r\n                    value=\"30DaysCycle\"\r\n                    control={<Radio color=\"primary\" />}\r\n                    label=\"30 Days Cycle\"\r\n                  />\r\n                  {paymentOption === \"30DaysCycle\" && (\r\n                    <FormHelperText>Pay in 30 Days.</FormHelperText>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n            </RadioGroup>\r\n          </FormControl>\r\n        </form>\r\n      </CardContent>\r\n    </CardContent>\r\n  );\r\n};\r\n\r\nexport default PaymentPromise;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Track\\TaskManager.js",["716","717","718","719","720","721","722","723","724","725","726","727","728","729","730","731","732","733","734","735","736","737","738","739","740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756"],{"ruleId":"757","replacedBy":"758"},{"ruleId":"759","replacedBy":"760"},{"ruleId":"761","severity":1,"message":"762","line":36,"column":16,"nodeType":"763","messageId":"764","endLine":36,"endColumn":19},{"ruleId":"765","severity":1,"message":"766","line":12,"column":5,"nodeType":"767","messageId":"768","endLine":48,"endColumn":6},{"ruleId":"769","severity":1,"message":"770","line":94,"column":15,"nodeType":"771","endLine":94,"endColumn":52},{"ruleId":"769","severity":1,"message":"770","line":318,"column":19,"nodeType":"771","endLine":321,"endColumn":20},{"ruleId":"761","severity":1,"message":"772","line":1,"column":17,"nodeType":"763","messageId":"764","endLine":1,"endColumn":26},{"ruleId":"761","severity":1,"message":"773","line":1,"column":39,"nodeType":"763","messageId":"764","endLine":1,"endColumn":47},{"ruleId":"761","severity":1,"message":"774","line":16,"column":3,"nodeType":"763","messageId":"764","endLine":16,"endColumn":9},{"ruleId":"761","severity":1,"message":"775","line":17,"column":3,"nodeType":"763","messageId":"764","endLine":17,"endColumn":22},{"ruleId":"761","severity":1,"message":"776","line":20,"column":3,"nodeType":"763","messageId":"764","endLine":20,"endColumn":12},{"ruleId":"761","severity":1,"message":"777","line":21,"column":3,"nodeType":"763","messageId":"764","endLine":21,"endColumn":11},{"ruleId":"761","severity":1,"message":"778","line":24,"column":3,"nodeType":"763","messageId":"764","endLine":24,"endColumn":9},{"ruleId":"761","severity":1,"message":"779","line":25,"column":3,"nodeType":"763","messageId":"764","endLine":25,"endColumn":13},{"ruleId":"761","severity":1,"message":"780","line":26,"column":3,"nodeType":"763","messageId":"764","endLine":26,"endColumn":10},{"ruleId":"761","severity":1,"message":"781","line":27,"column":3,"nodeType":"763","messageId":"764","endLine":27,"endColumn":19},{"ruleId":"761","severity":1,"message":"782","line":28,"column":3,"nodeType":"763","messageId":"764","endLine":28,"endColumn":9},{"ruleId":"761","severity":1,"message":"783","line":30,"column":10,"nodeType":"763","messageId":"764","endLine":30,"endColumn":23},{"ruleId":"761","severity":1,"message":"784","line":31,"column":10,"nodeType":"763","messageId":"764","endLine":31,"endColumn":16},{"ruleId":"761","severity":1,"message":"785","line":78,"column":10,"nodeType":"763","messageId":"764","endLine":78,"endColumn":15},{"ruleId":"761","severity":1,"message":"786","line":78,"column":17,"nodeType":"763","messageId":"764","endLine":78,"endColumn":25},{"ruleId":"787","severity":1,"message":"788","line":125,"column":13,"nodeType":"789","messageId":"790","endLine":125,"endColumn":15},{"ruleId":"787","severity":1,"message":"788","line":128,"column":36,"nodeType":"789","messageId":"790","endLine":128,"endColumn":38},{"ruleId":"761","severity":1,"message":"791","line":134,"column":9,"nodeType":"763","messageId":"764","endLine":134,"endColumn":25},{"ruleId":"792","severity":1,"message":"793","line":193,"column":20,"nodeType":"794","messageId":"795","endLine":193,"endColumn":22},{"ruleId":"792","severity":1,"message":"796","line":196,"column":9,"nodeType":"797","messageId":"798","endLine":196,"endColumn":16},{"ruleId":"787","severity":1,"message":"788","line":198,"column":60,"nodeType":"789","messageId":"790","endLine":198,"endColumn":62},{"ruleId":"792","severity":1,"message":"796","line":200,"column":9,"nodeType":"797","messageId":"798","endLine":200,"endColumn":16},{"ruleId":"787","severity":1,"message":"788","line":205,"column":62,"nodeType":"789","messageId":"790","endLine":205,"endColumn":64},{"ruleId":"787","severity":1,"message":"788","line":206,"column":62,"nodeType":"789","messageId":"790","endLine":206,"endColumn":64},{"ruleId":"792","severity":1,"message":"796","line":209,"column":9,"nodeType":"797","messageId":"798","endLine":209,"endColumn":16},{"ruleId":"787","severity":1,"message":"788","line":213,"column":62,"nodeType":"789","messageId":"790","endLine":213,"endColumn":64},{"ruleId":"787","severity":1,"message":"788","line":214,"column":62,"nodeType":"789","messageId":"790","endLine":214,"endColumn":64},{"ruleId":"792","severity":1,"message":"796","line":217,"column":9,"nodeType":"797","messageId":"798","endLine":217,"endColumn":16},{"ruleId":"787","severity":1,"message":"788","line":221,"column":61,"nodeType":"789","messageId":"790","endLine":221,"endColumn":63},{"ruleId":"787","severity":1,"message":"788","line":222,"column":61,"nodeType":"789","messageId":"790","endLine":222,"endColumn":63},{"ruleId":"792","severity":1,"message":"796","line":225,"column":9,"nodeType":"797","messageId":"798","endLine":225,"endColumn":16},{"ruleId":"787","severity":1,"message":"788","line":229,"column":69,"nodeType":"789","messageId":"790","endLine":229,"endColumn":71},{"ruleId":"787","severity":1,"message":"788","line":230,"column":69,"nodeType":"789","messageId":"790","endLine":230,"endColumn":71},{"ruleId":"792","severity":1,"message":"796","line":233,"column":9,"nodeType":"797","messageId":"798","endLine":233,"endColumn":16},{"ruleId":"787","severity":1,"message":"788","line":237,"column":60,"nodeType":"789","messageId":"790","endLine":237,"endColumn":62},{"ruleId":"792","severity":1,"message":"796","line":240,"column":9,"nodeType":"797","messageId":"798","endLine":240,"endColumn":16},{"ruleId":"787","severity":1,"message":"788","line":250,"column":65,"nodeType":"789","messageId":"790","endLine":250,"endColumn":67},{"ruleId":"787","severity":1,"message":"788","line":251,"column":26,"nodeType":"789","messageId":"790","endLine":251,"endColumn":28},{"ruleId":"792","severity":1,"message":"796","line":254,"column":9,"nodeType":"797","messageId":"798","endLine":254,"endColumn":16},{"ruleId":"792","severity":1,"message":"796","line":258,"column":9,"nodeType":"797","messageId":"798","endLine":258,"endColumn":16},{"ruleId":"792","severity":1,"message":"796","line":262,"column":9,"nodeType":"797","messageId":"798","endLine":262,"endColumn":16},{"ruleId":"787","severity":1,"message":"788","line":329,"column":24,"nodeType":"789","messageId":"790","endLine":329,"endColumn":26},{"ruleId":"787","severity":1,"message":"788","line":344,"column":39,"nodeType":"789","messageId":"790","endLine":344,"endColumn":41},{"ruleId":"787","severity":1,"message":"788","line":351,"column":38,"nodeType":"789","messageId":"790","endLine":351,"endColumn":40},{"ruleId":"787","severity":1,"message":"788","line":374,"column":39,"nodeType":"789","messageId":"790","endLine":374,"endColumn":41},{"ruleId":"787","severity":1,"message":"788","line":382,"column":38,"nodeType":"789","messageId":"790","endLine":382,"endColumn":40},{"ruleId":"799","severity":1,"message":"800","line":405,"column":14,"nodeType":"763","messageId":"801","endLine":405,"endColumn":15},{"ruleId":"787","severity":1,"message":"788","line":411,"column":36,"nodeType":"789","messageId":"790","endLine":411,"endColumn":38},{"ruleId":"761","severity":1,"message":"802","line":1,"column":17,"nodeType":"763","messageId":"764","endLine":1,"endColumn":26},{"ruleId":"761","severity":1,"message":"773","line":1,"column":28,"nodeType":"763","messageId":"764","endLine":1,"endColumn":36},{"ruleId":"761","severity":1,"message":"803","line":2,"column":22,"nodeType":"763","messageId":"764","endLine":2,"endColumn":32},{"ruleId":"761","severity":1,"message":"804","line":3,"column":8,"nodeType":"763","messageId":"764","endLine":3,"endColumn":18},{"ruleId":"761","severity":1,"message":"776","line":5,"column":3,"nodeType":"763","messageId":"764","endLine":5,"endColumn":12},{"ruleId":"761","severity":1,"message":"805","line":7,"column":3,"nodeType":"763","messageId":"764","endLine":7,"endColumn":14},{"ruleId":"761","severity":1,"message":"806","line":8,"column":3,"nodeType":"763","messageId":"764","endLine":8,"endColumn":13},{"ruleId":"761","severity":1,"message":"778","line":9,"column":3,"nodeType":"763","messageId":"764","endLine":9,"endColumn":9},{"ruleId":"761","severity":1,"message":"807","line":10,"column":13,"nodeType":"763","messageId":"764","endLine":10,"endColumn":27},{"ruleId":"761","severity":1,"message":"782","line":11,"column":3,"nodeType":"763","messageId":"764","endLine":11,"endColumn":9},{"ruleId":"761","severity":1,"message":"808","line":12,"column":3,"nodeType":"763","messageId":"764","endLine":12,"endColumn":7},{"ruleId":"761","severity":1,"message":"809","line":13,"column":3,"nodeType":"763","messageId":"764","endLine":13,"endColumn":12},{"ruleId":"761","severity":1,"message":"810","line":16,"column":7,"nodeType":"763","messageId":"764","endLine":16,"endColumn":16},{"ruleId":"761","severity":1,"message":"780","line":4,"column":8,"nodeType":"763","messageId":"764","endLine":4,"endColumn":15},{"ruleId":"761","severity":1,"message":"811","line":8,"column":8,"nodeType":"763","messageId":"764","endLine":8,"endColumn":17},{"ruleId":"787","severity":1,"message":"788","line":80,"column":34,"nodeType":"789","messageId":"790","endLine":80,"endColumn":36},{"ruleId":"787","severity":1,"message":"788","line":241,"column":20,"nodeType":"789","messageId":"790","endLine":241,"endColumn":22},{"ruleId":"812","severity":1,"message":"813","line":123,"column":6,"nodeType":"814","endLine":123,"endColumn":8,"suggestions":"815"},{"ruleId":"812","severity":1,"message":"816","line":66,"column":4,"nodeType":"814","endLine":66,"endColumn":6,"suggestions":"817"},{"ruleId":"761","severity":1,"message":"818","line":7,"column":8,"nodeType":"763","messageId":"764","endLine":7,"endColumn":22},{"ruleId":"761","severity":1,"message":"819","line":5,"column":10,"nodeType":"763","messageId":"764","endLine":5,"endColumn":14},{"ruleId":"761","severity":1,"message":"820","line":6,"column":8,"nodeType":"763","messageId":"764","endLine":6,"endColumn":16},{"ruleId":"761","severity":1,"message":"821","line":7,"column":8,"nodeType":"763","messageId":"764","endLine":7,"endColumn":18},{"ruleId":"761","severity":1,"message":"780","line":8,"column":18,"nodeType":"763","messageId":"764","endLine":8,"endColumn":25},{"ruleId":"761","severity":1,"message":"822","line":34,"column":9,"nodeType":"763","messageId":"764","endLine":34,"endColumn":16},{"ruleId":"761","severity":1,"message":"810","line":12,"column":7,"nodeType":"763","messageId":"764","endLine":12,"endColumn":16},{"ruleId":"761","severity":1,"message":"823","line":44,"column":18,"nodeType":"763","messageId":"764","endLine":44,"endColumn":26},{"ruleId":"787","severity":1,"message":"788","line":65,"column":17,"nodeType":"789","messageId":"790","endLine":65,"endColumn":19},{"ruleId":"761","severity":1,"message":"819","line":5,"column":10,"nodeType":"763","messageId":"764","endLine":5,"endColumn":14},{"ruleId":"761","severity":1,"message":"820","line":6,"column":8,"nodeType":"763","messageId":"764","endLine":6,"endColumn":16},{"ruleId":"761","severity":1,"message":"821","line":7,"column":8,"nodeType":"763","messageId":"764","endLine":7,"endColumn":18},{"ruleId":"761","severity":1,"message":"780","line":8,"column":18,"nodeType":"763","messageId":"764","endLine":8,"endColumn":25},{"ruleId":"761","severity":1,"message":"822","line":34,"column":9,"nodeType":"763","messageId":"764","endLine":34,"endColumn":16},{"ruleId":"787","severity":1,"message":"788","line":174,"column":38,"nodeType":"789","messageId":"790","endLine":174,"endColumn":40},{"ruleId":"787","severity":1,"message":"788","line":181,"column":38,"nodeType":"789","messageId":"790","endLine":181,"endColumn":40},{"ruleId":"787","severity":1,"message":"788","line":205,"column":37,"nodeType":"789","messageId":"790","endLine":205,"endColumn":39},{"ruleId":"787","severity":1,"message":"788","line":213,"column":38,"nodeType":"789","messageId":"790","endLine":213,"endColumn":40},{"ruleId":"799","severity":1,"message":"800","line":236,"column":14,"nodeType":"763","messageId":"801","endLine":236,"endColumn":15},{"ruleId":"761","severity":1,"message":"779","line":7,"column":8,"nodeType":"763","messageId":"764","endLine":7,"endColumn":18},{"ruleId":"761","severity":1,"message":"824","line":8,"column":8,"nodeType":"763","messageId":"764","endLine":8,"endColumn":16},{"ruleId":"761","severity":1,"message":"825","line":6,"column":13,"nodeType":"763","messageId":"764","endLine":6,"endColumn":20},{"ruleId":"761","severity":1,"message":"826","line":10,"column":8,"nodeType":"763","messageId":"764","endLine":10,"endColumn":20},{"ruleId":"761","severity":1,"message":"827","line":43,"column":10,"nodeType":"763","messageId":"764","endLine":43,"endColumn":21},{"ruleId":"787","severity":1,"message":"788","line":65,"column":52,"nodeType":"789","messageId":"790","endLine":65,"endColumn":54},{"ruleId":"812","severity":1,"message":"828","line":88,"column":6,"nodeType":"814","endLine":88,"endColumn":8,"suggestions":"829"},{"ruleId":"761","severity":1,"message":"830","line":157,"column":9,"nodeType":"763","messageId":"764","endLine":157,"endColumn":34},{"ruleId":"761","severity":1,"message":"831","line":161,"column":9,"nodeType":"763","messageId":"764","endLine":161,"endColumn":27},{"ruleId":"761","severity":1,"message":"832","line":164,"column":9,"nodeType":"763","messageId":"764","endLine":164,"endColumn":34},{"ruleId":"787","severity":1,"message":"788","line":169,"column":15,"nodeType":"789","messageId":"790","endLine":169,"endColumn":17},{"ruleId":"787","severity":1,"message":"788","line":181,"column":22,"nodeType":"789","messageId":"790","endLine":181,"endColumn":24},{"ruleId":"812","severity":1,"message":"828","line":48,"column":6,"nodeType":"814","endLine":48,"endColumn":8,"suggestions":"833"},{"ruleId":"787","severity":1,"message":"788","line":136,"column":15,"nodeType":"789","messageId":"790","endLine":136,"endColumn":17},{"ruleId":"787","severity":1,"message":"788","line":173,"column":15,"nodeType":"789","messageId":"790","endLine":173,"endColumn":17},{"ruleId":"787","severity":1,"message":"788","line":270,"column":32,"nodeType":"789","messageId":"790","endLine":270,"endColumn":34},{"ruleId":"787","severity":1,"message":"788","line":364,"column":34,"nodeType":"789","messageId":"790","endLine":364,"endColumn":36},{"ruleId":"761","severity":1,"message":"834","line":343,"column":8,"nodeType":"763","messageId":"764","endLine":343,"endColumn":15},{"ruleId":"761","severity":1,"message":"835","line":344,"column":8,"nodeType":"763","messageId":"764","endLine":344,"endColumn":13},{"ruleId":"761","severity":1,"message":"836","line":345,"column":8,"nodeType":"763","messageId":"764","endLine":345,"endColumn":18},{"ruleId":"761","severity":1,"message":"781","line":355,"column":8,"nodeType":"763","messageId":"764","endLine":355,"endColumn":24},{"ruleId":"761","severity":1,"message":"805","line":356,"column":8,"nodeType":"763","messageId":"764","endLine":356,"endColumn":19},{"ruleId":"761","severity":1,"message":"837","line":357,"column":8,"nodeType":"763","messageId":"764","endLine":357,"endColumn":17},{"ruleId":"761","severity":1,"message":"838","line":358,"column":8,"nodeType":"763","messageId":"764","endLine":358,"endColumn":16},{"ruleId":"761","severity":1,"message":"839","line":362,"column":3,"nodeType":"763","messageId":"764","endLine":362,"endColumn":17},{"ruleId":"761","severity":1,"message":"808","line":363,"column":3,"nodeType":"763","messageId":"764","endLine":363,"endColumn":7},{"ruleId":"761","severity":1,"message":"777","line":364,"column":3,"nodeType":"763","messageId":"764","endLine":364,"endColumn":11},{"ruleId":"761","severity":1,"message":"840","line":372,"column":10,"nodeType":"763","messageId":"764","endLine":372,"endColumn":21},{"ruleId":"761","severity":1,"message":"841","line":432,"column":10,"nodeType":"763","messageId":"764","endLine":432,"endColumn":14},{"ruleId":"761","severity":1,"message":"842","line":435,"column":23,"nodeType":"763","messageId":"764","endLine":435,"endColumn":37},{"ruleId":"761","severity":1,"message":"843","line":437,"column":9,"nodeType":"763","messageId":"764","endLine":437,"endColumn":26},{"ruleId":"812","severity":1,"message":"844","line":480,"column":6,"nodeType":"814","endLine":480,"endColumn":8,"suggestions":"845"},{"ruleId":"761","severity":1,"message":"846","line":552,"column":9,"nodeType":"763","messageId":"764","endLine":552,"endColumn":34},{"ruleId":"761","severity":1,"message":"847","line":583,"column":9,"nodeType":"763","messageId":"764","endLine":583,"endColumn":30},{"ruleId":"799","severity":1,"message":"848","line":613,"column":13,"nodeType":"763","messageId":"801","endLine":613,"endColumn":17},{"ruleId":"787","severity":1,"message":"788","line":905,"column":14,"nodeType":"789","messageId":"790","endLine":905,"endColumn":16},{"ruleId":"761","severity":1,"message":"849","line":4,"column":8,"nodeType":"763","messageId":"764","endLine":4,"endColumn":17},{"ruleId":"812","severity":1,"message":"850","line":55,"column":13,"nodeType":"794","endLine":64,"endColumn":4},{"ruleId":"761","severity":1,"message":"851","line":56,"column":9,"nodeType":"763","messageId":"764","endLine":56,"endColumn":20},{"ruleId":"812","severity":1,"message":"852","line":64,"column":6,"nodeType":"814","endLine":64,"endColumn":8,"suggestions":"853"},{"ruleId":"761","severity":1,"message":"781","line":6,"column":3,"nodeType":"763","messageId":"764","endLine":6,"endColumn":19},{"ruleId":"761","severity":1,"message":"805","line":8,"column":3,"nodeType":"763","messageId":"764","endLine":8,"endColumn":14},{"ruleId":"761","severity":1,"message":"806","line":9,"column":3,"nodeType":"763","messageId":"764","endLine":9,"endColumn":13},{"ruleId":"761","severity":1,"message":"854","line":13,"column":3,"nodeType":"763","messageId":"764","endLine":13,"endColumn":17},{"ruleId":"761","severity":1,"message":"834","line":15,"column":8,"nodeType":"763","messageId":"764","endLine":15,"endColumn":15},{"ruleId":"761","severity":1,"message":"840","line":22,"column":10,"nodeType":"763","messageId":"764","endLine":22,"endColumn":21},{"ruleId":"761","severity":1,"message":"855","line":54,"column":7,"nodeType":"763","messageId":"764","endLine":54,"endColumn":16},{"ruleId":"761","severity":1,"message":"822","line":88,"column":9,"nodeType":"763","messageId":"764","endLine":88,"endColumn":16},{"ruleId":"761","severity":1,"message":"856","line":96,"column":10,"nodeType":"763","messageId":"764","endLine":96,"endColumn":18},{"ruleId":"761","severity":1,"message":"857","line":99,"column":10,"nodeType":"763","messageId":"764","endLine":99,"endColumn":17},{"ruleId":"761","severity":1,"message":"858","line":100,"column":19,"nodeType":"763","messageId":"764","endLine":100,"endColumn":29},{"ruleId":"761","severity":1,"message":"859","line":104,"column":10,"nodeType":"763","messageId":"764","endLine":104,"endColumn":22},{"ruleId":"761","severity":1,"message":"860","line":121,"column":9,"nodeType":"763","messageId":"764","endLine":121,"endColumn":34},{"ruleId":"761","severity":1,"message":"861","line":124,"column":9,"nodeType":"763","messageId":"764","endLine":124,"endColumn":30},{"ruleId":"761","severity":1,"message":"862","line":184,"column":9,"nodeType":"763","messageId":"764","endLine":184,"endColumn":35},{"ruleId":"787","severity":1,"message":"788","line":196,"column":24,"nodeType":"789","messageId":"790","endLine":196,"endColumn":26},{"ruleId":"787","severity":1,"message":"788","line":200,"column":24,"nodeType":"789","messageId":"790","endLine":200,"endColumn":26},{"ruleId":"787","severity":1,"message":"788","line":204,"column":42,"nodeType":"789","messageId":"790","endLine":204,"endColumn":44},{"ruleId":"787","severity":1,"message":"788","line":530,"column":28,"nodeType":"789","messageId":"790","endLine":530,"endColumn":30},{"ruleId":"787","severity":1,"message":"788","line":536,"column":27,"nodeType":"789","messageId":"790","endLine":536,"endColumn":29},{"ruleId":"787","severity":1,"message":"788","line":543,"column":25,"nodeType":"789","messageId":"790","endLine":543,"endColumn":27},{"ruleId":"761","severity":1,"message":"863","line":157,"column":19,"nodeType":"763","messageId":"764","endLine":157,"endColumn":26},{"ruleId":"761","severity":1,"message":"802","line":1,"column":17,"nodeType":"763","messageId":"764","endLine":1,"endColumn":26},{"ruleId":"761","severity":1,"message":"805","line":6,"column":3,"nodeType":"763","messageId":"764","endLine":6,"endColumn":14},{"ruleId":"761","severity":1,"message":"806","line":7,"column":3,"nodeType":"763","messageId":"764","endLine":7,"endColumn":13},{"ruleId":"761","severity":1,"message":"840","line":18,"column":10,"nodeType":"763","messageId":"764","endLine":18,"endColumn":21},{"ruleId":"761","severity":1,"message":"822","line":54,"column":9,"nodeType":"763","messageId":"764","endLine":54,"endColumn":16},{"ruleId":"787","severity":1,"message":"788","line":121,"column":24,"nodeType":"789","messageId":"790","endLine":121,"endColumn":26},{"ruleId":"787","severity":1,"message":"788","line":125,"column":42,"nodeType":"789","messageId":"790","endLine":125,"endColumn":44},{"ruleId":"787","severity":1,"message":"788","line":129,"column":24,"nodeType":"789","messageId":"790","endLine":129,"endColumn":26},{"ruleId":"787","severity":1,"message":"788","line":132,"column":23,"nodeType":"789","messageId":"790","endLine":132,"endColumn":25},{"ruleId":"787","severity":1,"message":"788","line":134,"column":16,"nodeType":"789","messageId":"790","endLine":134,"endColumn":18},{"ruleId":"787","severity":1,"message":"788","line":136,"column":16,"nodeType":"789","messageId":"790","endLine":136,"endColumn":18},{"ruleId":"787","severity":1,"message":"788","line":138,"column":15,"nodeType":"789","messageId":"790","endLine":138,"endColumn":17},{"ruleId":"787","severity":1,"message":"788","line":403,"column":28,"nodeType":"789","messageId":"790","endLine":403,"endColumn":30},{"ruleId":"787","severity":1,"message":"788","line":409,"column":27,"nodeType":"789","messageId":"790","endLine":409,"endColumn":29},{"ruleId":"787","severity":1,"message":"788","line":416,"column":25,"nodeType":"789","messageId":"790","endLine":416,"endColumn":27},{"ruleId":"761","severity":1,"message":"864","line":2,"column":8,"nodeType":"763","messageId":"764","endLine":2,"endColumn":19},{"ruleId":"787","severity":1,"message":"788","line":94,"column":39,"nodeType":"789","messageId":"790","endLine":94,"endColumn":41},{"ruleId":"787","severity":1,"message":"788","line":143,"column":33,"nodeType":"789","messageId":"790","endLine":143,"endColumn":35},{"ruleId":"787","severity":1,"message":"788","line":153,"column":33,"nodeType":"789","messageId":"790","endLine":153,"endColumn":35},{"ruleId":"787","severity":1,"message":"788","line":163,"column":33,"nodeType":"789","messageId":"790","endLine":163,"endColumn":35},{"ruleId":"787","severity":1,"message":"788","line":179,"column":33,"nodeType":"789","messageId":"790","endLine":179,"endColumn":35},{"ruleId":"787","severity":1,"message":"788","line":259,"column":34,"nodeType":"789","messageId":"790","endLine":259,"endColumn":36},{"ruleId":"787","severity":1,"message":"788","line":269,"column":34,"nodeType":"789","messageId":"790","endLine":269,"endColumn":36},{"ruleId":"787","severity":1,"message":"788","line":279,"column":34,"nodeType":"789","messageId":"790","endLine":279,"endColumn":36},{"ruleId":"787","severity":1,"message":"788","line":295,"column":34,"nodeType":"789","messageId":"790","endLine":295,"endColumn":36},{"ruleId":"761","severity":1,"message":"802","line":1,"column":15,"nodeType":"763","messageId":"764","endLine":1,"endColumn":24},{"ruleId":"761","severity":1,"message":"865","line":2,"column":8,"nodeType":"763","messageId":"764","endLine":2,"endColumn":15},{"ruleId":"761","severity":1,"message":"819","line":3,"column":9,"nodeType":"763","messageId":"764","endLine":3,"endColumn":13},{"ruleId":"761","severity":1,"message":"808","line":5,"column":5,"nodeType":"763","messageId":"764","endLine":5,"endColumn":9},{"ruleId":"761","severity":1,"message":"864","line":6,"column":5,"nodeType":"763","messageId":"764","endLine":6,"endColumn":16},{"ruleId":"761","severity":1,"message":"804","line":7,"column":5,"nodeType":"763","messageId":"764","endLine":7,"endColumn":15},{"ruleId":"761","severity":1,"message":"866","line":10,"column":5,"nodeType":"763","messageId":"764","endLine":10,"endColumn":16},{"ruleId":"761","severity":1,"message":"822","line":32,"column":11,"nodeType":"763","messageId":"764","endLine":32,"endColumn":18},{"ruleId":"761","severity":1,"message":"867","line":33,"column":23,"nodeType":"763","messageId":"764","endLine":33,"endColumn":36},{"ruleId":"761","severity":1,"message":"868","line":36,"column":11,"nodeType":"763","messageId":"764","endLine":36,"endColumn":14},{"ruleId":"761","severity":1,"message":"802","line":1,"column":17,"nodeType":"763","messageId":"764","endLine":1,"endColumn":26},{"ruleId":"761","severity":1,"message":"869","line":45,"column":10,"nodeType":"763","messageId":"764","endLine":45,"endColumn":16},{"ruleId":"761","severity":1,"message":"870","line":45,"column":18,"nodeType":"763","messageId":"764","endLine":45,"endColumn":27},{"ruleId":"871","severity":1,"message":"872","line":63,"column":29,"nodeType":"789","messageId":"873","endLine":63,"endColumn":30},{"ruleId":"871","severity":1,"message":"872","line":87,"column":37,"nodeType":"789","messageId":"873","endLine":87,"endColumn":38},{"ruleId":"871","severity":1,"message":"872","line":111,"column":45,"nodeType":"789","messageId":"873","endLine":111,"endColumn":46},{"ruleId":"871","severity":1,"message":"872","line":158,"column":53,"nodeType":"789","messageId":"873","endLine":158,"endColumn":54},{"ruleId":"761","severity":1,"message":"802","line":1,"column":15,"nodeType":"763","messageId":"764","endLine":1,"endColumn":24},{"ruleId":"761","severity":1,"message":"865","line":2,"column":8,"nodeType":"763","messageId":"764","endLine":2,"endColumn":15},{"ruleId":"761","severity":1,"message":"819","line":3,"column":9,"nodeType":"763","messageId":"764","endLine":3,"endColumn":13},{"ruleId":"761","severity":1,"message":"808","line":5,"column":5,"nodeType":"763","messageId":"764","endLine":5,"endColumn":9},{"ruleId":"761","severity":1,"message":"864","line":6,"column":5,"nodeType":"763","messageId":"764","endLine":6,"endColumn":16},{"ruleId":"761","severity":1,"message":"804","line":7,"column":5,"nodeType":"763","messageId":"764","endLine":7,"endColumn":15},{"ruleId":"761","severity":1,"message":"866","line":10,"column":5,"nodeType":"763","messageId":"764","endLine":10,"endColumn":16},{"ruleId":"761","severity":1,"message":"822","line":32,"column":11,"nodeType":"763","messageId":"764","endLine":32,"endColumn":18},{"ruleId":"761","severity":1,"message":"874","line":33,"column":23,"nodeType":"763","messageId":"764","endLine":33,"endColumn":36},{"ruleId":"761","severity":1,"message":"868","line":35,"column":11,"nodeType":"763","messageId":"764","endLine":35,"endColumn":14},{"ruleId":"875","severity":1,"message":"876","line":81,"column":21,"nodeType":"877","endLine":81,"endColumn":38},{"ruleId":"761","severity":1,"message":"802","line":1,"column":17,"nodeType":"763","messageId":"764","endLine":1,"endColumn":26},{"ruleId":"761","severity":1,"message":"866","line":11,"column":35,"nodeType":"763","messageId":"764","endLine":11,"endColumn":46},{"ruleId":"761","severity":1,"message":"878","line":36,"column":19,"nodeType":"763","messageId":"764","endLine":36,"endColumn":29},{"ruleId":"787","severity":1,"message":"788","line":57,"column":25,"nodeType":"789","messageId":"790","endLine":57,"endColumn":27},{"ruleId":"787","severity":1,"message":"788","line":64,"column":27,"nodeType":"789","messageId":"790","endLine":64,"endColumn":29},{"ruleId":"787","severity":1,"message":"788","line":67,"column":27,"nodeType":"789","messageId":"790","endLine":67,"endColumn":29},{"ruleId":"787","severity":1,"message":"788","line":82,"column":32,"nodeType":"789","messageId":"790","endLine":82,"endColumn":34},{"ruleId":"787","severity":1,"message":"788","line":86,"column":33,"nodeType":"789","messageId":"790","endLine":86,"endColumn":35},{"ruleId":"787","severity":1,"message":"788","line":91,"column":35,"nodeType":"789","messageId":"790","endLine":91,"endColumn":37},{"ruleId":"787","severity":1,"message":"788","line":97,"column":35,"nodeType":"789","messageId":"790","endLine":97,"endColumn":37},{"ruleId":"787","severity":1,"message":"788","line":101,"column":25,"nodeType":"789","messageId":"790","endLine":101,"endColumn":27},{"ruleId":"871","severity":1,"message":"872","line":119,"column":29,"nodeType":"789","messageId":"873","endLine":119,"endColumn":30},{"ruleId":"871","severity":1,"message":"872","line":150,"column":37,"nodeType":"789","messageId":"873","endLine":150,"endColumn":38},{"ruleId":"787","severity":1,"message":"788","line":286,"column":17,"nodeType":"789","messageId":"790","endLine":286,"endColumn":19},{"ruleId":"761","severity":1,"message":"802","line":1,"column":15,"nodeType":"763","messageId":"764","endLine":1,"endColumn":24},{"ruleId":"761","severity":1,"message":"865","line":2,"column":8,"nodeType":"763","messageId":"764","endLine":2,"endColumn":15},{"ruleId":"761","severity":1,"message":"819","line":3,"column":9,"nodeType":"763","messageId":"764","endLine":3,"endColumn":13},{"ruleId":"761","severity":1,"message":"808","line":5,"column":5,"nodeType":"763","messageId":"764","endLine":5,"endColumn":9},{"ruleId":"761","severity":1,"message":"864","line":6,"column":5,"nodeType":"763","messageId":"764","endLine":6,"endColumn":16},{"ruleId":"761","severity":1,"message":"804","line":7,"column":5,"nodeType":"763","messageId":"764","endLine":7,"endColumn":15},{"ruleId":"761","severity":1,"message":"866","line":10,"column":5,"nodeType":"763","messageId":"764","endLine":10,"endColumn":16},{"ruleId":"761","severity":1,"message":"822","line":32,"column":11,"nodeType":"763","messageId":"764","endLine":32,"endColumn":18},{"ruleId":"761","severity":1,"message":"879","line":33,"column":23,"nodeType":"763","messageId":"764","endLine":33,"endColumn":36},{"ruleId":"761","severity":1,"message":"868","line":35,"column":11,"nodeType":"763","messageId":"764","endLine":35,"endColumn":14},{"ruleId":"875","severity":1,"message":"876","line":50,"column":129,"nodeType":"877","endLine":50,"endColumn":146},{"ruleId":"875","severity":1,"message":"876","line":59,"column":131,"nodeType":"877","endLine":59,"endColumn":148},{"ruleId":"761","severity":1,"message":"802","line":1,"column":17,"nodeType":"763","messageId":"764","endLine":1,"endColumn":26},{"ruleId":"761","severity":1,"message":"866","line":11,"column":35,"nodeType":"763","messageId":"764","endLine":11,"endColumn":46},{"ruleId":"761","severity":1,"message":"878","line":35,"column":19,"nodeType":"763","messageId":"764","endLine":35,"endColumn":29},{"ruleId":"787","severity":1,"message":"788","line":44,"column":27,"nodeType":"789","messageId":"790","endLine":44,"endColumn":29},{"ruleId":"787","severity":1,"message":"788","line":47,"column":27,"nodeType":"789","messageId":"790","endLine":47,"endColumn":29},{"ruleId":"787","severity":1,"message":"788","line":57,"column":21,"nodeType":"789","messageId":"790","endLine":57,"endColumn":23},{"ruleId":"787","severity":1,"message":"788","line":61,"column":23,"nodeType":"789","messageId":"790","endLine":61,"endColumn":25},{"ruleId":"787","severity":1,"message":"788","line":66,"column":34,"nodeType":"789","messageId":"790","endLine":66,"endColumn":36},{"ruleId":"787","severity":1,"message":"788","line":70,"column":34,"nodeType":"789","messageId":"790","endLine":70,"endColumn":36},{"ruleId":"871","severity":1,"message":"872","line":89,"column":29,"nodeType":"789","messageId":"873","endLine":89,"endColumn":30},{"ruleId":"871","severity":1,"message":"872","line":113,"column":37,"nodeType":"789","messageId":"873","endLine":113,"endColumn":38},{"ruleId":"871","severity":1,"message":"872","line":143,"column":45,"nodeType":"789","messageId":"873","endLine":143,"endColumn":46},{"ruleId":"787","severity":1,"message":"788","line":267,"column":17,"nodeType":"789","messageId":"790","endLine":267,"endColumn":19},{"ruleId":"761","severity":1,"message":"802","line":1,"column":17,"nodeType":"763","messageId":"764","endLine":1,"endColumn":26},{"ruleId":"761","severity":1,"message":"804","line":3,"column":8,"nodeType":"763","messageId":"764","endLine":3,"endColumn":18},{"ruleId":"761","severity":1,"message":"834","line":7,"column":8,"nodeType":"763","messageId":"764","endLine":7,"endColumn":15},{"ruleId":"761","severity":1,"message":"866","line":8,"column":35,"nodeType":"763","messageId":"764","endLine":8,"endColumn":46},{"ruleId":"761","severity":1,"message":"822","line":27,"column":9,"nodeType":"763","messageId":"764","endLine":27,"endColumn":16},{"ruleId":"761","severity":1,"message":"878","line":28,"column":19,"nodeType":"763","messageId":"764","endLine":28,"endColumn":29},{"ruleId":"787","severity":1,"message":"788","line":47,"column":35,"nodeType":"789","messageId":"790","endLine":47,"endColumn":37},{"ruleId":"787","severity":1,"message":"788","line":51,"column":31,"nodeType":"789","messageId":"790","endLine":51,"endColumn":33},{"ruleId":"787","severity":1,"message":"788","line":55,"column":26,"nodeType":"789","messageId":"790","endLine":55,"endColumn":28},{"ruleId":"871","severity":1,"message":"872","line":78,"column":29,"nodeType":"789","messageId":"873","endLine":78,"endColumn":30},{"ruleId":"787","severity":1,"message":"788","line":108,"column":27,"nodeType":"789","messageId":"790","endLine":108,"endColumn":29},{"ruleId":"787","severity":1,"message":"788","line":169,"column":17,"nodeType":"789","messageId":"790","endLine":169,"endColumn":19},{"ruleId":"761","severity":1,"message":"880","line":33,"column":10,"nodeType":"763","messageId":"764","endLine":33,"endColumn":17},{"ruleId":"871","severity":1,"message":"872","line":58,"column":31,"nodeType":"789","messageId":"873","endLine":58,"endColumn":32},{"ruleId":"761","severity":1,"message":"778","line":18,"column":10,"nodeType":"763","messageId":"764","endLine":18,"endColumn":16},{"ruleId":"761","severity":1,"message":"808","line":18,"column":18,"nodeType":"763","messageId":"764","endLine":18,"endColumn":22},{"ruleId":"761","severity":1,"message":"881","line":18,"column":24,"nodeType":"763","messageId":"764","endLine":18,"endColumn":28},{"ruleId":"761","severity":1,"message":"779","line":18,"column":30,"nodeType":"763","messageId":"764","endLine":18,"endColumn":40},{"ruleId":"761","severity":1,"message":"882","line":37,"column":10,"nodeType":"763","messageId":"764","endLine":37,"endColumn":14},{"ruleId":"761","severity":1,"message":"880","line":38,"column":10,"nodeType":"763","messageId":"764","endLine":38,"endColumn":17},{"ruleId":"761","severity":1,"message":"883","line":86,"column":9,"nodeType":"763","messageId":"764","endLine":86,"endColumn":14},{"ruleId":"761","severity":1,"message":"884","line":14,"column":10,"nodeType":"763","messageId":"764","endLine":14,"endColumn":14},{"ruleId":"812","severity":1,"message":"852","line":228,"column":6,"nodeType":"814","endLine":228,"endColumn":8,"suggestions":"885"},{"ruleId":"761","severity":1,"message":"834","line":12,"column":8,"nodeType":"763","messageId":"764","endLine":12,"endColumn":15},{"ruleId":"761","severity":1,"message":"840","line":31,"column":10,"nodeType":"763","messageId":"764","endLine":31,"endColumn":21},{"ruleId":"761","severity":1,"message":"841","line":90,"column":10,"nodeType":"763","messageId":"764","endLine":90,"endColumn":14},{"ruleId":"761","severity":1,"message":"886","line":101,"column":34,"nodeType":"763","messageId":"764","endLine":101,"endColumn":59},{"ruleId":"761","severity":1,"message":"843","line":108,"column":9,"nodeType":"763","messageId":"764","endLine":108,"endColumn":26},{"ruleId":"812","severity":1,"message":"844","line":155,"column":6,"nodeType":"814","endLine":155,"endColumn":8,"suggestions":"887"},{"ruleId":"787","severity":1,"message":"788","line":176,"column":15,"nodeType":"789","messageId":"790","endLine":176,"endColumn":17},{"ruleId":"787","severity":1,"message":"788","line":223,"column":15,"nodeType":"789","messageId":"790","endLine":223,"endColumn":17},{"ruleId":"761","severity":1,"message":"846","line":332,"column":9,"nodeType":"763","messageId":"764","endLine":332,"endColumn":34},{"ruleId":"787","severity":1,"message":"788","line":379,"column":46,"nodeType":"789","messageId":"790","endLine":379,"endColumn":48},{"ruleId":"792","severity":1,"message":"793","line":412,"column":20,"nodeType":"794","messageId":"795","endLine":412,"endColumn":22},{"ruleId":"792","severity":1,"message":"796","line":415,"column":9,"nodeType":"797","messageId":"798","endLine":415,"endColumn":16},{"ruleId":"787","severity":1,"message":"788","line":417,"column":60,"nodeType":"789","messageId":"790","endLine":417,"endColumn":62},{"ruleId":"792","severity":1,"message":"796","line":419,"column":9,"nodeType":"797","messageId":"798","endLine":419,"endColumn":16},{"ruleId":"787","severity":1,"message":"788","line":423,"column":62,"nodeType":"789","messageId":"790","endLine":423,"endColumn":64},{"ruleId":"787","severity":1,"message":"788","line":424,"column":62,"nodeType":"789","messageId":"790","endLine":424,"endColumn":64},{"ruleId":"792","severity":1,"message":"796","line":427,"column":9,"nodeType":"797","messageId":"798","endLine":427,"endColumn":16},{"ruleId":"787","severity":1,"message":"788","line":431,"column":62,"nodeType":"789","messageId":"790","endLine":431,"endColumn":64},{"ruleId":"787","severity":1,"message":"788","line":432,"column":62,"nodeType":"789","messageId":"790","endLine":432,"endColumn":64},{"ruleId":"792","severity":1,"message":"796","line":435,"column":9,"nodeType":"797","messageId":"798","endLine":435,"endColumn":16},{"ruleId":"787","severity":1,"message":"788","line":439,"column":61,"nodeType":"789","messageId":"790","endLine":439,"endColumn":63},{"ruleId":"787","severity":1,"message":"788","line":440,"column":61,"nodeType":"789","messageId":"790","endLine":440,"endColumn":63},{"ruleId":"792","severity":1,"message":"796","line":443,"column":9,"nodeType":"797","messageId":"798","endLine":443,"endColumn":16},{"ruleId":"787","severity":1,"message":"788","line":447,"column":69,"nodeType":"789","messageId":"790","endLine":447,"endColumn":71},{"ruleId":"787","severity":1,"message":"788","line":448,"column":69,"nodeType":"789","messageId":"790","endLine":448,"endColumn":71},{"ruleId":"792","severity":1,"message":"796","line":451,"column":9,"nodeType":"797","messageId":"798","endLine":451,"endColumn":16},{"ruleId":"787","severity":1,"message":"788","line":455,"column":60,"nodeType":"789","messageId":"790","endLine":455,"endColumn":62},{"ruleId":"792","severity":1,"message":"796","line":458,"column":9,"nodeType":"797","messageId":"798","endLine":458,"endColumn":16},{"ruleId":"787","severity":1,"message":"788","line":461,"column":65,"nodeType":"789","messageId":"790","endLine":461,"endColumn":67},{"ruleId":"787","severity":1,"message":"788","line":462,"column":26,"nodeType":"789","messageId":"790","endLine":462,"endColumn":28},{"ruleId":"792","severity":1,"message":"796","line":465,"column":9,"nodeType":"797","messageId":"798","endLine":465,"endColumn":16},{"ruleId":"792","severity":1,"message":"796","line":469,"column":9,"nodeType":"797","messageId":"798","endLine":469,"endColumn":16},{"ruleId":"792","severity":1,"message":"796","line":473,"column":9,"nodeType":"797","messageId":"798","endLine":473,"endColumn":16},{"ruleId":"792","severity":1,"message":"796","line":477,"column":9,"nodeType":"797","messageId":"798","endLine":477,"endColumn":16},{"ruleId":"799","severity":1,"message":"848","line":538,"column":13,"nodeType":"763","messageId":"801","endLine":538,"endColumn":17},{"ruleId":"787","severity":1,"message":"788","line":830,"column":14,"nodeType":"789","messageId":"790","endLine":830,"endColumn":16},{"ruleId":"787","severity":1,"message":"788","line":1066,"column":36,"nodeType":"789","messageId":"790","endLine":1066,"endColumn":38},{"ruleId":"787","severity":1,"message":"788","line":1090,"column":38,"nodeType":"789","messageId":"790","endLine":1090,"endColumn":40},{"ruleId":"871","severity":1,"message":"872","line":50,"column":29,"nodeType":"789","messageId":"873","endLine":50,"endColumn":30},{"ruleId":"761","severity":1,"message":"888","line":6,"column":8,"nodeType":"763","messageId":"764","endLine":6,"endColumn":13},{"ruleId":"761","severity":1,"message":"889","line":48,"column":10,"nodeType":"763","messageId":"764","endLine":48,"endColumn":17},{"ruleId":"761","severity":1,"message":"890","line":26,"column":8,"nodeType":"763","messageId":"764","endLine":26,"endColumn":14},{"ruleId":"761","severity":1,"message":"884","line":28,"column":10,"nodeType":"763","messageId":"764","endLine":28,"endColumn":14},{"ruleId":"761","severity":1,"message":"762","line":28,"column":16,"nodeType":"763","messageId":"764","endLine":28,"endColumn":19},{"ruleId":"761","severity":1,"message":"865","line":29,"column":8,"nodeType":"763","messageId":"764","endLine":29,"endColumn":15},{"ruleId":"761","severity":1,"message":"776","line":38,"column":3,"nodeType":"763","messageId":"764","endLine":38,"endColumn":12},{"ruleId":"812","severity":1,"message":"891","line":69,"column":6,"nodeType":"814","endLine":69,"endColumn":8,"suggestions":"892"},{"ruleId":"761","severity":1,"message":"893","line":72,"column":10,"nodeType":"763","messageId":"764","endLine":72,"endColumn":23},{"ruleId":"761","severity":1,"message":"894","line":72,"column":25,"nodeType":"763","messageId":"764","endLine":72,"endColumn":41},{"ruleId":"761","severity":1,"message":"880","line":74,"column":10,"nodeType":"763","messageId":"764","endLine":74,"endColumn":17},{"ruleId":"761","severity":1,"message":"878","line":74,"column":19,"nodeType":"763","messageId":"764","endLine":74,"endColumn":29},{"ruleId":"761","severity":1,"message":"895","line":75,"column":10,"nodeType":"763","messageId":"764","endLine":75,"endColumn":22},{"ruleId":"761","severity":1,"message":"896","line":75,"column":24,"nodeType":"763","messageId":"764","endLine":75,"endColumn":39},{"ruleId":"761","severity":1,"message":"897","line":76,"column":10,"nodeType":"763","messageId":"764","endLine":76,"endColumn":21},{"ruleId":"761","severity":1,"message":"898","line":76,"column":23,"nodeType":"763","messageId":"764","endLine":76,"endColumn":37},{"ruleId":"761","severity":1,"message":"899","line":77,"column":10,"nodeType":"763","messageId":"764","endLine":77,"endColumn":14},{"ruleId":"761","severity":1,"message":"900","line":77,"column":16,"nodeType":"763","messageId":"764","endLine":77,"endColumn":23},{"ruleId":"761","severity":1,"message":"901","line":78,"column":10,"nodeType":"763","messageId":"764","endLine":78,"endColumn":21},{"ruleId":"761","severity":1,"message":"902","line":78,"column":23,"nodeType":"763","messageId":"764","endLine":78,"endColumn":37},{"ruleId":"761","severity":1,"message":"903","line":79,"column":10,"nodeType":"763","messageId":"764","endLine":79,"endColumn":21},{"ruleId":"761","severity":1,"message":"904","line":79,"column":23,"nodeType":"763","messageId":"764","endLine":79,"endColumn":37},{"ruleId":"761","severity":1,"message":"905","line":80,"column":10,"nodeType":"763","messageId":"764","endLine":80,"endColumn":22},{"ruleId":"761","severity":1,"message":"906","line":80,"column":24,"nodeType":"763","messageId":"764","endLine":80,"endColumn":39},{"ruleId":"787","severity":1,"message":"788","line":135,"column":39,"nodeType":"789","messageId":"790","endLine":135,"endColumn":41},{"ruleId":"787","severity":1,"message":"788","line":172,"column":62,"nodeType":"789","messageId":"790","endLine":172,"endColumn":64},{"ruleId":"787","severity":1,"message":"788","line":189,"column":39,"nodeType":"789","messageId":"790","endLine":189,"endColumn":41},{"ruleId":"787","severity":1,"message":"788","line":212,"column":60,"nodeType":"789","messageId":"790","endLine":212,"endColumn":62},{"ruleId":"875","severity":1,"message":"876","line":216,"column":11,"nodeType":"877","endLine":216,"endColumn":28},{"ruleId":"787","severity":1,"message":"788","line":286,"column":45,"nodeType":"789","messageId":"790","endLine":286,"endColumn":47},{"ruleId":"787","severity":1,"message":"788","line":297,"column":45,"nodeType":"789","messageId":"790","endLine":297,"endColumn":47},{"ruleId":"787","severity":1,"message":"788","line":308,"column":45,"nodeType":"789","messageId":"790","endLine":308,"endColumn":47},{"ruleId":"787","severity":1,"message":"788","line":319,"column":45,"nodeType":"789","messageId":"790","endLine":319,"endColumn":47},{"ruleId":"787","severity":1,"message":"788","line":345,"column":41,"nodeType":"789","messageId":"790","endLine":345,"endColumn":43},{"ruleId":"787","severity":1,"message":"788","line":354,"column":41,"nodeType":"789","messageId":"790","endLine":354,"endColumn":43},{"ruleId":"787","severity":1,"message":"788","line":363,"column":41,"nodeType":"789","messageId":"790","endLine":363,"endColumn":43},{"ruleId":"787","severity":1,"message":"788","line":393,"column":63,"nodeType":"789","messageId":"790","endLine":393,"endColumn":65},{"ruleId":"787","severity":1,"message":"788","line":398,"column":63,"nodeType":"789","messageId":"790","endLine":398,"endColumn":65},{"ruleId":"787","severity":1,"message":"788","line":403,"column":63,"nodeType":"789","messageId":"790","endLine":403,"endColumn":65},{"ruleId":"787","severity":1,"message":"788","line":426,"column":39,"nodeType":"789","messageId":"790","endLine":426,"endColumn":41},{"ruleId":"787","severity":1,"message":"788","line":442,"column":63,"nodeType":"789","messageId":"790","endLine":442,"endColumn":65},{"ruleId":"787","severity":1,"message":"788","line":447,"column":63,"nodeType":"789","messageId":"790","endLine":447,"endColumn":65},{"ruleId":"787","severity":1,"message":"788","line":463,"column":39,"nodeType":"789","messageId":"790","endLine":463,"endColumn":41},{"ruleId":"787","severity":1,"message":"788","line":476,"column":63,"nodeType":"789","messageId":"790","endLine":476,"endColumn":65},{"ruleId":"787","severity":1,"message":"788","line":481,"column":63,"nodeType":"789","messageId":"790","endLine":481,"endColumn":65},{"ruleId":"787","severity":1,"message":"788","line":486,"column":63,"nodeType":"789","messageId":"790","endLine":486,"endColumn":65},{"ruleId":"761","severity":1,"message":"834","line":4,"column":8,"nodeType":"763","messageId":"764","endLine":4,"endColumn":15},{"ruleId":"761","severity":1,"message":"835","line":6,"column":8,"nodeType":"763","messageId":"764","endLine":6,"endColumn":13},{"ruleId":"761","severity":1,"message":"836","line":9,"column":8,"nodeType":"763","messageId":"764","endLine":9,"endColumn":18},{"ruleId":"761","severity":1,"message":"907","line":11,"column":8,"nodeType":"763","messageId":"764","endLine":11,"endColumn":17},{"ruleId":"761","severity":1,"message":"908","line":12,"column":8,"nodeType":"763","messageId":"764","endLine":12,"endColumn":24},{"ruleId":"761","severity":1,"message":"909","line":13,"column":8,"nodeType":"763","messageId":"764","endLine":13,"endColumn":24},{"ruleId":"761","severity":1,"message":"910","line":14,"column":8,"nodeType":"763","messageId":"764","endLine":14,"endColumn":22},{"ruleId":"761","severity":1,"message":"911","line":15,"column":8,"nodeType":"763","messageId":"764","endLine":15,"endColumn":12},{"ruleId":"761","severity":1,"message":"912","line":20,"column":8,"nodeType":"763","messageId":"764","endLine":20,"endColumn":19},{"ruleId":"761","severity":1,"message":"913","line":24,"column":8,"nodeType":"763","messageId":"764","endLine":24,"endColumn":18},{"ruleId":"761","severity":1,"message":"914","line":27,"column":8,"nodeType":"763","messageId":"764","endLine":27,"endColumn":17},{"ruleId":"761","severity":1,"message":"915","line":28,"column":8,"nodeType":"763","messageId":"764","endLine":28,"endColumn":23},{"ruleId":"761","severity":1,"message":"884","line":30,"column":15,"nodeType":"763","messageId":"764","endLine":30,"endColumn":19},{"ruleId":"761","severity":1,"message":"916","line":31,"column":8,"nodeType":"763","messageId":"764","endLine":31,"endColumn":16},{"ruleId":"761","severity":1,"message":"917","line":69,"column":22,"nodeType":"763","messageId":"764","endLine":69,"endColumn":32},{"ruleId":"761","severity":1,"message":"918","line":70,"column":10,"nodeType":"763","messageId":"764","endLine":70,"endColumn":15},{"ruleId":"761","severity":1,"message":"919","line":70,"column":17,"nodeType":"763","messageId":"764","endLine":70,"endColumn":25},{"ruleId":"761","severity":1,"message":"920","line":110,"column":10,"nodeType":"763","messageId":"764","endLine":110,"endColumn":22},{"ruleId":"761","severity":1,"message":"921","line":114,"column":10,"nodeType":"763","messageId":"764","endLine":114,"endColumn":15},{"ruleId":"761","severity":1,"message":"922","line":114,"column":17,"nodeType":"763","messageId":"764","endLine":114,"endColumn":25},{"ruleId":"812","severity":1,"message":"923","line":137,"column":6,"nodeType":"814","endLine":137,"endColumn":8,"suggestions":"924"},{"ruleId":"787","severity":1,"message":"788","line":212,"column":23,"nodeType":"789","messageId":"790","endLine":212,"endColumn":25},{"ruleId":"787","severity":1,"message":"788","line":212,"column":60,"nodeType":"789","messageId":"790","endLine":212,"endColumn":62},{"ruleId":"787","severity":1,"message":"788","line":225,"column":24,"nodeType":"789","messageId":"790","endLine":225,"endColumn":26},{"ruleId":"787","severity":1,"message":"788","line":232,"column":33,"nodeType":"789","messageId":"790","endLine":232,"endColumn":35},{"ruleId":"787","severity":1,"message":"788","line":241,"column":23,"nodeType":"789","messageId":"790","endLine":241,"endColumn":25},{"ruleId":"761","severity":1,"message":"925","line":325,"column":9,"nodeType":"763","messageId":"764","endLine":325,"endColumn":19},{"ruleId":"761","severity":1,"message":"926","line":329,"column":9,"nodeType":"763","messageId":"764","endLine":329,"endColumn":19},{"ruleId":"761","severity":1,"message":"927","line":333,"column":9,"nodeType":"763","messageId":"764","endLine":333,"endColumn":20},{"ruleId":"787","severity":1,"message":"788","line":380,"column":15,"nodeType":"789","messageId":"790","endLine":380,"endColumn":17},{"ruleId":"787","severity":1,"message":"788","line":383,"column":18,"nodeType":"789","messageId":"790","endLine":383,"endColumn":20},{"ruleId":"787","severity":1,"message":"788","line":386,"column":18,"nodeType":"789","messageId":"790","endLine":386,"endColumn":20},{"ruleId":"787","severity":1,"message":"788","line":479,"column":27,"nodeType":"789","messageId":"790","endLine":479,"endColumn":29},{"ruleId":"787","severity":1,"message":"788","line":495,"column":29,"nodeType":"789","messageId":"790","endLine":495,"endColumn":31},{"ruleId":"761","severity":1,"message":"928","line":5,"column":10,"nodeType":"763","messageId":"764","endLine":5,"endColumn":17},{"ruleId":"761","severity":1,"message":"825","line":6,"column":13,"nodeType":"763","messageId":"764","endLine":6,"endColumn":20},{"ruleId":"761","severity":1,"message":"849","line":7,"column":8,"nodeType":"763","messageId":"764","endLine":7,"endColumn":17},{"ruleId":"761","severity":1,"message":"929","line":14,"column":3,"nodeType":"763","messageId":"764","endLine":14,"endColumn":19},{"ruleId":"761","severity":1,"message":"930","line":28,"column":10,"nodeType":"763","messageId":"764","endLine":28,"endColumn":22},{"ruleId":"761","severity":1,"message":"931","line":28,"column":24,"nodeType":"763","messageId":"764","endLine":28,"endColumn":39},{"ruleId":"761","severity":1,"message":"932","line":30,"column":10,"nodeType":"763","messageId":"764","endLine":30,"endColumn":29},{"ruleId":"761","severity":1,"message":"933","line":30,"column":31,"nodeType":"763","messageId":"764","endLine":30,"endColumn":53},{"ruleId":"761","severity":1,"message":"934","line":41,"column":9,"nodeType":"763","messageId":"764","endLine":41,"endColumn":16},{"ruleId":"787","severity":1,"message":"788","line":62,"column":15,"nodeType":"789","messageId":"790","endLine":62,"endColumn":17},{"ruleId":"787","severity":1,"message":"788","line":133,"column":29,"nodeType":"789","messageId":"790","endLine":133,"endColumn":31},{"ruleId":"761","severity":1,"message":"802","line":1,"column":17,"nodeType":"763","messageId":"764","endLine":1,"endColumn":26},{"ruleId":"761","severity":1,"message":"884","line":18,"column":10,"nodeType":"763","messageId":"764","endLine":18,"endColumn":14},{"ruleId":"761","severity":1,"message":"762","line":18,"column":16,"nodeType":"763","messageId":"764","endLine":18,"endColumn":19},{"ruleId":"761","severity":1,"message":"878","line":35,"column":19,"nodeType":"763","messageId":"764","endLine":35,"endColumn":29},{"ruleId":"761","severity":1,"message":"935","line":36,"column":16,"nodeType":"763","messageId":"764","endLine":36,"endColumn":23},{"ruleId":"761","severity":1,"message":"863","line":155,"column":19,"nodeType":"763","messageId":"764","endLine":155,"endColumn":26},{"ruleId":"761","severity":1,"message":"802","line":1,"column":17,"nodeType":"763","messageId":"764","endLine":1,"endColumn":26},{"ruleId":"761","severity":1,"message":"884","line":13,"column":10,"nodeType":"763","messageId":"764","endLine":13,"endColumn":14},{"ruleId":"761","severity":1,"message":"936","line":55,"column":10,"nodeType":"763","messageId":"764","endLine":55,"endColumn":24},{"ruleId":"761","severity":1,"message":"937","line":110,"column":9,"nodeType":"763","messageId":"764","endLine":110,"endColumn":28},{"ruleId":"787","severity":1,"message":"788","line":123,"column":24,"nodeType":"789","messageId":"790","endLine":123,"endColumn":26},{"ruleId":"761","severity":1,"message":"802","line":1,"column":17,"nodeType":"763","messageId":"764","endLine":1,"endColumn":26},{"ruleId":"761","severity":1,"message":"928","line":5,"column":10,"nodeType":"763","messageId":"764","endLine":5,"endColumn":17},{"ruleId":"761","severity":1,"message":"825","line":6,"column":13,"nodeType":"763","messageId":"764","endLine":6,"endColumn":20},{"ruleId":"761","severity":1,"message":"938","line":7,"column":8,"nodeType":"763","messageId":"764","endLine":7,"endColumn":14},{"ruleId":"761","severity":1,"message":"838","line":11,"column":8,"nodeType":"763","messageId":"764","endLine":11,"endColumn":16},{"ruleId":"761","severity":1,"message":"776","line":15,"column":3,"nodeType":"763","messageId":"764","endLine":15,"endColumn":12},{"ruleId":"761","severity":1,"message":"808","line":18,"column":3,"nodeType":"763","messageId":"764","endLine":18,"endColumn":7},{"ruleId":"761","severity":1,"message":"778","line":20,"column":3,"nodeType":"763","messageId":"764","endLine":20,"endColumn":9},{"ruleId":"761","severity":1,"message":"779","line":21,"column":3,"nodeType":"763","messageId":"764","endLine":21,"endColumn":13},{"ruleId":"761","severity":1,"message":"780","line":22,"column":3,"nodeType":"763","messageId":"764","endLine":22,"endColumn":10},{"ruleId":"761","severity":1,"message":"782","line":23,"column":3,"nodeType":"763","messageId":"764","endLine":23,"endColumn":9},{"ruleId":"761","severity":1,"message":"806","line":27,"column":3,"nodeType":"763","messageId":"764","endLine":27,"endColumn":13},{"ruleId":"761","severity":1,"message":"807","line":28,"column":13,"nodeType":"763","messageId":"764","endLine":28,"endColumn":27},{"ruleId":"761","severity":1,"message":"929","line":29,"column":3,"nodeType":"763","messageId":"764","endLine":29,"endColumn":19},{"ruleId":"761","severity":1,"message":"810","line":31,"column":7,"nodeType":"763","messageId":"764","endLine":31,"endColumn":16},{"ruleId":"761","severity":1,"message":"802","line":1,"column":17,"nodeType":"763","messageId":"764","endLine":1,"endColumn":26},{"ruleId":"761","severity":1,"message":"773","line":1,"column":28,"nodeType":"763","messageId":"764","endLine":1,"endColumn":36},{"ruleId":"761","severity":1,"message":"939","line":2,"column":8,"nodeType":"763","messageId":"764","endLine":2,"endColumn":13},{"ruleId":"761","severity":1,"message":"940","line":3,"column":8,"nodeType":"763","messageId":"764","endLine":3,"endColumn":17},{"ruleId":"761","severity":1,"message":"941","line":4,"column":8,"nodeType":"763","messageId":"764","endLine":4,"endColumn":17},{"ruleId":"761","severity":1,"message":"942","line":5,"column":8,"nodeType":"763","messageId":"764","endLine":5,"endColumn":22},{"ruleId":"761","severity":1,"message":"943","line":6,"column":8,"nodeType":"763","messageId":"764","endLine":6,"endColumn":17},{"ruleId":"761","severity":1,"message":"944","line":7,"column":8,"nodeType":"763","messageId":"764","endLine":7,"endColumn":16},{"ruleId":"761","severity":1,"message":"945","line":10,"column":8,"nodeType":"763","messageId":"764","endLine":10,"endColumn":13},{"ruleId":"761","severity":1,"message":"834","line":11,"column":8,"nodeType":"763","messageId":"764","endLine":11,"endColumn":15},{"ruleId":"761","severity":1,"message":"838","line":12,"column":8,"nodeType":"763","messageId":"764","endLine":12,"endColumn":16},{"ruleId":"761","severity":1,"message":"938","line":13,"column":8,"nodeType":"763","messageId":"764","endLine":13,"endColumn":14},{"ruleId":"761","severity":1,"message":"946","line":16,"column":8,"nodeType":"763","messageId":"764","endLine":16,"endColumn":14},{"ruleId":"761","severity":1,"message":"947","line":22,"column":8,"nodeType":"763","messageId":"764","endLine":22,"endColumn":12},{"ruleId":"761","severity":1,"message":"948","line":23,"column":8,"nodeType":"763","messageId":"764","endLine":23,"endColumn":11},{"ruleId":"761","severity":1,"message":"949","line":24,"column":8,"nodeType":"763","messageId":"764","endLine":24,"endColumn":24},{"ruleId":"761","severity":1,"message":"950","line":27,"column":34,"nodeType":"763","messageId":"764","endLine":27,"endColumn":46},{"ruleId":"761","severity":1,"message":"951","line":27,"column":48,"nodeType":"763","messageId":"764","endLine":27,"endColumn":53},{"ruleId":"761","severity":1,"message":"776","line":30,"column":3,"nodeType":"763","messageId":"764","endLine":30,"endColumn":12},{"ruleId":"761","severity":1,"message":"805","line":33,"column":3,"nodeType":"763","messageId":"764","endLine":33,"endColumn":14},{"ruleId":"761","severity":1,"message":"806","line":34,"column":3,"nodeType":"763","messageId":"764","endLine":34,"endColumn":13},{"ruleId":"761","severity":1,"message":"778","line":35,"column":3,"nodeType":"763","messageId":"764","endLine":35,"endColumn":9},{"ruleId":"761","severity":1,"message":"782","line":36,"column":3,"nodeType":"763","messageId":"764","endLine":36,"endColumn":9},{"ruleId":"761","severity":1,"message":"809","line":38,"column":3,"nodeType":"763","messageId":"764","endLine":38,"endColumn":12},{"ruleId":"761","severity":1,"message":"854","line":41,"column":8,"nodeType":"763","messageId":"764","endLine":41,"endColumn":22},{"ruleId":"761","severity":1,"message":"952","line":42,"column":8,"nodeType":"763","messageId":"764","endLine":42,"endColumn":17},{"ruleId":"761","severity":1,"message":"803","line":43,"column":22,"nodeType":"763","messageId":"764","endLine":43,"endColumn":32},{"ruleId":"761","severity":1,"message":"840","line":44,"column":10,"nodeType":"763","messageId":"764","endLine":44,"endColumn":21},{"ruleId":"761","severity":1,"message":"884","line":45,"column":10,"nodeType":"763","messageId":"764","endLine":45,"endColumn":14},{"ruleId":"761","severity":1,"message":"762","line":45,"column":16,"nodeType":"763","messageId":"764","endLine":45,"endColumn":19},{"ruleId":"761","severity":1,"message":"865","line":46,"column":8,"nodeType":"763","messageId":"764","endLine":46,"endColumn":15},{"ruleId":"761","severity":1,"message":"953","line":50,"column":8,"nodeType":"763","messageId":"764","endLine":50,"endColumn":18},{"ruleId":"761","severity":1,"message":"954","line":51,"column":8,"nodeType":"763","messageId":"764","endLine":51,"endColumn":31},{"ruleId":"761","severity":1,"message":"779","line":52,"column":8,"nodeType":"763","messageId":"764","endLine":52,"endColumn":18},{"ruleId":"761","severity":1,"message":"821","line":53,"column":8,"nodeType":"763","messageId":"764","endLine":53,"endColumn":18},{"ruleId":"761","severity":1,"message":"955","line":121,"column":10,"nodeType":"763","messageId":"764","endLine":121,"endColumn":19},{"ruleId":"761","severity":1,"message":"785","line":130,"column":10,"nodeType":"763","messageId":"764","endLine":130,"endColumn":15},{"ruleId":"761","severity":1,"message":"956","line":131,"column":10,"nodeType":"763","messageId":"764","endLine":131,"endColumn":18},{"ruleId":"761","severity":1,"message":"957","line":131,"column":20,"nodeType":"763","messageId":"764","endLine":131,"endColumn":31},{"ruleId":"761","severity":1,"message":"958","line":142,"column":9,"nodeType":"763","messageId":"764","endLine":142,"endColumn":21},{"ruleId":"761","severity":1,"message":"959","line":145,"column":9,"nodeType":"763","messageId":"764","endLine":145,"endColumn":21},"no-native-reassign",["960"],"no-negated-in-lhs",["961"],"no-unused-vars","'API' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Component' is defined but never used.","'useState' is defined but never used.","'Legend' is defined but never used.","'ResponsiveContainer' is defined but never used.","'TextField' is defined but never used.","'Checkbox' is defined but never used.","'Button' is defined but never used.","'IconButton' is defined but never used.","'Divider' is defined but never used.","'FormControlLabel' is defined but never used.","'Switch' is defined but never used.","'PureComponent' is defined but never used.","'Sector' is defined but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'handleNext2Click' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","no-redeclare","'i' is already defined.","redeclared","'useEffect' is defined but never used.","'withStyles' is defined but never used.","'Typography' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'MaterialSelect' is defined but never used.","'Card' is defined but never used.","'Container' is defined but never used.","'useStyles' is assigned a value but never used.","'TodayIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.","ArrayExpression",["962"],"React Hook useEffect has a missing dependency: 'details'. Either include it or remove the dependency array. You can also do a functional update 'setDetails(d => ...)' if you only need 'details' in the 'setDetails' call.",["963"],"'AssignmentIcon' is defined but never used.","'Link' is defined but never used.","'EditIcon' is defined but never used.","'DeleteIcon' is defined but never used.","'classes' is assigned a value but never used.","'setUsers' is assigned a value but never used.","'MenuIcon' is defined but never used.","'actions' is defined but never used.","'PaymentIndex' is defined but never used.","'editCompany' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["964"],"'onCompanyChangeController' is assigned a value but never used.","'editCompanyClicked' is assigned a value but never used.","'onCompanySubmitController' is assigned a value but never used.",["965"],"'Tooltip' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'FormLabel' is defined but never used.","'InfoIcon' is defined but never used.","'FormHelperText' is defined but never used.","'Multiselect' is defined but never used.","'user' is assigned a value but never used.","'setCalculating' is assigned a value but never used.","'capabilityOptions' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'allProducts'. Either include it or remove the dependency array.",["966"],"'onDensityChangeController' is assigned a value but never used.","'handlePlaceOrderClick' is assigned a value but never used.","'temp' is already defined.","'constants' is defined but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","'currentUser' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.orderId'. Either include it or remove the dependency array.",["967"],"'InputAdornment' is defined but never used.","'AntSwitch' is assigned a value but never used.","'location' is assigned a value but never used.","'pinCode' is assigned a value but never used.","'setDensity' is assigned a value but never used.","'pinValidator' is assigned a value but never used.","'handleSwitchTogglerChange' is assigned a value but never used.","'onPinChangeController' is assigned a value but never used.","'onLocationChangeController' is assigned a value but never used.","'labelId' is assigned a value but never used.","'CardContent' is defined but never used.","'Spinner' is defined but never used.","'Breadcrumbs' is defined but never used.","'setAccDetails' is assigned a value but never used.","'fun' is assigned a value but never used.","'submit' is assigned a value but never used.","'setSubmit' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'setComDetails' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'setLoading' is assigned a value but never used.","'setTaxDetails' is assigned a value but never used.","'loading' is assigned a value but never used.","'Grid' is defined but never used.","'page' is assigned a value but never used.","'press' is assigned a value but never used.","'Auth' is defined but never used.",["968"],"'setnegativeValueValidator' is assigned a value but never used.",["969"],"'axios' is defined but never used.","'breadth' is assigned a value but never used.","'Upload' is defined but never used.","React Hook useEffect has a missing dependency: 'props.data'. Either include it or remove the dependency array.",["970"],"'paymentOption' is assigned a value but never used.","'setPaymentOption' is assigned a value but never used.","'paymentRatio' is assigned a value but never used.","'setPaymentRatio' is assigned a value but never used.","'paymentMode' is assigned a value but never used.","'setPaymentMode' is assigned a value but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","'referenceId' is assigned a value but never used.","'setReferenceId' is assigned a value but never used.","'nameOfPayer' is assigned a value but never used.","'setNameOfPayer' is assigned a value but never used.","'phoneOfPayer' is assigned a value but never used.","'setPhoneOfPayer' is assigned a value but never used.","'Accordion' is defined but never used.","'AccordionDetails' is defined but never used.","'AccordionSummary' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'Done' is defined but never used.","'WarningIcon' is defined but never used.","'CancelIcon' is defined but never used.","'ErrorIcon' is defined but never used.","'CheckCircleIcon' is defined but never used.","'Feedback' is defined but never used.","'setRatings' is assigned a value but never used.","'Issue' is assigned a value but never used.","'setIssue' is assigned a value but never used.","'DeliveryDate' is assigned a value but never used.","'count' is assigned a value but never used.","'setCount' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getTrackingId' and 'props'. Either include them or remove the dependency array.",["971"],"'handleNext' is assigned a value but never used.","'handleBack' is assigned a value but never used.","'handleReset' is assigned a value but never used.","'connect' is defined but never used.","'TextareaAutosize' is defined but never used.","'deliveryArea' is assigned a value but never used.","'setDeliveryArea' is assigned a value but never used.","'deliverZipValidator' is assigned a value but never used.","'setDeliverZipValidator' is assigned a value but never used.","'Address' is assigned a value but never used.","'setRows' is assigned a value but never used.","'newProductType' is assigned a value but never used.","'onProductTypeChange' is assigned a value but never used.","'Select' is defined but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'Paper' is defined but never used.","'AppBar' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'ShoppingCartIcon' is defined but never used.","'ListItemIcon' is defined but never used.","'Badge' is defined but never used.","'CheckIcon' is defined but never used.","'FolderIcon' is defined but never used.","'ListItemSecondaryAction' is defined but never used.","'a11yProps' is defined but never used.","'progress' is assigned a value but never used.","'setProgress' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'selectStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"972","fix":"973"},{"desc":"974","fix":"975"},{"desc":"972","fix":"976"},{"desc":"972","fix":"977"},{"desc":"978","fix":"979"},{"desc":"980","fix":"981"},{"desc":"980","fix":"982"},{"desc":"978","fix":"983"},{"desc":"984","fix":"985"},{"desc":"986","fix":"987"},"Update the dependencies array to be: [props]",{"range":"988","text":"989"},"Update the dependencies array to be: [details]",{"range":"990","text":"991"},{"range":"992","text":"989"},{"range":"993","text":"989"},"Update the dependencies array to be: [allProducts]",{"range":"994","text":"995"},"Update the dependencies array to be: [props.orderId]",{"range":"996","text":"997"},{"range":"998","text":"997"},{"range":"999","text":"995"},"Update the dependencies array to be: [props.data]",{"range":"1000","text":"1001"},"Update the dependencies array to be: [getTrackingId, props]",{"range":"1002","text":"1003"},[3480,3482],"[props]",[2197,2199],"[details]",[3317,3319],[1698,1700],[16875,16877],"[allProducts]",[1665,1667],"[props.orderId]",[6749,6751],[4599,4601],[1755,1757],"[props.data]",[4796,4798],"[getTrackingId, props]"]